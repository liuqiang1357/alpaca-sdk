/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IAlpacaTokenInterface extends ethers.utils.Interface {
  functions: {
    "endReleaseBlock()": FunctionFragment;
    "lockOf(address)": FunctionFragment;
    "transferAll(address)": FunctionFragment;
    "unlock()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "endReleaseBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lockOf", values: [string]): string;
  encodeFunctionData(functionFragment: "transferAll", values: [string]): string;
  encodeFunctionData(functionFragment: "unlock", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "endReleaseBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;

  events: {};
}

export class IAlpacaToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IAlpacaTokenInterface;

  functions: {
    endReleaseBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "endReleaseBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockOf(_account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "lockOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferAll(
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferAll(address)"(
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlock(overrides?: Overrides): Promise<ContractTransaction>;

    "unlock()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  endReleaseBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "endReleaseBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "lockOf(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferAll(_to: string, overrides?: Overrides): Promise<ContractTransaction>;

  "transferAll(address)"(
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlock(overrides?: Overrides): Promise<ContractTransaction>;

  "unlock()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    endReleaseBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "endReleaseBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "lockOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferAll(_to: string, overrides?: CallOverrides): Promise<void>;

    "transferAll(address)"(
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlock(overrides?: CallOverrides): Promise<void>;

    "unlock()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    endReleaseBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "endReleaseBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "lockOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferAll(_to: string, overrides?: Overrides): Promise<BigNumber>;

    "transferAll(address)"(
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlock(overrides?: Overrides): Promise<BigNumber>;

    "unlock()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    endReleaseBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "endReleaseBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferAll(
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferAll(address)"(
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlock(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unlock()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
