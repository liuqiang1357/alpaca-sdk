/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FairLaunchInterface extends ethers.utils.Interface {
  functions: {
    "addPool(uint256,address,bool)": FunctionFragment;
    "alpaca()": FunctionFragment;
    "alpacaPerBlock()": FunctionFragment;
    "bonusEndBlock()": FunctionFragment;
    "bonusLockUpBps()": FunctionFragment;
    "bonusMultiplier()": FunctionFragment;
    "deposit(address,uint256,uint256)": FunctionFragment;
    "devaddr()": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "getMultiplier(uint256,uint256)": FunctionFragment;
    "harvest(uint256)": FunctionFragment;
    "isDuplicatedPool(address)": FunctionFragment;
    "manualMint(address,uint256)": FunctionFragment;
    "massUpdatePools()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingAlpaca(uint256,address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAlpacaPerBlock(uint256)": FunctionFragment;
    "setBonus(uint256,uint256,uint256)": FunctionFragment;
    "setDev(address)": FunctionFragment;
    "setPool(uint256,uint256,bool)": FunctionFragment;
    "startBlock()": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdraw(address,uint256,uint256)": FunctionFragment;
    "withdrawAll(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addPool",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "alpaca", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "alpacaPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bonusEndBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bonusLockUpBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bonusMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "devaddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDuplicatedPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "manualMint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingAlpaca",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAlpacaPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBonus",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setDev", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPool",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "alpaca", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "alpacaPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bonusEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bonusLockUpBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bonusMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devaddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDuplicatedPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manualMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAlpaca",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAlpacaPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBonus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class FairLaunch extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FairLaunchInterface;

  functions: {
    addPool(
      _allocPoint: BigNumberish,
      _stakeToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPool(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _stakeToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    alpaca(overrides?: CallOverrides): Promise<[string]>;

    "alpaca()"(overrides?: CallOverrides): Promise<[string]>;

    alpacaPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "alpacaPerBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    bonusEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "bonusEndBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    bonusLockUpBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    "bonusLockUpBps()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    bonusMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "bonusMultiplier()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _for: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(address,uint256,uint256)"(
      _for: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    devaddr(overrides?: CallOverrides): Promise<[string]>;

    "devaddr()"(overrides?: CallOverrides): Promise<[string]>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getMultiplier(
      _lastRewardBlock: BigNumberish,
      _currentBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMultiplier(uint256,uint256)"(
      _lastRewardBlock: BigNumberish,
      _currentBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    harvest(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "harvest(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isDuplicatedPool(
      _stakeToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isDuplicatedPool(address)"(
      _stakeToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    manualMint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "manualMint(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    massUpdatePools(overrides?: Overrides): Promise<ContractTransaction>;

    "massUpdatePools()"(overrides?: Overrides): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingAlpaca(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pendingAlpaca(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        stakeToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accAlpacaPerShare: BigNumber;
        accAlpacaPerShareTilBonusEnd: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        stakeToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accAlpacaPerShare: BigNumber;
        accAlpacaPerShareTilBonusEnd: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setAlpacaPerBlock(
      _alpacaPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAlpacaPerBlock(uint256)"(
      _alpacaPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBonus(
      _bonusMultiplier: BigNumberish,
      _bonusEndBlock: BigNumberish,
      _bonusLockUpBps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBonus(uint256,uint256,uint256)"(
      _bonusMultiplier: BigNumberish,
      _bonusEndBlock: BigNumberish,
      _bonusLockUpBps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDev(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDev(address)"(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPool(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      arg2: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPool(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      arg2: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        bonusDebt: BigNumber;
        fundedBy: string;
      }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        bonusDebt: BigNumber;
        fundedBy: string;
      }
    >;

    withdraw(
      _for: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256,uint256)"(
      _for: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawAll(
      _for: string,
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawAll(address,uint256)"(
      _for: string,
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addPool(
    _allocPoint: BigNumberish,
    _stakeToken: string,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPool(uint256,address,bool)"(
    _allocPoint: BigNumberish,
    _stakeToken: string,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  alpaca(overrides?: CallOverrides): Promise<string>;

  "alpaca()"(overrides?: CallOverrides): Promise<string>;

  alpacaPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "alpacaPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "bonusEndBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  bonusLockUpBps(overrides?: CallOverrides): Promise<BigNumber>;

  "bonusLockUpBps()"(overrides?: CallOverrides): Promise<BigNumber>;

  bonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "bonusMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _for: string,
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(address,uint256,uint256)"(
    _for: string,
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  devaddr(overrides?: CallOverrides): Promise<string>;

  "devaddr()"(overrides?: CallOverrides): Promise<string>;

  emergencyWithdraw(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getMultiplier(
    _lastRewardBlock: BigNumberish,
    _currentBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMultiplier(uint256,uint256)"(
    _lastRewardBlock: BigNumberish,
    _currentBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  harvest(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "harvest(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isDuplicatedPool(
    _stakeToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isDuplicatedPool(address)"(
    _stakeToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  manualMint(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "manualMint(address,uint256)"(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  massUpdatePools(overrides?: Overrides): Promise<ContractTransaction>;

  "massUpdatePools()"(overrides?: Overrides): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingAlpaca(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingAlpaca(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      stakeToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accAlpacaPerShare: BigNumber;
      accAlpacaPerShareTilBonusEnd: BigNumber;
    }
  >;

  "poolInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      stakeToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accAlpacaPerShare: BigNumber;
      accAlpacaPerShareTilBonusEnd: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setAlpacaPerBlock(
    _alpacaPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAlpacaPerBlock(uint256)"(
    _alpacaPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBonus(
    _bonusMultiplier: BigNumberish,
    _bonusEndBlock: BigNumberish,
    _bonusLockUpBps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBonus(uint256,uint256,uint256)"(
    _bonusMultiplier: BigNumberish,
    _bonusEndBlock: BigNumberish,
    _bonusLockUpBps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDev(_devaddr: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setDev(address)"(
    _devaddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPool(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    arg2: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPool(uint256,uint256,bool)"(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    arg2: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePool(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      bonusDebt: BigNumber;
      fundedBy: string;
    }
  >;

  "userInfo(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      bonusDebt: BigNumber;
      fundedBy: string;
    }
  >;

  withdraw(
    _for: string,
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256,uint256)"(
    _for: string,
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawAll(
    _for: string,
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawAll(address,uint256)"(
    _for: string,
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addPool(
      _allocPoint: BigNumberish,
      _stakeToken: string,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPool(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _stakeToken: string,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    alpaca(overrides?: CallOverrides): Promise<string>;

    "alpaca()"(overrides?: CallOverrides): Promise<string>;

    alpacaPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "alpacaPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "bonusEndBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    bonusLockUpBps(overrides?: CallOverrides): Promise<BigNumber>;

    "bonusLockUpBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    bonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "bonusMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _for: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,uint256,uint256)"(
      _for: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    devaddr(overrides?: CallOverrides): Promise<string>;

    "devaddr()"(overrides?: CallOverrides): Promise<string>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMultiplier(
      _lastRewardBlock: BigNumberish,
      _currentBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256)"(
      _lastRewardBlock: BigNumberish,
      _currentBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "harvest(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isDuplicatedPool(
      _stakeToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isDuplicatedPool(address)"(
      _stakeToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    manualMint(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "manualMint(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    "massUpdatePools()"(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingAlpaca(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingAlpaca(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        stakeToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accAlpacaPerShare: BigNumber;
        accAlpacaPerShareTilBonusEnd: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        stakeToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accAlpacaPerShare: BigNumber;
        accAlpacaPerShareTilBonusEnd: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setAlpacaPerBlock(
      _alpacaPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAlpacaPerBlock(uint256)"(
      _alpacaPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBonus(
      _bonusMultiplier: BigNumberish,
      _bonusEndBlock: BigNumberish,
      _bonusLockUpBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBonus(uint256,uint256,uint256)"(
      _bonusMultiplier: BigNumberish,
      _bonusEndBlock: BigNumberish,
      _bonusLockUpBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDev(_devaddr: string, overrides?: CallOverrides): Promise<void>;

    "setDev(address)"(
      _devaddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPool(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      arg2: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPool(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      arg2: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        bonusDebt: BigNumber;
        fundedBy: string;
      }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        bonusDebt: BigNumber;
        fundedBy: string;
      }
    >;

    withdraw(
      _for: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256,uint256)"(
      _for: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(
      _for: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawAll(address,uint256)"(
      _for: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposit(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    EmergencyWithdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Withdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    addPool(
      _allocPoint: BigNumberish,
      _stakeToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPool(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _stakeToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    alpaca(overrides?: CallOverrides): Promise<BigNumber>;

    "alpaca()"(overrides?: CallOverrides): Promise<BigNumber>;

    alpacaPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "alpacaPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "bonusEndBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    bonusLockUpBps(overrides?: CallOverrides): Promise<BigNumber>;

    "bonusLockUpBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    bonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "bonusMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _for: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(address,uint256,uint256)"(
      _for: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    devaddr(overrides?: CallOverrides): Promise<BigNumber>;

    "devaddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getMultiplier(
      _lastRewardBlock: BigNumberish,
      _currentBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256)"(
      _lastRewardBlock: BigNumberish,
      _currentBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "harvest(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isDuplicatedPool(
      _stakeToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isDuplicatedPool(address)"(
      _stakeToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manualMint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "manualMint(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    massUpdatePools(overrides?: Overrides): Promise<BigNumber>;

    "massUpdatePools()"(overrides?: Overrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAlpaca(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingAlpaca(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setAlpacaPerBlock(
      _alpacaPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAlpacaPerBlock(uint256)"(
      _alpacaPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBonus(
      _bonusMultiplier: BigNumberish,
      _bonusEndBlock: BigNumberish,
      _bonusLockUpBps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBonus(uint256,uint256,uint256)"(
      _bonusMultiplier: BigNumberish,
      _bonusEndBlock: BigNumberish,
      _bonusLockUpBps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDev(_devaddr: string, overrides?: Overrides): Promise<BigNumber>;

    "setDev(address)"(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPool(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      arg2: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPool(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      arg2: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePool(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _for: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256,uint256)"(
      _for: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawAll(
      _for: string,
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawAll(address,uint256)"(
      _for: string,
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPool(
      _allocPoint: BigNumberish,
      _stakeToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPool(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _stakeToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    alpaca(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "alpaca()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    alpacaPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "alpacaPerBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bonusEndBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bonusEndBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bonusLockUpBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bonusLockUpBps()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bonusMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bonusMultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _for: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256,uint256)"(
      _for: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    devaddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devaddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getMultiplier(
      _lastRewardBlock: BigNumberish,
      _currentBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMultiplier(uint256,uint256)"(
      _lastRewardBlock: BigNumberish,
      _currentBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "harvest(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isDuplicatedPool(
      _stakeToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDuplicatedPool(address)"(
      _stakeToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manualMint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "manualMint(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    massUpdatePools(overrides?: Overrides): Promise<PopulatedTransaction>;

    "massUpdatePools()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAlpaca(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingAlpaca(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setAlpacaPerBlock(
      _alpacaPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAlpacaPerBlock(uint256)"(
      _alpacaPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBonus(
      _bonusMultiplier: BigNumberish,
      _bonusEndBlock: BigNumberish,
      _bonusLockUpBps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBonus(uint256,uint256,uint256)"(
      _bonusMultiplier: BigNumberish,
      _bonusEndBlock: BigNumberish,
      _bonusLockUpBps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDev(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDev(address)"(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPool(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      arg2: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPool(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      arg2: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _for: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256,uint256)"(
      _for: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      _for: string,
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawAll(address,uint256)"(
      _for: string,
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
