/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SimplePriceOracleInterface extends ethers.utils.Interface {
  functions: {
    "getPrice(address,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFeeder(address)": FunctionFragment;
    "setPrices(address[],address[],uint256[])": FunctionFragment;
    "store(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getPrice",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setFeeder", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPrices",
    values: [string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "store",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPrices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceUpdate(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdate"): EventFragment;
}

export class SimplePriceOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SimplePriceOracleInterface;

  functions: {
    getPrice(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; lastUpdate: BigNumber }
    >;

    "getPrice(address,address)"(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; lastUpdate: BigNumber }
    >;

    initialize(
      _feeder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _feeder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setFeeder(
      _feeder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeder(address)"(
      _feeder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPrices(
      token0s: string[],
      token1s: string[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPrices(address[],address[],uint256[])"(
      token0s: string[],
      token1s: string[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    store(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; lastUpdate: BigNumber }
    >;

    "store(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; lastUpdate: BigNumber }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getPrice(
    token0: string,
    token1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { price: BigNumber; lastUpdate: BigNumber }
  >;

  "getPrice(address,address)"(
    token0: string,
    token1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { price: BigNumber; lastUpdate: BigNumber }
  >;

  initialize(
    _feeder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _feeder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setFeeder(
    _feeder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeder(address)"(
    _feeder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPrices(
    token0s: string[],
    token1s: string[],
    prices: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPrices(address[],address[],uint256[])"(
    token0s: string[],
    token1s: string[],
    prices: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  store(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { price: BigNumber; lastUpdate: BigNumber }
  >;

  "store(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { price: BigNumber; lastUpdate: BigNumber }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getPrice(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; lastUpdate: BigNumber }
    >;

    "getPrice(address,address)"(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; lastUpdate: BigNumber }
    >;

    initialize(_feeder: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      _feeder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setFeeder(_feeder: string, overrides?: CallOverrides): Promise<void>;

    "setFeeder(address)"(
      _feeder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrices(
      token0s: string[],
      token1s: string[],
      prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setPrices(address[],address[],uint256[])"(
      token0s: string[],
      token1s: string[],
      prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    store(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; lastUpdate: BigNumber }
    >;

    "store(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; lastUpdate: BigNumber }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    PriceUpdate(
      token0: string | null,
      token1: string | null,
      price: null
    ): EventFilter;
  };

  estimateGas: {
    getPrice(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrice(address,address)"(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(_feeder: string, overrides?: Overrides): Promise<BigNumber>;

    "initialize(address)"(
      _feeder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setFeeder(_feeder: string, overrides?: Overrides): Promise<BigNumber>;

    "setFeeder(address)"(
      _feeder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPrices(
      token0s: string[],
      token1s: string[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPrices(address[],address[],uint256[])"(
      token0s: string[],
      token1s: string[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    store(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "store(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPrice(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrice(address,address)"(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _feeder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _feeder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setFeeder(
      _feeder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeder(address)"(
      _feeder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPrices(
      token0s: string[],
      token1s: string[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPrices(address[],address[],uint256[])"(
      token0s: string[],
      token1s: string[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    store(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "store(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
