/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MockContractContext } from "../MockContractContext";

export class MockContractContext__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<MockContractContext> {
    return super.deploy(overrides || {}) as Promise<MockContractContext>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockContractContext {
    return super.attach(address) as MockContractContext;
  }
  connect(signer: Signer): MockContractContext__factory {
    return super.connect(signer) as MockContractContext__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockContractContext {
    return new Contract(address, _abi, signerOrProvider) as MockContractContext;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "signature",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "executeTransaction",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506104a5806100206000396000f3fe60806040526004361061001e5760003560e01c80632224fa2514610023575b600080fd5b6100f66004803603608081101561003957600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561006857600080fd5b82018360208201111561007a57600080fd5b803590602001918460018302840111600160201b8311171561009b57600080fd5b919390929091602081019035600160201b8111156100b857600080fd5b8201836020820111156100ca57600080fd5b803590602001918460018302840111600160201b831117156100eb57600080fd5b50909250905061016b565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610130578181015183820152602001610118565b50505050905090810190601f16801561015d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606080846101b25783838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092935061020d92505050565b858560405180838380828437604051920182900382206001600160e01b031981166020840190815290955089945088935091602401905083838082843780830192505050935050505060405160208183030381529060405290505b60006060896001600160a01b031689846040518082805190602001908083835b6020831061024c5780518252601f19909201916020918201910161022d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146102ae576040519150601f19603f3d011682016040523d82523d6000602084013e6102b3565b606091505b5091509150816102c282610359565b9061034b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156103105781810151838201526020016102f8565b50505050905090810190601f16801561033d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b509998505050505050505050565b606060448251101561039f575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015261046a565b60048201805190926024019060208110156103b957600080fd5b8101908080516040519392919084600160201b8211156103d857600080fd5b9083019060208201858111156103ed57600080fd5b8251600160201b81118282018810171561040657600080fd5b82525081516020918201929091019080838360005b8381101561043357818101518382015260200161041b565b50505050905090810190601f1680156104605780820380516001836020036101000a031916815260200191505b5060405250505090505b91905056fea2646970667358221220c14bb3c2c97725c42d75eb049a529dd495210b55f312217c875d112c00f725c364736f6c63430006060033";
