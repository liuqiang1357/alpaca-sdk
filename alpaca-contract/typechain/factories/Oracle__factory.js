"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Oracle__factory = void 0;
const contracts_1 = require("@ethersproject/contracts");
class Oracle__factory extends contracts_1.ContractFactory {
    constructor(signer) {
        super(_abi, _bytecode, signer);
    }
    deploy(factory_, overrides) {
        return super.deploy(factory_, overrides || {});
    }
    getDeployTransaction(factory_, overrides) {
        return super.getDeployTransaction(factory_, overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static connect(address, signerOrProvider) {
        return new contracts_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.Oracle__factory = Oracle__factory;
const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "factory_",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [],
        name: "CYCLE",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenIn",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amountIn",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "tokenOut",
                type: "address",
            },
        ],
        name: "consult",
        outputs: [
            {
                internalType: "uint256",
                name: "amountOut",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "factory",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        name: "pairObservations",
        outputs: [
            {
                internalType: "uint256",
                name: "timestamp",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "price0Cumulative",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "price1Cumulative",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
        ],
        name: "update",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x60a060405234801561001057600080fd5b5060405161090c38038061090c8339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b03166108966100766000398061016a5280610258528061036352806103b252506108966000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063402e1abf1461005c5780638c86f1e4146100a05780639e8d48d0146100e8578063c45a0155146100f0578063c640752d14610114575b600080fd5b6100826004803603602081101561007257600080fd5b50356001600160a01b0316610144565b60408051938452602084019290925282820152519081900360600190f35b6100d6600480360360608110156100b657600080fd5b506001600160a01b03813581169160208101359160409091013516610165565b60408051918252519081900360200190f35b6100d661035b565b6100f8610361565b604080516001600160a01b039092168252519081900360200190f35b6101426004803603604081101561012a57600080fd5b506001600160a01b0381358116916020013516610385565b005b60006020819052908152604090208054600182015460029092015490919083565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166396ed28f986856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b03168152602001826001600160a01b03166001600160a01b031681526020019250505060206040518083038186803b1580156101f857600080fd5b505afa15801561020c573d6000803e3d6000fd5b505050506040513d602081101561022257600080fd5b50516001600160a01b03811660009081526020819052604081208054929350914203908061024f856104c4565b509150915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663544caa568b8a6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b03168152602001826001600160a01b03166001600160a01b0316815260200192505050604080518083038186803b1580156102e557600080fd5b505afa1580156102f9573d6000803e3d6000fd5b505050506040513d604081101561030f57600080fd5b505190506001600160a01b03808216908b16141561034457610337856001015484868c610693565b9650505050505050610354565b610337856002015483868c610693565b9392505050565b61038481565b7f000000000000000000000000000000000000000000000000000000000000000081565b604080516396ed28f960e01b81526001600160a01b038481166004830152838116602483015291516000927f000000000000000000000000000000000000000000000000000000000000000016916396ed28f9916044808301926020929190829003018186803b1580156103f857600080fd5b505afa15801561040c573d6000803e3d6000fd5b505050506040513d602081101561042257600080fd5b50516001600160a01b0381166000908152602081905260409020805491925090420361038481101561049b576040805162461bcd60e51b815260206004820152601e60248201527f4d4445584f7261636c653a20504552494f445f4e4f545f454c41505345440000604482015290519081900360640190fd5b6000806104a7856104c4565b504286556001860191909155600290940193909355505050505050565b60008060006104d16106e6565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561050c57600080fd5b505afa158015610520573d6000803e3d6000fd5b505050506040513d602081101561053657600080fd5b505160408051635a3d549360e01b815290519194506001600160a01b03861691635a3d549391600480820192602092909190829003018186803b15801561057c57600080fd5b505afa158015610590573d6000803e3d6000fd5b505050506040513d60208110156105a657600080fd5b505160408051630240bc6b60e21b81529051919350600091829182916001600160a01b03891691630902f1ac916004808301926060929190829003018186803b1580156105f257600080fd5b505afa158015610606573d6000803e3d6000fd5b505050506040513d606081101561061c57600080fd5b5080516020820151604090920151909450909250905063ffffffff808216908516146106895780840363ffffffff811661065684866106f0565b516001600160e01b031602969096019563ffffffff811661067785856106f0565b516001600160e01b0316029590950194505b5050509193909250565b600061069d610818565b604051806020016040528085888803816106b357fe5b046001600160e01b0316905290506106d36106ce8285610793565b610811565b6001600160901b03169695505050505050565b63ffffffff421690565b6106f8610818565b6000826001600160701b031611610750576040805162461bcd60e51b81526020600482015260176024820152764669786564506f696e743a204449565f42595f5a45524f60481b604482015290519081900360640190fd5b6040805160208101909152806001600160701b038416600160701b600160e01b03607087901b168161077e57fe5b046001600160e01b0316815250905092915050565b61079b61082a565b60008215806107c157505082516001600160e01b0316828102908382816107be57fe5b04145b6107fc5760405162461bcd60e51b815260040180806020018281038252602381526020018061083e6023913960400191505060405180910390fd5b60408051602081019091529081529392505050565b5160701c90565b60408051602081019091526000815290565b604051806020016040528060008152509056fe4669786564506f696e743a204d554c5449504c49434154494f4e5f4f564552464c4f57a264697066735822122072043093f839c07024dd1817c558eef24bc367f82bc704fd7227ee80b3a9d2f764736f6c63430006060033";
