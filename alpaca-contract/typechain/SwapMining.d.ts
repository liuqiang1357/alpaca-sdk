/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SwapMiningInterface extends ethers.utils.Interface {
  functions: {
    "addPair(uint256,address,bool)": FunctionFragment;
    "addWhitelist(address)": FunctionFragment;
    "delWhitelist(address)": FunctionFragment;
    "factory()": FunctionFragment;
    "getMdxReward(uint256)": FunctionFragment;
    "getPoolInfo(uint256)": FunctionFragment;
    "getQuantity(address,uint256,address)": FunctionFragment;
    "getUserReward(uint256)": FunctionFragment;
    "getWhitelist(uint256)": FunctionFragment;
    "getWhitelistLength()": FunctionFragment;
    "halvingPeriod()": FunctionFragment;
    "isWhitelist(address)": FunctionFragment;
    "massMintPools()": FunctionFragment;
    "mdx()": FunctionFragment;
    "mdxPerBlock()": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "pairOfPid(address)": FunctionFragment;
    "phase(uint256)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reward()": FunctionFragment;
    "router()": FunctionFragment;
    "setHalvingPeriod(uint256)": FunctionFragment;
    "setMdxPerBlock(uint256)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "setPair(uint256,uint256,bool)": FunctionFragment;
    "setRouter(address)": FunctionFragment;
    "startBlock()": FunctionFragment;
    "swap(address,address,address,uint256)": FunctionFragment;
    "takerWithdraw()": FunctionFragment;
    "targetToken()": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addPair",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "delWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMdxReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuantity",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "halvingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isWhitelist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "massMintPools",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mdx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mdxPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pairOfPid", values: [string]): string;
  encodeFunctionData(functionFragment: "phase", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reward", values?: undefined): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setHalvingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMdxPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPair",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setRouter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "takerWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "addPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMdxReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "halvingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massMintPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mdx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mdxPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairOfPid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "phase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHalvingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMdxPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takerWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class SwapMining extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SwapMiningInterface;

  functions: {
    addPair(
      _allocPoint: BigNumberish,
      _pair: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPair(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _pair: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addWhitelist(
      _addToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addWhitelist(address)"(
      _addToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delWhitelist(
      _delToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delWhitelist(address)"(
      _delToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    getMdxReward(
      _lastRewardBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMdxReward(uint256)"(
      _lastRewardBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolInfo(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, BigNumber, BigNumber, BigNumber]>;

    "getPoolInfo(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getQuantity(
      outputToken: string,
      outputAmount: BigNumberish,
      anchorToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getQuantity(address,uint256,address)"(
      outputToken: string,
      outputAmount: BigNumberish,
      anchorToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserReward(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getUserReward(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getWhitelist(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getWhitelist(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWhitelistLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getWhitelistLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    halvingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "halvingPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isWhitelist(_token: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isWhitelist(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    massMintPools(overrides?: Overrides): Promise<ContractTransaction>;

    "massMintPools()"(overrides?: Overrides): Promise<ContractTransaction>;

    mdx(overrides?: CallOverrides): Promise<[string]>;

    "mdx()"(overrides?: CallOverrides): Promise<[string]>;

    mdxPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mdxPerBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    "oracle()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pairOfPid(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "pairOfPid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "phase(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "phase()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        pair: string;
        quantity: BigNumber;
        totalQuantity: BigNumber;
        allocPoint: BigNumber;
        allocMdxAmount: BigNumber;
        lastRewardBlock: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        pair: string;
        quantity: BigNumber;
        totalQuantity: BigNumber;
        allocPoint: BigNumber;
        allocMdxAmount: BigNumber;
        lastRewardBlock: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    "reward()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    "reward(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    "router()"(overrides?: CallOverrides): Promise<[string]>;

    setHalvingPeriod(
      _block: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setHalvingPeriod(uint256)"(
      _block: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMdxPerBlock(
      _newPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMdxPerBlock(uint256)"(
      _newPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOracle(
      _oracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOracle(address)"(
      _oracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPair(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPair(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRouter(
      newRouter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRouter(address)"(
      newRouter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    swap(
      account: string,
      input: string,
      output: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swap(address,address,address,uint256)"(
      account: string,
      input: string,
      output: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    takerWithdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "takerWithdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

    targetToken(overrides?: CallOverrides): Promise<[string]>;

    "targetToken()"(overrides?: CallOverrides): Promise<[string]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { quantity: BigNumber; blockNumber: BigNumber }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { quantity: BigNumber; blockNumber: BigNumber }
    >;
  };

  addPair(
    _allocPoint: BigNumberish,
    _pair: string,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPair(uint256,address,bool)"(
    _allocPoint: BigNumberish,
    _pair: string,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addWhitelist(
    _addToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addWhitelist(address)"(
    _addToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delWhitelist(
    _delToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delWhitelist(address)"(
    _delToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  getMdxReward(
    _lastRewardBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMdxReward(uint256)"(
    _lastRewardBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolInfo(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber, BigNumber, BigNumber, BigNumber]>;

  "getPoolInfo(uint256)"(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber, BigNumber, BigNumber, BigNumber]>;

  getQuantity(
    outputToken: string,
    outputAmount: BigNumberish,
    anchorToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getQuantity(address,uint256,address)"(
    outputToken: string,
    outputAmount: BigNumberish,
    anchorToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserReward(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "getUserReward(uint256)"(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getWhitelist(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getWhitelist(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getWhitelistLength(overrides?: CallOverrides): Promise<BigNumber>;

  "getWhitelistLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  halvingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "halvingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  isWhitelist(_token: string, overrides?: CallOverrides): Promise<boolean>;

  "isWhitelist(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  massMintPools(overrides?: Overrides): Promise<ContractTransaction>;

  "massMintPools()"(overrides?: Overrides): Promise<ContractTransaction>;

  mdx(overrides?: CallOverrides): Promise<string>;

  "mdx()"(overrides?: CallOverrides): Promise<string>;

  mdxPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "mdxPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  mint(_pid: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  "mint(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  "oracle()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pairOfPid(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "pairOfPid(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "phase(uint256)"(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "phase()"(overrides?: CallOverrides): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      pair: string;
      quantity: BigNumber;
      totalQuantity: BigNumber;
      allocPoint: BigNumber;
      allocMdxAmount: BigNumber;
      lastRewardBlock: BigNumber;
    }
  >;

  "poolInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      pair: string;
      quantity: BigNumber;
      totalQuantity: BigNumber;
      allocPoint: BigNumber;
      allocMdxAmount: BigNumber;
      lastRewardBlock: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  "reward()"(overrides?: CallOverrides): Promise<BigNumber>;

  "reward(uint256)"(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  router(overrides?: CallOverrides): Promise<string>;

  "router()"(overrides?: CallOverrides): Promise<string>;

  setHalvingPeriod(
    _block: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setHalvingPeriod(uint256)"(
    _block: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMdxPerBlock(
    _newPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMdxPerBlock(uint256)"(
    _newPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOracle(
    _oracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOracle(address)"(
    _oracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPair(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPair(uint256,uint256,bool)"(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRouter(
    newRouter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRouter(address)"(
    newRouter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  swap(
    account: string,
    input: string,
    output: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swap(address,address,address,uint256)"(
    account: string,
    input: string,
    output: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  takerWithdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "takerWithdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

  targetToken(overrides?: CallOverrides): Promise<string>;

  "targetToken()"(overrides?: CallOverrides): Promise<string>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { quantity: BigNumber; blockNumber: BigNumber }
  >;

  "userInfo(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { quantity: BigNumber; blockNumber: BigNumber }
  >;

  callStatic: {
    addPair(
      _allocPoint: BigNumberish,
      _pair: string,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPair(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _pair: string,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    addWhitelist(
      _addToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "addWhitelist(address)"(
      _addToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delWhitelist(
      _delToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "delWhitelist(address)"(
      _delToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    getMdxReward(
      _lastRewardBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMdxReward(uint256)"(
      _lastRewardBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, BigNumber, BigNumber, BigNumber]>;

    "getPoolInfo(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getQuantity(
      outputToken: string,
      outputAmount: BigNumberish,
      anchorToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getQuantity(address,uint256,address)"(
      outputToken: string,
      outputAmount: BigNumberish,
      anchorToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReward(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getUserReward(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getWhitelist(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getWhitelist(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getWhitelistLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getWhitelistLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    halvingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "halvingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelist(_token: string, overrides?: CallOverrides): Promise<boolean>;

    "isWhitelist(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    massMintPools(overrides?: CallOverrides): Promise<void>;

    "massMintPools()"(overrides?: CallOverrides): Promise<void>;

    mdx(overrides?: CallOverrides): Promise<string>;

    "mdx()"(overrides?: CallOverrides): Promise<string>;

    mdxPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "mdxPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(_pid: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "mint(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    oracle(overrides?: CallOverrides): Promise<string>;

    "oracle()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pairOfPid(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "pairOfPid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "phase(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "phase()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        pair: string;
        quantity: BigNumber;
        totalQuantity: BigNumber;
        allocPoint: BigNumber;
        allocMdxAmount: BigNumber;
        lastRewardBlock: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        pair: string;
        quantity: BigNumber;
        totalQuantity: BigNumber;
        allocPoint: BigNumber;
        allocMdxAmount: BigNumber;
        lastRewardBlock: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    "reward()"(overrides?: CallOverrides): Promise<BigNumber>;

    "reward(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<string>;

    "router()"(overrides?: CallOverrides): Promise<string>;

    setHalvingPeriod(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setHalvingPeriod(uint256)"(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMdxPerBlock(
      _newPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMdxPerBlock(uint256)"(
      _newPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(_oracle: string, overrides?: CallOverrides): Promise<void>;

    "setOracle(address)"(
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPair(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPair(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouter(newRouter: string, overrides?: CallOverrides): Promise<void>;

    "setRouter(address)"(
      newRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      account: string,
      input: string,
      output: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "swap(address,address,address,uint256)"(
      account: string,
      input: string,
      output: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    takerWithdraw(overrides?: CallOverrides): Promise<void>;

    "takerWithdraw()"(overrides?: CallOverrides): Promise<void>;

    targetToken(overrides?: CallOverrides): Promise<string>;

    "targetToken()"(overrides?: CallOverrides): Promise<string>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { quantity: BigNumber; blockNumber: BigNumber }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { quantity: BigNumber; blockNumber: BigNumber }
    >;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    addPair(
      _allocPoint: BigNumberish,
      _pair: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPair(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _pair: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addWhitelist(_addToken: string, overrides?: Overrides): Promise<BigNumber>;

    "addWhitelist(address)"(
      _addToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    delWhitelist(_delToken: string, overrides?: Overrides): Promise<BigNumber>;

    "delWhitelist(address)"(
      _delToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMdxReward(
      _lastRewardBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMdxReward(uint256)"(
      _lastRewardBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolInfo(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuantity(
      outputToken: string,
      outputAmount: BigNumberish,
      anchorToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getQuantity(address,uint256,address)"(
      outputToken: string,
      outputAmount: BigNumberish,
      anchorToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReward(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserReward(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhitelist(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWhitelist(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhitelistLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getWhitelistLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    halvingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "halvingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelist(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isWhitelist(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massMintPools(overrides?: Overrides): Promise<BigNumber>;

    "massMintPools()"(overrides?: Overrides): Promise<BigNumber>;

    mdx(overrides?: CallOverrides): Promise<BigNumber>;

    "mdx()"(overrides?: CallOverrides): Promise<BigNumber>;

    mdxPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "mdxPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "mint(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    "oracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pairOfPid(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "pairOfPid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "phase(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "phase()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    "reward()"(overrides?: CallOverrides): Promise<BigNumber>;

    "reward(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    "router()"(overrides?: CallOverrides): Promise<BigNumber>;

    setHalvingPeriod(
      _block: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setHalvingPeriod(uint256)"(
      _block: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMdxPerBlock(
      _newPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMdxPerBlock(uint256)"(
      _newPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOracle(_oracle: string, overrides?: Overrides): Promise<BigNumber>;

    "setOracle(address)"(
      _oracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPair(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPair(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRouter(newRouter: string, overrides?: Overrides): Promise<BigNumber>;

    "setRouter(address)"(
      newRouter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      account: string,
      input: string,
      output: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swap(address,address,address,uint256)"(
      account: string,
      input: string,
      output: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    takerWithdraw(overrides?: Overrides): Promise<BigNumber>;

    "takerWithdraw()"(overrides?: Overrides): Promise<BigNumber>;

    targetToken(overrides?: CallOverrides): Promise<BigNumber>;

    "targetToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPair(
      _allocPoint: BigNumberish,
      _pair: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPair(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _pair: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addWhitelist(
      _addToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addWhitelist(address)"(
      _addToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delWhitelist(
      _delToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delWhitelist(address)"(
      _delToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMdxReward(
      _lastRewardBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMdxReward(uint256)"(
      _lastRewardBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInfo(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolInfo(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuantity(
      outputToken: string,
      outputAmount: BigNumberish,
      anchorToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getQuantity(address,uint256,address)"(
      outputToken: string,
      outputAmount: BigNumberish,
      anchorToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReward(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserReward(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhitelist(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWhitelist(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhitelistLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWhitelistLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    halvingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "halvingPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWhitelist(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWhitelist(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    massMintPools(overrides?: Overrides): Promise<PopulatedTransaction>;

    "massMintPools()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    mdx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mdx()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mdxPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mdxPerBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairOfPid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pairOfPid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "phase(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "phase()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    "reward()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reward(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "router()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setHalvingPeriod(
      _block: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setHalvingPeriod(uint256)"(
      _block: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMdxPerBlock(
      _newPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMdxPerBlock(uint256)"(
      _newPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOracle(
      _oracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOracle(address)"(
      _oracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPair(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPair(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRouter(
      newRouter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRouter(address)"(
      newRouter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      account: string,
      input: string,
      output: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swap(address,address,address,uint256)"(
      account: string,
      input: string,
      output: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    takerWithdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    "takerWithdraw()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    targetToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "targetToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
