/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FairLaunchV2Interface extends ethers.utils.Interface {
  functions: {
    "ALPACA()": FunctionFragment;
    "FAIR_LAUNCH_V1()": FunctionFragment;
    "MASTER_PID()": FunctionFragment;
    "addPool(uint256,address,address,uint256)": FunctionFragment;
    "alpacaPerBlock()": FunctionFragment;
    "deposit(address,uint256,uint256)": FunctionFragment;
    "dummyToken()": FunctionFragment;
    "emergencyWithdraw(uint256,address)": FunctionFragment;
    "harvest(uint256)": FunctionFragment;
    "init(address)": FunctionFragment;
    "isDuplicatedPool(address)": FunctionFragment;
    "lockers(uint256)": FunctionFragment;
    "massUpdatePools(uint256[])": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingAlpaca(uint256,address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPool(uint256,uint256,address,bool)": FunctionFragment;
    "stakeTokens(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdraw(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ALPACA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "FAIR_LAUNCH_V1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MASTER_PID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "alpacaPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dummyToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isDuplicatedPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingAlpaca",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPool",
    values: [BigNumberish, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ALPACA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FAIR_LAUNCH_V1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MASTER_PID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "alpacaPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dummyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDuplicatedPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAlpaca",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256,uint256,address)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256,address)": EventFragment;
    "Harvest(address,uint256,uint256)": EventFragment;
    "LogInit()": EventFragment;
    "LogPoolAddition(uint256,uint256,address,address)": EventFragment;
    "LogSetPool(uint256,uint256,address,bool)": EventFragment;
    "LogUpdatePool(uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdraw(address,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogInit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPoolAddition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUpdatePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class FairLaunchV2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FairLaunchV2Interface;

  functions: {
    ALPACA(overrides?: CallOverrides): Promise<[string]>;

    "ALPACA()"(overrides?: CallOverrides): Promise<[string]>;

    FAIR_LAUNCH_V1(overrides?: CallOverrides): Promise<[string]>;

    "FAIR_LAUNCH_V1()"(overrides?: CallOverrides): Promise<[string]>;

    MASTER_PID(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MASTER_PID()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addPool(
      allocPoint: BigNumberish,
      _stakeToken: string,
      _locker: string,
      _startBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPool(uint256,address,address,uint256)"(
      allocPoint: BigNumberish,
      _stakeToken: string,
      _locker: string,
      _startBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    alpacaPerBlock(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "alpacaPerBlock()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    deposit(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    dummyToken(overrides?: CallOverrides): Promise<[string]>;

    "dummyToken()"(overrides?: CallOverrides): Promise<[string]>;

    emergencyWithdraw(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    harvest(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "harvest(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    init(
      _dummyToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address)"(
      _dummyToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isDuplicatedPool(
      _stakeToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isDuplicatedPool(address)"(
      _stakeToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "lockers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    massUpdatePools(
      pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "massUpdatePools(uint256[])"(
      pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingAlpaca(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pendingAlpaca(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accAlpacaPerShare: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accAlpacaPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setPool(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _locker: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPool(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _locker: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakeTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "stakeTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePool(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePool(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        fundedBy: string;
      }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        fundedBy: string;
      }
    >;

    withdraw(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  ALPACA(overrides?: CallOverrides): Promise<string>;

  "ALPACA()"(overrides?: CallOverrides): Promise<string>;

  FAIR_LAUNCH_V1(overrides?: CallOverrides): Promise<string>;

  "FAIR_LAUNCH_V1()"(overrides?: CallOverrides): Promise<string>;

  MASTER_PID(overrides?: CallOverrides): Promise<BigNumber>;

  "MASTER_PID()"(overrides?: CallOverrides): Promise<BigNumber>;

  addPool(
    allocPoint: BigNumberish,
    _stakeToken: string,
    _locker: string,
    _startBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPool(uint256,address,address,uint256)"(
    allocPoint: BigNumberish,
    _stakeToken: string,
    _locker: string,
    _startBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  alpacaPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "alpacaPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _for: string,
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(address,uint256,uint256)"(
    _for: string,
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  dummyToken(overrides?: CallOverrides): Promise<string>;

  "dummyToken()"(overrides?: CallOverrides): Promise<string>;

  emergencyWithdraw(
    pid: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256,address)"(
    pid: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  harvest(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "harvest(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  init(
    _dummyToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "init(address)"(
    _dummyToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isDuplicatedPool(
    _stakeToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isDuplicatedPool(address)"(
    _stakeToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "lockers(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  massUpdatePools(
    pids: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "massUpdatePools(uint256[])"(
    pids: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingAlpaca(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingAlpaca(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accAlpacaPerShare: BigNumber;
    }
  >;

  "poolInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accAlpacaPerShare: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setPool(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _locker: string,
    overwrite: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPool(uint256,uint256,address,bool)"(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _locker: string,
    overwrite: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakeTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "stakeTokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePool(
    pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePool(uint256)"(
    pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      fundedBy: string;
    }
  >;

  "userInfo(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      fundedBy: string;
    }
  >;

  withdraw(
    _for: string,
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256,uint256)"(
    _for: string,
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    ALPACA(overrides?: CallOverrides): Promise<string>;

    "ALPACA()"(overrides?: CallOverrides): Promise<string>;

    FAIR_LAUNCH_V1(overrides?: CallOverrides): Promise<string>;

    "FAIR_LAUNCH_V1()"(overrides?: CallOverrides): Promise<string>;

    MASTER_PID(overrides?: CallOverrides): Promise<BigNumber>;

    "MASTER_PID()"(overrides?: CallOverrides): Promise<BigNumber>;

    addPool(
      allocPoint: BigNumberish,
      _stakeToken: string,
      _locker: string,
      _startBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPool(uint256,address,address,uint256)"(
      allocPoint: BigNumberish,
      _stakeToken: string,
      _locker: string,
      _startBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    alpacaPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "alpacaPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dummyToken(overrides?: CallOverrides): Promise<string>;

    "dummyToken()"(overrides?: CallOverrides): Promise<string>;

    emergencyWithdraw(
      pid: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    harvest(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "harvest(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    init(_dummyToken: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      _dummyToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isDuplicatedPool(
      _stakeToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isDuplicatedPool(address)"(
      _stakeToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "lockers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    massUpdatePools(
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "massUpdatePools(uint256[])"(
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingAlpaca(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingAlpaca(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accAlpacaPerShare: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accAlpacaPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setPool(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _locker: string,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPool(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _locker: string,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "stakeTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accAlpacaPerShare: BigNumber;
      }
    >;

    "updatePool(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accAlpacaPerShare: BigNumber;
      }
    >;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        fundedBy: string;
      }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        fundedBy: string;
      }
    >;

    withdraw(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposit(
      user: string | null,
      pid: BigNumberish | null,
      amount: null,
      to: string | null
    ): EventFilter;

    EmergencyWithdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null,
      to: string | null
    ): EventFilter;

    Harvest(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    LogInit(): EventFilter;

    LogPoolAddition(
      pid: BigNumberish | null,
      allocPoint: null,
      lpToken: string | null,
      rewarder: string | null
    ): EventFilter;

    LogSetPool(
      pid: BigNumberish | null,
      allocPoint: null,
      rewarder: null,
      overwrite: null
    ): EventFilter;

    LogUpdatePool(
      pid: BigNumberish | null,
      lastRewardBlock: null,
      lpSupply: null,
      accAlpacaPerShare: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Withdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null,
      to: string | null
    ): EventFilter;
  };

  estimateGas: {
    ALPACA(overrides?: CallOverrides): Promise<BigNumber>;

    "ALPACA()"(overrides?: CallOverrides): Promise<BigNumber>;

    FAIR_LAUNCH_V1(overrides?: CallOverrides): Promise<BigNumber>;

    "FAIR_LAUNCH_V1()"(overrides?: CallOverrides): Promise<BigNumber>;

    MASTER_PID(overrides?: CallOverrides): Promise<BigNumber>;

    "MASTER_PID()"(overrides?: CallOverrides): Promise<BigNumber>;

    addPool(
      allocPoint: BigNumberish,
      _stakeToken: string,
      _locker: string,
      _startBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPool(uint256,address,address,uint256)"(
      allocPoint: BigNumberish,
      _stakeToken: string,
      _locker: string,
      _startBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    alpacaPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "alpacaPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    dummyToken(overrides?: CallOverrides): Promise<BigNumber>;

    "dummyToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    harvest(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "harvest(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    init(_dummyToken: string, overrides?: Overrides): Promise<BigNumber>;

    "init(address)"(
      _dummyToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isDuplicatedPool(
      _stakeToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isDuplicatedPool(address)"(
      _stakeToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "lockers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massUpdatePools(
      pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "massUpdatePools(uint256[])"(
      pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAlpaca(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingAlpaca(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setPool(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _locker: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPool(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _locker: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakeTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakeTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePool(pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "updatePool(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ALPACA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ALPACA()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FAIR_LAUNCH_V1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FAIR_LAUNCH_V1()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MASTER_PID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MASTER_PID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPool(
      allocPoint: BigNumberish,
      _stakeToken: string,
      _locker: string,
      _startBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPool(uint256,address,address,uint256)"(
      allocPoint: BigNumberish,
      _stakeToken: string,
      _locker: string,
      _startBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    alpacaPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "alpacaPerBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    dummyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dummyToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    harvest(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "harvest(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    init(
      _dummyToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      _dummyToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isDuplicatedPool(
      _stakeToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDuplicatedPool(address)"(
      _stakeToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    massUpdatePools(
      pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "massUpdatePools(uint256[])"(
      pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAlpaca(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingAlpaca(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setPool(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _locker: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPool(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _locker: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakeTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakeTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePool(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePool(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
