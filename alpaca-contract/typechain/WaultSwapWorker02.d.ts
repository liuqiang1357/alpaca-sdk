/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface WaultSwapWorker02Interface extends ethers.utils.Interface {
  functions: {
    "addStrat()": FunctionFragment;
    "balanceToShare(uint256)": FunctionFragment;
    "baseToken()": FunctionFragment;
    "beneficialVault()": FunctionFragment;
    "beneficialVaultBountyBps()": FunctionFragment;
    "buybackAmount()": FunctionFragment;
    "factory()": FunctionFragment;
    "farmingToken()": FunctionFragment;
    "fee()": FunctionFragment;
    "feeDenom()": FunctionFragment;
    "getMktSellAmount(uint256,uint256,uint256)": FunctionFragment;
    "getPath()": FunctionFragment;
    "getReinvestPath()": FunctionFragment;
    "getReversedPath()": FunctionFragment;
    "getRewardPath()": FunctionFragment;
    "health(uint256)": FunctionFragment;
    "initialize(address,address,address,address,uint256,address,address,uint256,address,address[],uint256)": FunctionFragment;
    "liqStrat()": FunctionFragment;
    "liquidate(uint256)": FunctionFragment;
    "lpToken()": FunctionFragment;
    "maxReinvestBountyBps()": FunctionFragment;
    "okReinvestors(address)": FunctionFragment;
    "okStrats(address)": FunctionFragment;
    "operator()": FunctionFragment;
    "owner()": FunctionFragment;
    "pid()": FunctionFragment;
    "reinvest()": FunctionFragment;
    "reinvestBountyBps()": FunctionFragment;
    "reinvestPath(uint256)": FunctionFragment;
    "reinvestThreshold()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardPath(uint256)": FunctionFragment;
    "router()": FunctionFragment;
    "setBeneficialVaultConfig(uint256,address,address[])": FunctionFragment;
    "setCriticalStrategies(address,address)": FunctionFragment;
    "setMaxReinvestBountyBps(uint256)": FunctionFragment;
    "setReinvestConfig(uint256,uint256,address[])": FunctionFragment;
    "setReinvestorOk(address[],bool)": FunctionFragment;
    "setRewardPath(address[])": FunctionFragment;
    "setStrategyOk(address[],bool)": FunctionFragment;
    "setTreasuryConfig(address,uint256)": FunctionFragment;
    "shareToBalance(uint256)": FunctionFragment;
    "shares(uint256)": FunctionFragment;
    "totalShare()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryAccount()": FunctionFragment;
    "treasuryBountyBps()": FunctionFragment;
    "wNative()": FunctionFragment;
    "wex()": FunctionFragment;
    "wexMaster()": FunctionFragment;
    "work(uint256,address,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addStrat", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceToShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "beneficialVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beneficialVaultBountyBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buybackAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "farmingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeDenom", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMktSellAmount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPath", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getReinvestPath",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReversedPath",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardPath",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "health",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      string,
      string,
      BigNumberish,
      string,
      string[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "liqStrat", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxReinvestBountyBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "okReinvestors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "okStrats", values: [string]): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pid", values?: undefined): string;
  encodeFunctionData(functionFragment: "reinvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reinvestBountyBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reinvestPath",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reinvestThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPath",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBeneficialVaultConfig",
    values: [BigNumberish, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setCriticalStrategies",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxReinvestBountyBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReinvestConfig",
    values: [BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setReinvestorOk",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPath",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyOk",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryConfig",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shareToBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryBountyBps",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wNative", values?: undefined): string;
  encodeFunctionData(functionFragment: "wex", values?: undefined): string;
  encodeFunctionData(functionFragment: "wexMaster", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "work",
    values: [BigNumberish, string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addStrat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceToShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beneficialVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficialVaultBountyBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buybackAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "farmingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeDenom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMktSellAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPath", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReinvestPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReversedPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "health", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liqStrat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxReinvestBountyBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "okReinvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "okStrats", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reinvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reinvestBountyBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reinvestPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reinvestThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardPath", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBeneficialVaultConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCriticalStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxReinvestBountyBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReinvestConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReinvestorOk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyOk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareToBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryBountyBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wNative", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wexMaster", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "work", data: BytesLike): Result;

  events: {
    "AddShare(uint256,uint256)": EventFragment;
    "BeneficialVaultTokenBuyback(address,address,uint256)": EventFragment;
    "Liquidate(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Reinvest(address,uint256,uint256)": EventFragment;
    "RemoveShare(uint256,uint256)": EventFragment;
    "SetBeneficialVaultConfig(address,uint256,address,address[])": EventFragment;
    "SetCriticalStrategy(address,address,address)": EventFragment;
    "SetMaxReinvestBountyBps(address,uint256)": EventFragment;
    "SetReinvestConfig(address,uint256,uint256,address[])": EventFragment;
    "SetReinvestorOK(address,address,bool)": EventFragment;
    "SetRewardPath(address,address[])": EventFragment;
    "SetStrategyOK(address,address,bool)": EventFragment;
    "SetTreasuryConfig(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddShare"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BeneficialVaultTokenBuyback"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reinvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveShare"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBeneficialVaultConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCriticalStrategy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxReinvestBountyBps"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReinvestConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReinvestorOK"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRewardPath"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetStrategyOK"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTreasuryConfig"): EventFragment;
}

export class WaultSwapWorker02 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: WaultSwapWorker02Interface;

  functions: {
    addStrat(overrides?: CallOverrides): Promise<[string]>;

    "addStrat()"(overrides?: CallOverrides): Promise<[string]>;

    balanceToShare(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceToShare(uint256)"(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    "baseToken()"(overrides?: CallOverrides): Promise<[string]>;

    beneficialVault(overrides?: CallOverrides): Promise<[string]>;

    "beneficialVault()"(overrides?: CallOverrides): Promise<[string]>;

    beneficialVaultBountyBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    "beneficialVaultBountyBps()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buybackAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "buybackAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    farmingToken(overrides?: CallOverrides): Promise<[string]>;

    "farmingToken()"(overrides?: CallOverrides): Promise<[string]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "fee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeDenom(overrides?: CallOverrides): Promise<[BigNumber]>;

    "feeDenom()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMktSellAmount(
      aIn: BigNumberish,
      rIn: BigNumberish,
      rOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMktSellAmount(uint256,uint256,uint256)"(
      aIn: BigNumberish,
      rIn: BigNumberish,
      rOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPath(overrides?: CallOverrides): Promise<[string[]]>;

    "getPath()"(overrides?: CallOverrides): Promise<[string[]]>;

    getReinvestPath(overrides?: CallOverrides): Promise<[string[]]>;

    "getReinvestPath()"(overrides?: CallOverrides): Promise<[string[]]>;

    getReversedPath(overrides?: CallOverrides): Promise<[string[]]>;

    "getReversedPath()"(overrides?: CallOverrides): Promise<[string[]]>;

    getRewardPath(overrides?: CallOverrides): Promise<[string[]]>;

    "getRewardPath()"(overrides?: CallOverrides): Promise<[string[]]>;

    health(id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "health(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _operator: string,
      _baseToken: string,
      _wexMaster: string,
      _router: string,
      _pid: BigNumberish,
      _addStrat: string,
      _liqStrat: string,
      _reinvestBountyBps: BigNumberish,
      _treasuryAccount: string,
      _reinvestPath: string[],
      _reinvestThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,uint256,address,address,uint256,address,address[],uint256)"(
      _operator: string,
      _baseToken: string,
      _wexMaster: string,
      _router: string,
      _pid: BigNumberish,
      _addStrat: string,
      _liqStrat: string,
      _reinvestBountyBps: BigNumberish,
      _treasuryAccount: string,
      _reinvestPath: string[],
      _reinvestThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liqStrat(overrides?: CallOverrides): Promise<[string]>;

    "liqStrat()"(overrides?: CallOverrides): Promise<[string]>;

    liquidate(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidate(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lpToken(overrides?: CallOverrides): Promise<[string]>;

    "lpToken()"(overrides?: CallOverrides): Promise<[string]>;

    maxReinvestBountyBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxReinvestBountyBps()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    okReinvestors(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "okReinvestors(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    okStrats(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "okStrats(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    "operator()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pid(overrides?: CallOverrides): Promise<[BigNumber]>;

    "pid()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    reinvest(overrides?: Overrides): Promise<ContractTransaction>;

    "reinvest()"(overrides?: Overrides): Promise<ContractTransaction>;

    reinvestBountyBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    "reinvestBountyBps()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    reinvestPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "reinvestPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    reinvestThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    "reinvestThreshold()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rewardPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "rewardPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    "router()"(overrides?: CallOverrides): Promise<[string]>;

    setBeneficialVaultConfig(
      _beneficialVaultBountyBps: BigNumberish,
      _beneficialVault: string,
      _rewardPath: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBeneficialVaultConfig(uint256,address,address[])"(
      _beneficialVaultBountyBps: BigNumberish,
      _beneficialVault: string,
      _rewardPath: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCriticalStrategies(
      _addStrat: string,
      _liqStrat: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCriticalStrategies(address,address)"(
      _addStrat: string,
      _liqStrat: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxReinvestBountyBps(
      _maxReinvestBountyBps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxReinvestBountyBps(uint256)"(
      _maxReinvestBountyBps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReinvestConfig(
      _reinvestBountyBps: BigNumberish,
      _reinvestThreshold: BigNumberish,
      _reinvestPath: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReinvestConfig(uint256,uint256,address[])"(
      _reinvestBountyBps: BigNumberish,
      _reinvestThreshold: BigNumberish,
      _reinvestPath: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReinvestorOk(
      reinvestors: string[],
      isOk: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReinvestorOk(address[],bool)"(
      reinvestors: string[],
      isOk: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRewardPath(
      _rewardPath: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRewardPath(address[])"(
      _rewardPath: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStrategyOk(
      strats: string[],
      isOk: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStrategyOk(address[],bool)"(
      strats: string[],
      isOk: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTreasuryConfig(
      _treasuryAccount: string,
      _treasuryBountyBps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTreasuryConfig(address,uint256)"(
      _treasuryAccount: string,
      _treasuryBountyBps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shareToBalance(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "shareToBalance(uint256)"(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    shares(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "shares(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalShare()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    treasuryAccount(overrides?: CallOverrides): Promise<[string]>;

    "treasuryAccount()"(overrides?: CallOverrides): Promise<[string]>;

    treasuryBountyBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    "treasuryBountyBps()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    wNative(overrides?: CallOverrides): Promise<[string]>;

    "wNative()"(overrides?: CallOverrides): Promise<[string]>;

    wex(overrides?: CallOverrides): Promise<[string]>;

    "wex()"(overrides?: CallOverrides): Promise<[string]>;

    wexMaster(overrides?: CallOverrides): Promise<[string]>;

    "wexMaster()"(overrides?: CallOverrides): Promise<[string]>;

    work(
      id: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "work(uint256,address,uint256,bytes)"(
      id: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addStrat(overrides?: CallOverrides): Promise<string>;

  "addStrat()"(overrides?: CallOverrides): Promise<string>;

  balanceToShare(
    balance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceToShare(uint256)"(
    balance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  "baseToken()"(overrides?: CallOverrides): Promise<string>;

  beneficialVault(overrides?: CallOverrides): Promise<string>;

  "beneficialVault()"(overrides?: CallOverrides): Promise<string>;

  beneficialVaultBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

  "beneficialVaultBountyBps()"(overrides?: CallOverrides): Promise<BigNumber>;

  buybackAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "buybackAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  farmingToken(overrides?: CallOverrides): Promise<string>;

  "farmingToken()"(overrides?: CallOverrides): Promise<string>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

  feeDenom(overrides?: CallOverrides): Promise<BigNumber>;

  "feeDenom()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMktSellAmount(
    aIn: BigNumberish,
    rIn: BigNumberish,
    rOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMktSellAmount(uint256,uint256,uint256)"(
    aIn: BigNumberish,
    rIn: BigNumberish,
    rOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPath(overrides?: CallOverrides): Promise<string[]>;

  "getPath()"(overrides?: CallOverrides): Promise<string[]>;

  getReinvestPath(overrides?: CallOverrides): Promise<string[]>;

  "getReinvestPath()"(overrides?: CallOverrides): Promise<string[]>;

  getReversedPath(overrides?: CallOverrides): Promise<string[]>;

  "getReversedPath()"(overrides?: CallOverrides): Promise<string[]>;

  getRewardPath(overrides?: CallOverrides): Promise<string[]>;

  "getRewardPath()"(overrides?: CallOverrides): Promise<string[]>;

  health(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "health(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _operator: string,
    _baseToken: string,
    _wexMaster: string,
    _router: string,
    _pid: BigNumberish,
    _addStrat: string,
    _liqStrat: string,
    _reinvestBountyBps: BigNumberish,
    _treasuryAccount: string,
    _reinvestPath: string[],
    _reinvestThreshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,uint256,address,address,uint256,address,address[],uint256)"(
    _operator: string,
    _baseToken: string,
    _wexMaster: string,
    _router: string,
    _pid: BigNumberish,
    _addStrat: string,
    _liqStrat: string,
    _reinvestBountyBps: BigNumberish,
    _treasuryAccount: string,
    _reinvestPath: string[],
    _reinvestThreshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liqStrat(overrides?: CallOverrides): Promise<string>;

  "liqStrat()"(overrides?: CallOverrides): Promise<string>;

  liquidate(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidate(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lpToken(overrides?: CallOverrides): Promise<string>;

  "lpToken()"(overrides?: CallOverrides): Promise<string>;

  maxReinvestBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

  "maxReinvestBountyBps()"(overrides?: CallOverrides): Promise<BigNumber>;

  okReinvestors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "okReinvestors(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  okStrats(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "okStrats(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  operator(overrides?: CallOverrides): Promise<string>;

  "operator()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pid(overrides?: CallOverrides): Promise<BigNumber>;

  "pid()"(overrides?: CallOverrides): Promise<BigNumber>;

  reinvest(overrides?: Overrides): Promise<ContractTransaction>;

  "reinvest()"(overrides?: Overrides): Promise<ContractTransaction>;

  reinvestBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

  "reinvestBountyBps()"(overrides?: CallOverrides): Promise<BigNumber>;

  reinvestPath(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "reinvestPath(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  reinvestThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "reinvestThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rewardPath(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "rewardPath(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  "router()"(overrides?: CallOverrides): Promise<string>;

  setBeneficialVaultConfig(
    _beneficialVaultBountyBps: BigNumberish,
    _beneficialVault: string,
    _rewardPath: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBeneficialVaultConfig(uint256,address,address[])"(
    _beneficialVaultBountyBps: BigNumberish,
    _beneficialVault: string,
    _rewardPath: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCriticalStrategies(
    _addStrat: string,
    _liqStrat: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCriticalStrategies(address,address)"(
    _addStrat: string,
    _liqStrat: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxReinvestBountyBps(
    _maxReinvestBountyBps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxReinvestBountyBps(uint256)"(
    _maxReinvestBountyBps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReinvestConfig(
    _reinvestBountyBps: BigNumberish,
    _reinvestThreshold: BigNumberish,
    _reinvestPath: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReinvestConfig(uint256,uint256,address[])"(
    _reinvestBountyBps: BigNumberish,
    _reinvestThreshold: BigNumberish,
    _reinvestPath: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReinvestorOk(
    reinvestors: string[],
    isOk: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReinvestorOk(address[],bool)"(
    reinvestors: string[],
    isOk: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRewardPath(
    _rewardPath: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRewardPath(address[])"(
    _rewardPath: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStrategyOk(
    strats: string[],
    isOk: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStrategyOk(address[],bool)"(
    strats: string[],
    isOk: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTreasuryConfig(
    _treasuryAccount: string,
    _treasuryBountyBps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTreasuryConfig(address,uint256)"(
    _treasuryAccount: string,
    _treasuryBountyBps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shareToBalance(
    share: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "shareToBalance(uint256)"(
    share: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  shares(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "shares(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalShare(overrides?: CallOverrides): Promise<BigNumber>;

  "totalShare()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  treasuryAccount(overrides?: CallOverrides): Promise<string>;

  "treasuryAccount()"(overrides?: CallOverrides): Promise<string>;

  treasuryBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

  "treasuryBountyBps()"(overrides?: CallOverrides): Promise<BigNumber>;

  wNative(overrides?: CallOverrides): Promise<string>;

  "wNative()"(overrides?: CallOverrides): Promise<string>;

  wex(overrides?: CallOverrides): Promise<string>;

  "wex()"(overrides?: CallOverrides): Promise<string>;

  wexMaster(overrides?: CallOverrides): Promise<string>;

  "wexMaster()"(overrides?: CallOverrides): Promise<string>;

  work(
    id: BigNumberish,
    user: string,
    debt: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "work(uint256,address,uint256,bytes)"(
    id: BigNumberish,
    user: string,
    debt: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addStrat(overrides?: CallOverrides): Promise<string>;

    "addStrat()"(overrides?: CallOverrides): Promise<string>;

    balanceToShare(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceToShare(uint256)"(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    "baseToken()"(overrides?: CallOverrides): Promise<string>;

    beneficialVault(overrides?: CallOverrides): Promise<string>;

    "beneficialVault()"(overrides?: CallOverrides): Promise<string>;

    beneficialVaultBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

    "beneficialVaultBountyBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    buybackAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "buybackAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    farmingToken(overrides?: CallOverrides): Promise<string>;

    "farmingToken()"(overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeDenom(overrides?: CallOverrides): Promise<BigNumber>;

    "feeDenom()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMktSellAmount(
      aIn: BigNumberish,
      rIn: BigNumberish,
      rOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMktSellAmount(uint256,uint256,uint256)"(
      aIn: BigNumberish,
      rIn: BigNumberish,
      rOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPath(overrides?: CallOverrides): Promise<string[]>;

    "getPath()"(overrides?: CallOverrides): Promise<string[]>;

    getReinvestPath(overrides?: CallOverrides): Promise<string[]>;

    "getReinvestPath()"(overrides?: CallOverrides): Promise<string[]>;

    getReversedPath(overrides?: CallOverrides): Promise<string[]>;

    "getReversedPath()"(overrides?: CallOverrides): Promise<string[]>;

    getRewardPath(overrides?: CallOverrides): Promise<string[]>;

    "getRewardPath()"(overrides?: CallOverrides): Promise<string[]>;

    health(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "health(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _operator: string,
      _baseToken: string,
      _wexMaster: string,
      _router: string,
      _pid: BigNumberish,
      _addStrat: string,
      _liqStrat: string,
      _reinvestBountyBps: BigNumberish,
      _treasuryAccount: string,
      _reinvestPath: string[],
      _reinvestThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,uint256,address,address,uint256,address,address[],uint256)"(
      _operator: string,
      _baseToken: string,
      _wexMaster: string,
      _router: string,
      _pid: BigNumberish,
      _addStrat: string,
      _liqStrat: string,
      _reinvestBountyBps: BigNumberish,
      _treasuryAccount: string,
      _reinvestPath: string[],
      _reinvestThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liqStrat(overrides?: CallOverrides): Promise<string>;

    "liqStrat()"(overrides?: CallOverrides): Promise<string>;

    liquidate(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "liquidate(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lpToken(overrides?: CallOverrides): Promise<string>;

    "lpToken()"(overrides?: CallOverrides): Promise<string>;

    maxReinvestBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

    "maxReinvestBountyBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    okReinvestors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "okReinvestors(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    okStrats(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "okStrats(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    operator(overrides?: CallOverrides): Promise<string>;

    "operator()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    "pid()"(overrides?: CallOverrides): Promise<BigNumber>;

    reinvest(overrides?: CallOverrides): Promise<void>;

    "reinvest()"(overrides?: CallOverrides): Promise<void>;

    reinvestBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

    "reinvestBountyBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    reinvestPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "reinvestPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    reinvestThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "reinvestThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardPath(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "rewardPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    "router()"(overrides?: CallOverrides): Promise<string>;

    setBeneficialVaultConfig(
      _beneficialVaultBountyBps: BigNumberish,
      _beneficialVault: string,
      _rewardPath: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setBeneficialVaultConfig(uint256,address,address[])"(
      _beneficialVaultBountyBps: BigNumberish,
      _beneficialVault: string,
      _rewardPath: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setCriticalStrategies(
      _addStrat: string,
      _liqStrat: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCriticalStrategies(address,address)"(
      _addStrat: string,
      _liqStrat: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxReinvestBountyBps(
      _maxReinvestBountyBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxReinvestBountyBps(uint256)"(
      _maxReinvestBountyBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReinvestConfig(
      _reinvestBountyBps: BigNumberish,
      _reinvestThreshold: BigNumberish,
      _reinvestPath: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setReinvestConfig(uint256,uint256,address[])"(
      _reinvestBountyBps: BigNumberish,
      _reinvestThreshold: BigNumberish,
      _reinvestPath: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setReinvestorOk(
      reinvestors: string[],
      isOk: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReinvestorOk(address[],bool)"(
      reinvestors: string[],
      isOk: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardPath(
      _rewardPath: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardPath(address[])"(
      _rewardPath: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategyOk(
      strats: string[],
      isOk: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStrategyOk(address[],bool)"(
      strats: string[],
      isOk: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryConfig(
      _treasuryAccount: string,
      _treasuryBountyBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTreasuryConfig(address,uint256)"(
      _treasuryAccount: string,
      _treasuryBountyBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shareToBalance(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "shareToBalance(uint256)"(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shares(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "shares(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalShare(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAccount(overrides?: CallOverrides): Promise<string>;

    "treasuryAccount()"(overrides?: CallOverrides): Promise<string>;

    treasuryBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

    "treasuryBountyBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    wNative(overrides?: CallOverrides): Promise<string>;

    "wNative()"(overrides?: CallOverrides): Promise<string>;

    wex(overrides?: CallOverrides): Promise<string>;

    "wex()"(overrides?: CallOverrides): Promise<string>;

    wexMaster(overrides?: CallOverrides): Promise<string>;

    "wexMaster()"(overrides?: CallOverrides): Promise<string>;

    work(
      id: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "work(uint256,address,uint256,bytes)"(
      id: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddShare(id: BigNumberish | null, share: null): EventFilter;

    BeneficialVaultTokenBuyback(
      caller: string | null,
      beneficialVault: string | null,
      buyback: BigNumberish | null
    ): EventFilter;

    Liquidate(id: BigNumberish | null, wad: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Reinvest(caller: string | null, reward: null, bounty: null): EventFilter;

    RemoveShare(id: BigNumberish | null, share: null): EventFilter;

    SetBeneficialVaultConfig(
      caller: string | null,
      beneficialVaultBountyBps: BigNumberish | null,
      beneficialVault: string | null,
      rewardPath: null
    ): EventFilter;

    SetCriticalStrategy(
      caller: string | null,
      addStrat: string | null,
      liqStrat: string | null
    ): EventFilter;

    SetMaxReinvestBountyBps(
      caller: string | null,
      maxReinvestBountyBps: BigNumberish | null
    ): EventFilter;

    SetReinvestConfig(
      caller: string | null,
      reinvestBountyBps: null,
      reinvestThreshold: null,
      reinvestPath: null
    ): EventFilter;

    SetReinvestorOK(
      caller: string | null,
      reinvestor: string | null,
      isOk: boolean | null
    ): EventFilter;

    SetRewardPath(caller: string | null, newRewardPath: null): EventFilter;

    SetStrategyOK(
      caller: string | null,
      strategy: string | null,
      isOk: boolean | null
    ): EventFilter;

    SetTreasuryConfig(
      caller: string | null,
      account: string | null,
      bountyBps: null
    ): EventFilter;
  };

  estimateGas: {
    addStrat(overrides?: CallOverrides): Promise<BigNumber>;

    "addStrat()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceToShare(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceToShare(uint256)"(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    "baseToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    beneficialVault(overrides?: CallOverrides): Promise<BigNumber>;

    "beneficialVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    beneficialVaultBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

    "beneficialVaultBountyBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    buybackAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "buybackAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    farmingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "farmingToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeDenom(overrides?: CallOverrides): Promise<BigNumber>;

    "feeDenom()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMktSellAmount(
      aIn: BigNumberish,
      rIn: BigNumberish,
      rOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMktSellAmount(uint256,uint256,uint256)"(
      aIn: BigNumberish,
      rIn: BigNumberish,
      rOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPath(overrides?: CallOverrides): Promise<BigNumber>;

    "getPath()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReinvestPath(overrides?: CallOverrides): Promise<BigNumber>;

    "getReinvestPath()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReversedPath(overrides?: CallOverrides): Promise<BigNumber>;

    "getReversedPath()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardPath(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardPath()"(overrides?: CallOverrides): Promise<BigNumber>;

    health(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "health(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _operator: string,
      _baseToken: string,
      _wexMaster: string,
      _router: string,
      _pid: BigNumberish,
      _addStrat: string,
      _liqStrat: string,
      _reinvestBountyBps: BigNumberish,
      _treasuryAccount: string,
      _reinvestPath: string[],
      _reinvestThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,uint256,address,address,uint256,address,address[],uint256)"(
      _operator: string,
      _baseToken: string,
      _wexMaster: string,
      _router: string,
      _pid: BigNumberish,
      _addStrat: string,
      _liqStrat: string,
      _reinvestBountyBps: BigNumberish,
      _treasuryAccount: string,
      _reinvestPath: string[],
      _reinvestThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liqStrat(overrides?: CallOverrides): Promise<BigNumber>;

    "liqStrat()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "liquidate(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lpToken(overrides?: CallOverrides): Promise<BigNumber>;

    "lpToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxReinvestBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

    "maxReinvestBountyBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    okReinvestors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "okReinvestors(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    okStrats(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "okStrats(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    "operator()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    "pid()"(overrides?: CallOverrides): Promise<BigNumber>;

    reinvest(overrides?: Overrides): Promise<BigNumber>;

    "reinvest()"(overrides?: Overrides): Promise<BigNumber>;

    reinvestBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

    "reinvestBountyBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    reinvestPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reinvestPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reinvestThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "reinvestThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rewardPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    "router()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBeneficialVaultConfig(
      _beneficialVaultBountyBps: BigNumberish,
      _beneficialVault: string,
      _rewardPath: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBeneficialVaultConfig(uint256,address,address[])"(
      _beneficialVaultBountyBps: BigNumberish,
      _beneficialVault: string,
      _rewardPath: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCriticalStrategies(
      _addStrat: string,
      _liqStrat: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCriticalStrategies(address,address)"(
      _addStrat: string,
      _liqStrat: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxReinvestBountyBps(
      _maxReinvestBountyBps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxReinvestBountyBps(uint256)"(
      _maxReinvestBountyBps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReinvestConfig(
      _reinvestBountyBps: BigNumberish,
      _reinvestThreshold: BigNumberish,
      _reinvestPath: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReinvestConfig(uint256,uint256,address[])"(
      _reinvestBountyBps: BigNumberish,
      _reinvestThreshold: BigNumberish,
      _reinvestPath: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReinvestorOk(
      reinvestors: string[],
      isOk: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReinvestorOk(address[],bool)"(
      reinvestors: string[],
      isOk: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRewardPath(
      _rewardPath: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRewardPath(address[])"(
      _rewardPath: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStrategyOk(
      strats: string[],
      isOk: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setStrategyOk(address[],bool)"(
      strats: string[],
      isOk: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTreasuryConfig(
      _treasuryAccount: string,
      _treasuryBountyBps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTreasuryConfig(address,uint256)"(
      _treasuryAccount: string,
      _treasuryBountyBps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shareToBalance(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "shareToBalance(uint256)"(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shares(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "shares(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalShare(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    treasuryAccount(overrides?: CallOverrides): Promise<BigNumber>;

    "treasuryAccount()"(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

    "treasuryBountyBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    wNative(overrides?: CallOverrides): Promise<BigNumber>;

    "wNative()"(overrides?: CallOverrides): Promise<BigNumber>;

    wex(overrides?: CallOverrides): Promise<BigNumber>;

    "wex()"(overrides?: CallOverrides): Promise<BigNumber>;

    wexMaster(overrides?: CallOverrides): Promise<BigNumber>;

    "wexMaster()"(overrides?: CallOverrides): Promise<BigNumber>;

    work(
      id: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "work(uint256,address,uint256,bytes)"(
      id: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addStrat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "addStrat()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceToShare(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceToShare(uint256)"(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beneficialVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "beneficialVault()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beneficialVaultBountyBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "beneficialVaultBountyBps()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buybackAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "buybackAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    farmingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "farmingToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeDenom(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeDenom()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMktSellAmount(
      aIn: BigNumberish,
      rIn: BigNumberish,
      rOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMktSellAmount(uint256,uint256,uint256)"(
      aIn: BigNumberish,
      rIn: BigNumberish,
      rOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPath(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPath()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReinvestPath(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReinvestPath()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReversedPath(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReversedPath()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardPath(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRewardPath()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    health(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "health(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _operator: string,
      _baseToken: string,
      _wexMaster: string,
      _router: string,
      _pid: BigNumberish,
      _addStrat: string,
      _liqStrat: string,
      _reinvestBountyBps: BigNumberish,
      _treasuryAccount: string,
      _reinvestPath: string[],
      _reinvestThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,uint256,address,address,uint256,address,address[],uint256)"(
      _operator: string,
      _baseToken: string,
      _wexMaster: string,
      _router: string,
      _pid: BigNumberish,
      _addStrat: string,
      _liqStrat: string,
      _reinvestBountyBps: BigNumberish,
      _treasuryAccount: string,
      _reinvestPath: string[],
      _reinvestThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liqStrat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liqStrat()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidate(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lpToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxReinvestBountyBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxReinvestBountyBps()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    okReinvestors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "okReinvestors(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    okStrats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "okStrats(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "operator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reinvest(overrides?: Overrides): Promise<PopulatedTransaction>;

    "reinvest()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    reinvestBountyBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reinvestBountyBps()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reinvestPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reinvestPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reinvestThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reinvestThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewardPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "router()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBeneficialVaultConfig(
      _beneficialVaultBountyBps: BigNumberish,
      _beneficialVault: string,
      _rewardPath: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBeneficialVaultConfig(uint256,address,address[])"(
      _beneficialVaultBountyBps: BigNumberish,
      _beneficialVault: string,
      _rewardPath: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCriticalStrategies(
      _addStrat: string,
      _liqStrat: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCriticalStrategies(address,address)"(
      _addStrat: string,
      _liqStrat: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxReinvestBountyBps(
      _maxReinvestBountyBps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxReinvestBountyBps(uint256)"(
      _maxReinvestBountyBps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReinvestConfig(
      _reinvestBountyBps: BigNumberish,
      _reinvestThreshold: BigNumberish,
      _reinvestPath: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReinvestConfig(uint256,uint256,address[])"(
      _reinvestBountyBps: BigNumberish,
      _reinvestThreshold: BigNumberish,
      _reinvestPath: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReinvestorOk(
      reinvestors: string[],
      isOk: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReinvestorOk(address[],bool)"(
      reinvestors: string[],
      isOk: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRewardPath(
      _rewardPath: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRewardPath(address[])"(
      _rewardPath: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStrategyOk(
      strats: string[],
      isOk: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStrategyOk(address[],bool)"(
      strats: string[],
      isOk: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTreasuryConfig(
      _treasuryAccount: string,
      _treasuryBountyBps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTreasuryConfig(address,uint256)"(
      _treasuryAccount: string,
      _treasuryBountyBps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shareToBalance(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "shareToBalance(uint256)"(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shares(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "shares(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalShare()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    treasuryAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasuryAccount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasuryBountyBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasuryBountyBps()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wNative(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wNative()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wex()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wexMaster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wexMaster()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    work(
      id: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "work(uint256,address,uint256,bytes)"(
      id: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
