/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IStronkAlpacaInterface extends ethers.utils.Interface {
  functions: {
    "hodl()": FunctionFragment;
    "prepareHodl()": FunctionFragment;
    "unhodl()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "hodl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prepareHodl",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unhodl", values?: undefined): string;

  decodeFunctionResult(functionFragment: "hodl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareHodl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unhodl", data: BytesLike): Result;

  events: {
    "Hodl(address,address,uint256)": EventFragment;
    "PrepareHodl(address,address)": EventFragment;
    "Unhodl(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Hodl"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrepareHodl"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unhodl"): EventFragment;
}

export class IStronkAlpaca extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IStronkAlpacaInterface;

  functions: {
    hodl(overrides?: Overrides): Promise<ContractTransaction>;

    "hodl()"(overrides?: Overrides): Promise<ContractTransaction>;

    prepareHodl(overrides?: Overrides): Promise<ContractTransaction>;

    "prepareHodl()"(overrides?: Overrides): Promise<ContractTransaction>;

    unhodl(overrides?: Overrides): Promise<ContractTransaction>;

    "unhodl()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  hodl(overrides?: Overrides): Promise<ContractTransaction>;

  "hodl()"(overrides?: Overrides): Promise<ContractTransaction>;

  prepareHodl(overrides?: Overrides): Promise<ContractTransaction>;

  "prepareHodl()"(overrides?: Overrides): Promise<ContractTransaction>;

  unhodl(overrides?: Overrides): Promise<ContractTransaction>;

  "unhodl()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    hodl(overrides?: CallOverrides): Promise<void>;

    "hodl()"(overrides?: CallOverrides): Promise<void>;

    prepareHodl(overrides?: CallOverrides): Promise<void>;

    "prepareHodl()"(overrides?: CallOverrides): Promise<void>;

    unhodl(overrides?: CallOverrides): Promise<void>;

    "unhodl()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Hodl(
      user: string | null,
      relayer: string | null,
      receivingStronkAlpacaAmount: null
    ): EventFilter;

    PrepareHodl(user: string | null, relayer: string | null): EventFilter;

    Unhodl(user: string | null, receivingAlpacaAmount: null): EventFilter;
  };

  estimateGas: {
    hodl(overrides?: Overrides): Promise<BigNumber>;

    "hodl()"(overrides?: Overrides): Promise<BigNumber>;

    prepareHodl(overrides?: Overrides): Promise<BigNumber>;

    "prepareHodl()"(overrides?: Overrides): Promise<BigNumber>;

    unhodl(overrides?: Overrides): Promise<BigNumber>;

    "unhodl()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    hodl(overrides?: Overrides): Promise<PopulatedTransaction>;

    "hodl()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    prepareHodl(overrides?: Overrides): Promise<PopulatedTransaction>;

    "prepareHodl()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    unhodl(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unhodl()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
