/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ShieldInterface extends ethers.utils.Interface {
  functions: {
    "addPool(uint256,address,bool)": FunctionFragment;
    "fairLaunchV1()": FunctionFragment;
    "mintCount()": FunctionFragment;
    "mintLimit()": FunctionFragment;
    "mintWarchest(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAlpacaPerBlock(uint256)": FunctionFragment;
    "setBonus(uint256,uint256,uint256)": FunctionFragment;
    "setPool(uint256,uint256,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addPool",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "fairLaunchV1",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mintCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "mintLimit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintWarchest",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAlpacaPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBonus",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPool",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fairLaunchV1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWarchest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAlpacaPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBonus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddPool(uint256,uint256,address)": EventFragment;
    "MintWarchest(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetAlpacaPerBlock(uint256)": EventFragment;
    "SetBonus(uint256,uint256,uint256)": EventFragment;
    "SetPool(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintWarchest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAlpacaPerBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBonus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPool"): EventFragment;
}

export class Shield extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ShieldInterface;

  functions: {
    addPool(
      _allocPoint: BigNumberish,
      _stakeToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPool(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _stakeToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    fairLaunchV1(overrides?: CallOverrides): Promise<[string]>;

    "fairLaunchV1()"(overrides?: CallOverrides): Promise<[string]>;

    mintCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mintCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mintLimit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintWarchest(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintWarchest(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setAlpacaPerBlock(
      _alpacaPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAlpacaPerBlock(uint256)"(
      _alpacaPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBonus(
      _bonusMultiplier: BigNumberish,
      _bonusEndBlock: BigNumberish,
      _bonusLockUpBps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBonus(uint256,uint256,uint256)"(
      _bonusMultiplier: BigNumberish,
      _bonusEndBlock: BigNumberish,
      _bonusLockUpBps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPool(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPool(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addPool(
    _allocPoint: BigNumberish,
    _stakeToken: string,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPool(uint256,address,bool)"(
    _allocPoint: BigNumberish,
    _stakeToken: string,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  fairLaunchV1(overrides?: CallOverrides): Promise<string>;

  "fairLaunchV1()"(overrides?: CallOverrides): Promise<string>;

  mintCount(overrides?: CallOverrides): Promise<BigNumber>;

  "mintCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  mintLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "mintLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  mintWarchest(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintWarchest(address,uint256)"(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setAlpacaPerBlock(
    _alpacaPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAlpacaPerBlock(uint256)"(
    _alpacaPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBonus(
    _bonusMultiplier: BigNumberish,
    _bonusEndBlock: BigNumberish,
    _bonusLockUpBps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBonus(uint256,uint256,uint256)"(
    _bonusMultiplier: BigNumberish,
    _bonusEndBlock: BigNumberish,
    _bonusLockUpBps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPool(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPool(uint256,uint256,bool)"(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addPool(
      _allocPoint: BigNumberish,
      _stakeToken: string,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPool(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _stakeToken: string,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    fairLaunchV1(overrides?: CallOverrides): Promise<string>;

    "fairLaunchV1()"(overrides?: CallOverrides): Promise<string>;

    mintCount(overrides?: CallOverrides): Promise<BigNumber>;

    "mintCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "mintLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintWarchest(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintWarchest(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setAlpacaPerBlock(
      _alpacaPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAlpacaPerBlock(uint256)"(
      _alpacaPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBonus(
      _bonusMultiplier: BigNumberish,
      _bonusEndBlock: BigNumberish,
      _bonusLockUpBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBonus(uint256,uint256,uint256)"(
      _bonusMultiplier: BigNumberish,
      _bonusEndBlock: BigNumberish,
      _bonusLockUpBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPool(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPool(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddPool(
      _pid: BigNumberish | null,
      _allocPoint: null,
      _stakeToken: string | null
    ): EventFilter;

    MintWarchest(_to: string | null, _amount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    SetAlpacaPerBlock(_alpacaPerBlock: BigNumberish | null): EventFilter;

    SetBonus(
      _bonusMultiplier: null,
      _bonusEndBlock: null,
      _bonusLockUpBps: null
    ): EventFilter;

    SetPool(_pid: BigNumberish | null, _allocPoint: null): EventFilter;
  };

  estimateGas: {
    addPool(
      _allocPoint: BigNumberish,
      _stakeToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPool(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _stakeToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    fairLaunchV1(overrides?: CallOverrides): Promise<BigNumber>;

    "fairLaunchV1()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintCount(overrides?: CallOverrides): Promise<BigNumber>;

    "mintCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "mintLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintWarchest(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintWarchest(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setAlpacaPerBlock(
      _alpacaPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAlpacaPerBlock(uint256)"(
      _alpacaPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBonus(
      _bonusMultiplier: BigNumberish,
      _bonusEndBlock: BigNumberish,
      _bonusLockUpBps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBonus(uint256,uint256,uint256)"(
      _bonusMultiplier: BigNumberish,
      _bonusEndBlock: BigNumberish,
      _bonusLockUpBps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPool(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPool(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPool(
      _allocPoint: BigNumberish,
      _stakeToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPool(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _stakeToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    fairLaunchV1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fairLaunchV1()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mintCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mintLimit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintWarchest(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintWarchest(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setAlpacaPerBlock(
      _alpacaPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAlpacaPerBlock(uint256)"(
      _alpacaPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBonus(
      _bonusMultiplier: BigNumberish,
      _bonusEndBlock: BigNumberish,
      _bonusLockUpBps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBonus(uint256,uint256,uint256)"(
      _bonusMultiplier: BigNumberish,
      _bonusEndBlock: BigNumberish,
      _bonusLockUpBps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPool(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPool(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
