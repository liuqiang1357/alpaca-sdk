/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SimpleVaultConfigInterface extends ethers.utils.Interface {
  functions: {
    "acceptDebt(address)": FunctionFragment;
    "approvedAddStrategies(address)": FunctionFragment;
    "getFairLaunchAddr()": FunctionFragment;
    "getInterestRate(uint256,uint256)": FunctionFragment;
    "getKillBps()": FunctionFragment;
    "getKillTreasuryBps()": FunctionFragment;
    "getReservePoolBps()": FunctionFragment;
    "getTreasuryAddr()": FunctionFragment;
    "getWNativeRelayer()": FunctionFragment;
    "getWrappedNativeAddr()": FunctionFragment;
    "initialize(uint256,uint256,uint256,uint256,address,address,address,uint256,address)": FunctionFragment;
    "interestRate()": FunctionFragment;
    "isWorker(address)": FunctionFragment;
    "isWorkerReserveConsistent(address)": FunctionFragment;
    "isWorkerStable(address)": FunctionFragment;
    "killFactor(address,uint256)": FunctionFragment;
    "minDebtSize()": FunctionFragment;
    "owner()": FunctionFragment;
    "rawKillFactor(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setApprovedAddStrategy(address[],bool)": FunctionFragment;
    "setParams(uint256,uint256,uint256,uint256,address,address,address,uint256,address)": FunctionFragment;
    "setWhitelistedCallers(address[],bool)": FunctionFragment;
    "setWhitelistedLiquidators(address[],bool)": FunctionFragment;
    "setWorker(address,bool,bool,uint256,uint256,bool,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "whitelistedCallers(address)": FunctionFragment;
    "whitelistedLiquidators(address)": FunctionFragment;
    "workFactor(address,uint256)": FunctionFragment;
    "workers(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "acceptDebt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approvedAddStrategies",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFairLaunchAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getKillBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getKillTreasuryBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReservePoolBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWNativeRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWrappedNativeAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isWorker", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isWorkerReserveConsistent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWorkerStable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "killFactor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minDebtSize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rawKillFactor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovedAddStrategy",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setParams",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistedCallers",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistedLiquidators",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWorker",
    values: [
      string,
      boolean,
      boolean,
      BigNumberish,
      BigNumberish,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistedCallers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedLiquidators",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "workFactor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "workers", values: [string]): string;

  decodeFunctionResult(functionFragment: "acceptDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approvedAddStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFairLaunchAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getKillBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getKillTreasuryBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReservePoolBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWNativeRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWrappedNativeAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isWorker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWorkerReserveConsistent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWorkerStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "killFactor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minDebtSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawKillFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovedAddStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistedCallers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistedLiquidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWorker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedCallers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedLiquidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workFactor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "workers", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class SimpleVaultConfig extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SimpleVaultConfigInterface;

  functions: {
    acceptDebt(worker: string, overrides?: CallOverrides): Promise<[boolean]>;

    "acceptDebt(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    approvedAddStrategies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "approvedAddStrategies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getFairLaunchAddr(overrides?: CallOverrides): Promise<[string]>;

    "getFairLaunchAddr()"(overrides?: CallOverrides): Promise<[string]>;

    getInterestRate(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getInterestRate(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getKillBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getKillBps()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getKillTreasuryBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getKillTreasuryBps()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReservePoolBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getReservePoolBps()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTreasuryAddr(overrides?: CallOverrides): Promise<[string]>;

    "getTreasuryAddr()"(overrides?: CallOverrides): Promise<[string]>;

    getWNativeRelayer(overrides?: CallOverrides): Promise<[string]>;

    "getWNativeRelayer()"(overrides?: CallOverrides): Promise<[string]>;

    getWrappedNativeAddr(overrides?: CallOverrides): Promise<[string]>;

    "getWrappedNativeAddr()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _minDebtSize: BigNumberish,
      _interestRate: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(uint256,uint256,uint256,uint256,address,address,address,uint256,address)"(
      _minDebtSize: BigNumberish,
      _interestRate: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    interestRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "interestRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isWorker(worker: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isWorker(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWorkerReserveConsistent(
      worker: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isWorkerReserveConsistent(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWorkerStable(
      worker: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isWorkerStable(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    killFactor(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "killFactor(address,uint256)"(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minDebtSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minDebtSize()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    rawKillFactor(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rawKillFactor(address,uint256)"(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setApprovedAddStrategy(
      addStrats: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovedAddStrategy(address[],bool)"(
      addStrats: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setParams(
      _minDebtSize: BigNumberish,
      _interestRate: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setParams(uint256,uint256,uint256,uint256,address,address,address,uint256,address)"(
      _minDebtSize: BigNumberish,
      _interestRate: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWhitelistedCallers(
      callers: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWhitelistedCallers(address[],bool)"(
      callers: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWhitelistedLiquidators(
      callers: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWhitelistedLiquidators(address[],bool)"(
      callers: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWorker(
      worker: string,
      _isWorker: boolean,
      _acceptDebt: boolean,
      _workFactor: BigNumberish,
      _killFactor: BigNumberish,
      _isStable: boolean,
      _isReserveConsistent: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWorker(address,bool,bool,uint256,uint256,bool,bool)"(
      worker: string,
      _isWorker: boolean,
      _acceptDebt: boolean,
      _workFactor: BigNumberish,
      _killFactor: BigNumberish,
      _isStable: boolean,
      _isReserveConsistent: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    "treasury()"(overrides?: CallOverrides): Promise<[string]>;

    whitelistedCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "whitelistedCallers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    whitelistedLiquidators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "whitelistedLiquidators(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    workFactor(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "workFactor(address,uint256)"(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    workers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, boolean, boolean] & {
        isWorker: boolean;
        acceptDebt: boolean;
        workFactor: BigNumber;
        killFactor: BigNumber;
        isStable: boolean;
        isReserveConsistent: boolean;
      }
    >;

    "workers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, boolean, boolean] & {
        isWorker: boolean;
        acceptDebt: boolean;
        workFactor: BigNumber;
        killFactor: BigNumber;
        isStable: boolean;
        isReserveConsistent: boolean;
      }
    >;
  };

  acceptDebt(worker: string, overrides?: CallOverrides): Promise<boolean>;

  "acceptDebt(address)"(
    worker: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  approvedAddStrategies(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "approvedAddStrategies(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getFairLaunchAddr(overrides?: CallOverrides): Promise<string>;

  "getFairLaunchAddr()"(overrides?: CallOverrides): Promise<string>;

  getInterestRate(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getInterestRate(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getKillBps(overrides?: CallOverrides): Promise<BigNumber>;

  "getKillBps()"(overrides?: CallOverrides): Promise<BigNumber>;

  getKillTreasuryBps(overrides?: CallOverrides): Promise<BigNumber>;

  "getKillTreasuryBps()"(overrides?: CallOverrides): Promise<BigNumber>;

  getReservePoolBps(overrides?: CallOverrides): Promise<BigNumber>;

  "getReservePoolBps()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTreasuryAddr(overrides?: CallOverrides): Promise<string>;

  "getTreasuryAddr()"(overrides?: CallOverrides): Promise<string>;

  getWNativeRelayer(overrides?: CallOverrides): Promise<string>;

  "getWNativeRelayer()"(overrides?: CallOverrides): Promise<string>;

  getWrappedNativeAddr(overrides?: CallOverrides): Promise<string>;

  "getWrappedNativeAddr()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _minDebtSize: BigNumberish,
    _interestRate: BigNumberish,
    _reservePoolBps: BigNumberish,
    _killBps: BigNumberish,
    _getWrappedNativeAddr: string,
    _getWNativeRelayer: string,
    _getFairLaunchAddr: string,
    _getKillTreasuryBps: BigNumberish,
    _treasury: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(uint256,uint256,uint256,uint256,address,address,address,uint256,address)"(
    _minDebtSize: BigNumberish,
    _interestRate: BigNumberish,
    _reservePoolBps: BigNumberish,
    _killBps: BigNumberish,
    _getWrappedNativeAddr: string,
    _getWNativeRelayer: string,
    _getFairLaunchAddr: string,
    _getKillTreasuryBps: BigNumberish,
    _treasury: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  interestRate(overrides?: CallOverrides): Promise<BigNumber>;

  "interestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  isWorker(worker: string, overrides?: CallOverrides): Promise<boolean>;

  "isWorker(address)"(
    worker: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWorkerReserveConsistent(
    worker: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isWorkerReserveConsistent(address)"(
    worker: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWorkerStable(worker: string, overrides?: CallOverrides): Promise<boolean>;

  "isWorkerStable(address)"(
    worker: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  killFactor(
    worker: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "killFactor(address,uint256)"(
    worker: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minDebtSize(overrides?: CallOverrides): Promise<BigNumber>;

  "minDebtSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  rawKillFactor(
    worker: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rawKillFactor(address,uint256)"(
    worker: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setApprovedAddStrategy(
    addStrats: string[],
    ok: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovedAddStrategy(address[],bool)"(
    addStrats: string[],
    ok: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setParams(
    _minDebtSize: BigNumberish,
    _interestRate: BigNumberish,
    _reservePoolBps: BigNumberish,
    _killBps: BigNumberish,
    _getWrappedNativeAddr: string,
    _getWNativeRelayer: string,
    _getFairLaunchAddr: string,
    _getKillTreasuryBps: BigNumberish,
    _treasury: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setParams(uint256,uint256,uint256,uint256,address,address,address,uint256,address)"(
    _minDebtSize: BigNumberish,
    _interestRate: BigNumberish,
    _reservePoolBps: BigNumberish,
    _killBps: BigNumberish,
    _getWrappedNativeAddr: string,
    _getWNativeRelayer: string,
    _getFairLaunchAddr: string,
    _getKillTreasuryBps: BigNumberish,
    _treasury: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWhitelistedCallers(
    callers: string[],
    ok: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWhitelistedCallers(address[],bool)"(
    callers: string[],
    ok: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWhitelistedLiquidators(
    callers: string[],
    ok: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWhitelistedLiquidators(address[],bool)"(
    callers: string[],
    ok: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWorker(
    worker: string,
    _isWorker: boolean,
    _acceptDebt: boolean,
    _workFactor: BigNumberish,
    _killFactor: BigNumberish,
    _isStable: boolean,
    _isReserveConsistent: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWorker(address,bool,bool,uint256,uint256,bool,bool)"(
    worker: string,
    _isWorker: boolean,
    _acceptDebt: boolean,
    _workFactor: BigNumberish,
    _killFactor: BigNumberish,
    _isStable: boolean,
    _isReserveConsistent: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  "treasury()"(overrides?: CallOverrides): Promise<string>;

  whitelistedCallers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "whitelistedCallers(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  whitelistedLiquidators(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "whitelistedLiquidators(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  workFactor(
    worker: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "workFactor(address,uint256)"(
    worker: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  workers(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber, BigNumber, boolean, boolean] & {
      isWorker: boolean;
      acceptDebt: boolean;
      workFactor: BigNumber;
      killFactor: BigNumber;
      isStable: boolean;
      isReserveConsistent: boolean;
    }
  >;

  "workers(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber, BigNumber, boolean, boolean] & {
      isWorker: boolean;
      acceptDebt: boolean;
      workFactor: BigNumber;
      killFactor: BigNumber;
      isStable: boolean;
      isReserveConsistent: boolean;
    }
  >;

  callStatic: {
    acceptDebt(worker: string, overrides?: CallOverrides): Promise<boolean>;

    "acceptDebt(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approvedAddStrategies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approvedAddStrategies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getFairLaunchAddr(overrides?: CallOverrides): Promise<string>;

    "getFairLaunchAddr()"(overrides?: CallOverrides): Promise<string>;

    getInterestRate(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInterestRate(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKillBps(overrides?: CallOverrides): Promise<BigNumber>;

    "getKillBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    getKillTreasuryBps(overrides?: CallOverrides): Promise<BigNumber>;

    "getKillTreasuryBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReservePoolBps(overrides?: CallOverrides): Promise<BigNumber>;

    "getReservePoolBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTreasuryAddr(overrides?: CallOverrides): Promise<string>;

    "getTreasuryAddr()"(overrides?: CallOverrides): Promise<string>;

    getWNativeRelayer(overrides?: CallOverrides): Promise<string>;

    "getWNativeRelayer()"(overrides?: CallOverrides): Promise<string>;

    getWrappedNativeAddr(overrides?: CallOverrides): Promise<string>;

    "getWrappedNativeAddr()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _minDebtSize: BigNumberish,
      _interestRate: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint256,uint256,uint256,uint256,address,address,address,uint256,address)"(
      _minDebtSize: BigNumberish,
      _interestRate: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    isWorker(worker: string, overrides?: CallOverrides): Promise<boolean>;

    "isWorker(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWorkerReserveConsistent(
      worker: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isWorkerReserveConsistent(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWorkerStable(worker: string, overrides?: CallOverrides): Promise<boolean>;

    "isWorkerStable(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    killFactor(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "killFactor(address,uint256)"(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minDebtSize(overrides?: CallOverrides): Promise<BigNumber>;

    "minDebtSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    rawKillFactor(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rawKillFactor(address,uint256)"(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setApprovedAddStrategy(
      addStrats: string[],
      ok: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovedAddStrategy(address[],bool)"(
      addStrats: string[],
      ok: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setParams(
      _minDebtSize: BigNumberish,
      _interestRate: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setParams(uint256,uint256,uint256,uint256,address,address,address,uint256,address)"(
      _minDebtSize: BigNumberish,
      _interestRate: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistedCallers(
      callers: string[],
      ok: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWhitelistedCallers(address[],bool)"(
      callers: string[],
      ok: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistedLiquidators(
      callers: string[],
      ok: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWhitelistedLiquidators(address[],bool)"(
      callers: string[],
      ok: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWorker(
      worker: string,
      _isWorker: boolean,
      _acceptDebt: boolean,
      _workFactor: BigNumberish,
      _killFactor: BigNumberish,
      _isStable: boolean,
      _isReserveConsistent: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWorker(address,bool,bool,uint256,uint256,bool,bool)"(
      worker: string,
      _isWorker: boolean,
      _acceptDebt: boolean,
      _workFactor: BigNumberish,
      _killFactor: BigNumberish,
      _isStable: boolean,
      _isReserveConsistent: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    "treasury()"(overrides?: CallOverrides): Promise<string>;

    whitelistedCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "whitelistedCallers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelistedLiquidators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "whitelistedLiquidators(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    workFactor(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "workFactor(address,uint256)"(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, boolean, boolean] & {
        isWorker: boolean;
        acceptDebt: boolean;
        workFactor: BigNumber;
        killFactor: BigNumber;
        isStable: boolean;
        isReserveConsistent: boolean;
      }
    >;

    "workers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, boolean, boolean] & {
        isWorker: boolean;
        acceptDebt: boolean;
        workFactor: BigNumber;
        killFactor: BigNumber;
        isStable: boolean;
        isReserveConsistent: boolean;
      }
    >;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    acceptDebt(worker: string, overrides?: CallOverrides): Promise<BigNumber>;

    "acceptDebt(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvedAddStrategies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "approvedAddStrategies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFairLaunchAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "getFairLaunchAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInterestRate(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInterestRate(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKillBps(overrides?: CallOverrides): Promise<BigNumber>;

    "getKillBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    getKillTreasuryBps(overrides?: CallOverrides): Promise<BigNumber>;

    "getKillTreasuryBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReservePoolBps(overrides?: CallOverrides): Promise<BigNumber>;

    "getReservePoolBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTreasuryAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "getTreasuryAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    getWNativeRelayer(overrides?: CallOverrides): Promise<BigNumber>;

    "getWNativeRelayer()"(overrides?: CallOverrides): Promise<BigNumber>;

    getWrappedNativeAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "getWrappedNativeAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _minDebtSize: BigNumberish,
      _interestRate: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(uint256,uint256,uint256,uint256,address,address,address,uint256,address)"(
      _minDebtSize: BigNumberish,
      _interestRate: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    isWorker(worker: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isWorker(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWorkerReserveConsistent(
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWorkerReserveConsistent(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWorkerStable(
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWorkerStable(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    killFactor(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "killFactor(address,uint256)"(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minDebtSize(overrides?: CallOverrides): Promise<BigNumber>;

    "minDebtSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    rawKillFactor(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rawKillFactor(address,uint256)"(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setApprovedAddStrategy(
      addStrats: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovedAddStrategy(address[],bool)"(
      addStrats: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setParams(
      _minDebtSize: BigNumberish,
      _interestRate: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setParams(uint256,uint256,uint256,uint256,address,address,address,uint256,address)"(
      _minDebtSize: BigNumberish,
      _interestRate: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWhitelistedCallers(
      callers: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setWhitelistedCallers(address[],bool)"(
      callers: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWhitelistedLiquidators(
      callers: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setWhitelistedLiquidators(address[],bool)"(
      callers: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWorker(
      worker: string,
      _isWorker: boolean,
      _acceptDebt: boolean,
      _workFactor: BigNumberish,
      _killFactor: BigNumberish,
      _isStable: boolean,
      _isReserveConsistent: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setWorker(address,bool,bool,uint256,uint256,bool,bool)"(
      worker: string,
      _isWorker: boolean,
      _acceptDebt: boolean,
      _workFactor: BigNumberish,
      _killFactor: BigNumberish,
      _isStable: boolean,
      _isReserveConsistent: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    "treasury()"(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelistedCallers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedLiquidators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelistedLiquidators(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workFactor(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "workFactor(address,uint256)"(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "workers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptDebt(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "acceptDebt(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedAddStrategies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "approvedAddStrategies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFairLaunchAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFairLaunchAddr()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInterestRate(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInterestRate(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKillBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getKillBps()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getKillTreasuryBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getKillTreasuryBps()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReservePoolBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReservePoolBps()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasuryAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTreasuryAddr()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWNativeRelayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getWNativeRelayer()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWrappedNativeAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWrappedNativeAddr()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _minDebtSize: BigNumberish,
      _interestRate: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(uint256,uint256,uint256,uint256,address,address,address,uint256,address)"(
      _minDebtSize: BigNumberish,
      _interestRate: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    interestRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "interestRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWorker(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWorker(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWorkerReserveConsistent(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWorkerReserveConsistent(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWorkerStable(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWorkerStable(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    killFactor(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "killFactor(address,uint256)"(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minDebtSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minDebtSize()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawKillFactor(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rawKillFactor(address,uint256)"(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setApprovedAddStrategy(
      addStrats: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovedAddStrategy(address[],bool)"(
      addStrats: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setParams(
      _minDebtSize: BigNumberish,
      _interestRate: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setParams(uint256,uint256,uint256,uint256,address,address,address,uint256,address)"(
      _minDebtSize: BigNumberish,
      _interestRate: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWhitelistedCallers(
      callers: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWhitelistedCallers(address[],bool)"(
      callers: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWhitelistedLiquidators(
      callers: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWhitelistedLiquidators(address[],bool)"(
      callers: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWorker(
      worker: string,
      _isWorker: boolean,
      _acceptDebt: boolean,
      _workFactor: BigNumberish,
      _killFactor: BigNumberish,
      _isStable: boolean,
      _isReserveConsistent: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWorker(address,bool,bool,uint256,uint256,bool,bool)"(
      worker: string,
      _isWorker: boolean,
      _acceptDebt: boolean,
      _workFactor: BigNumberish,
      _killFactor: BigNumberish,
      _isStable: boolean,
      _isReserveConsistent: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasury()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistedCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelistedCallers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedLiquidators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelistedLiquidators(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workFactor(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "workFactor(address,uint256)"(
      worker: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "workers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
