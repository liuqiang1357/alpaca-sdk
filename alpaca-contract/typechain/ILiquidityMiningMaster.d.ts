/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ILiquidityMiningMasterInterface extends ethers.utils.Interface {
  functions: {
    "BONUS_MULTIPLIER()": FunctionFragment;
    "addPool(uint256,address,bool)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "endBlock()": FunctionFragment;
    "getMultiplier(uint256,uint256)": FunctionFragment;
    "massUpdatePools()": FunctionFragment;
    "pair2Pid(address)": FunctionFragment;
    "pendingXMS(uint256,address)": FunctionFragment;
    "poolExistence(address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "setPool(uint256,uint256,bool)": FunctionFragment;
    "startBlock()": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "updateEndBlock(uint256)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "updateVestingMaster(address)": FunctionFragment;
    "updateXmsPerBlock(uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "xmsPerBlock()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BONUS_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pair2Pid", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pendingXMS",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolExistence",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPool",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateEndBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVestingMaster",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateXmsPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "xmsPerBlock",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BONUS_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pair2Pid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingXMS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolExistence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateVestingMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateXmsPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "xmsPerBlock",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "UpdateEmissionRate(address,uint256)": EventFragment;
    "UpdateEndBlock(address,uint256)": EventFragment;
    "UpdateVestingMaster(address,address)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateEmissionRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateEndBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateVestingMaster"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class ILiquidityMiningMaster extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ILiquidityMiningMasterInterface;

  functions: {
    BONUS_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    "BONUS_MULTIPLIER()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addPool(
      allocPoint: BigNumberish,
      lpToken: string,
      withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPool(uint256,address,bool)"(
      allocPoint: BigNumberish,
      lpToken: string,
      withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    endBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "endBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMultiplier(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMultiplier(uint256,uint256)"(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    massUpdatePools(overrides?: Overrides): Promise<ContractTransaction>;

    "massUpdatePools()"(overrides?: Overrides): Promise<ContractTransaction>;

    pair2Pid(pair: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "pair2Pid(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingXMS(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pendingXMS(uint256,address)"(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolExistence(lp: string, overrides?: CallOverrides): Promise<[boolean]>;

    "poolExistence(address)"(
      lp: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    poolInfo(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accXMSPerShare: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accXMSPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setPool(
      pid: BigNumberish,
      allocPoint: BigNumberish,
      withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPool(uint256,uint256,bool)"(
      pid: BigNumberish,
      allocPoint: BigNumberish,
      withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateEndBlock(
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateEndBlock(uint256)"(
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePool(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePool(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateVestingMaster(
      _vestingMaster: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateVestingMaster(address)"(
      _vestingMaster: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateXmsPerBlock(
      _xmsPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateXmsPerBlock(uint256)"(
      _xmsPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userInfo(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "userInfo(uint256,address)"(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdraw(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    xmsPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "xmsPerBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BONUS_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  "BONUS_MULTIPLIER()"(overrides?: CallOverrides): Promise<BigNumber>;

  addPool(
    allocPoint: BigNumberish,
    lpToken: string,
    withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPool(uint256,address,bool)"(
    allocPoint: BigNumberish,
    lpToken: string,
    withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256)"(
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256)"(
    pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  endBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "endBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMultiplier(
    from: BigNumberish,
    to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMultiplier(uint256,uint256)"(
    from: BigNumberish,
    to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  massUpdatePools(overrides?: Overrides): Promise<ContractTransaction>;

  "massUpdatePools()"(overrides?: Overrides): Promise<ContractTransaction>;

  pair2Pid(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

  "pair2Pid(address)"(
    pair: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingXMS(
    pid: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingXMS(uint256,address)"(
    pid: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolExistence(lp: string, overrides?: CallOverrides): Promise<boolean>;

  "poolExistence(address)"(
    lp: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  poolInfo(
    pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accXMSPerShare: BigNumber;
    }
  >;

  "poolInfo(uint256)"(
    pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accXMSPerShare: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  setPool(
    pid: BigNumberish,
    allocPoint: BigNumberish,
    withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPool(uint256,uint256,bool)"(
    pid: BigNumberish,
    allocPoint: BigNumberish,
    withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateEndBlock(
    _endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateEndBlock(uint256)"(
    _endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePool(
    pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePool(uint256)"(
    pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateVestingMaster(
    _vestingMaster: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateVestingMaster(address)"(
    _vestingMaster: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateXmsPerBlock(
    _xmsPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateXmsPerBlock(uint256)"(
    _xmsPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userInfo(
    pid: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  "userInfo(uint256,address)"(
    pid: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  withdraw(
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256)"(
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  xmsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "xmsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BONUS_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    "BONUS_MULTIPLIER()"(overrides?: CallOverrides): Promise<BigNumber>;

    addPool(
      allocPoint: BigNumberish,
      lpToken: string,
      withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPool(uint256,address,bool)"(
      allocPoint: BigNumberish,
      lpToken: string,
      withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "endBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplier(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256)"(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    "massUpdatePools()"(overrides?: CallOverrides): Promise<void>;

    pair2Pid(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

    "pair2Pid(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingXMS(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingXMS(uint256,address)"(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolExistence(lp: string, overrides?: CallOverrides): Promise<boolean>;

    "poolExistence(address)"(
      lp: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    poolInfo(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accXMSPerShare: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accXMSPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    setPool(
      pid: BigNumberish,
      allocPoint: BigNumberish,
      withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPool(uint256,uint256,bool)"(
      pid: BigNumberish,
      allocPoint: BigNumberish,
      withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateEndBlock(
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateEndBlock(uint256)"(
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "updatePool(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVestingMaster(
      _vestingMaster: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateVestingMaster(address)"(
      _vestingMaster: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateXmsPerBlock(
      _xmsPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateXmsPerBlock(uint256)"(
      _xmsPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "userInfo(uint256,address)"(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdraw(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    xmsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "xmsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Deposit(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    EmergencyWithdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    UpdateEmissionRate(user: string | null, xmsPerBlock: null): EventFilter;

    UpdateEndBlock(user: string | null, endBlock: null): EventFilter;

    UpdateVestingMaster(user: string | null, vestingMaster: null): EventFilter;

    Withdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    BONUS_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    "BONUS_MULTIPLIER()"(overrides?: CallOverrides): Promise<BigNumber>;

    addPool(
      allocPoint: BigNumberish,
      lpToken: string,
      withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPool(uint256,address,bool)"(
      allocPoint: BigNumberish,
      lpToken: string,
      withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    emergencyWithdraw(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "endBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplier(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256)"(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massUpdatePools(overrides?: Overrides): Promise<BigNumber>;

    "massUpdatePools()"(overrides?: Overrides): Promise<BigNumber>;

    pair2Pid(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

    "pair2Pid(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingXMS(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingXMS(uint256,address)"(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolExistence(lp: string, overrides?: CallOverrides): Promise<BigNumber>;

    "poolExistence(address)"(
      lp: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(pid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    setPool(
      pid: BigNumberish,
      allocPoint: BigNumberish,
      withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPool(uint256,uint256,bool)"(
      pid: BigNumberish,
      allocPoint: BigNumberish,
      withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateEndBlock(
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateEndBlock(uint256)"(
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePool(pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "updatePool(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateVestingMaster(
      _vestingMaster: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateVestingMaster(address)"(
      _vestingMaster: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateXmsPerBlock(
      _xmsPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateXmsPerBlock(uint256)"(
      _xmsPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userInfo(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,address)"(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    xmsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "xmsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BONUS_MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BONUS_MULTIPLIER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPool(
      allocPoint: BigNumberish,
      lpToken: string,
      withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPool(uint256,address,bool)"(
      allocPoint: BigNumberish,
      lpToken: string,
      withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    endBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "endBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMultiplier(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMultiplier(uint256,uint256)"(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    massUpdatePools(overrides?: Overrides): Promise<PopulatedTransaction>;

    "massUpdatePools()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    pair2Pid(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pair2Pid(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingXMS(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingXMS(uint256,address)"(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolExistence(
      lp: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolExistence(address)"(
      lp: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPool(
      pid: BigNumberish,
      allocPoint: BigNumberish,
      withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPool(uint256,uint256,bool)"(
      pid: BigNumberish,
      allocPoint: BigNumberish,
      withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateEndBlock(
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateEndBlock(uint256)"(
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePool(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePool(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateVestingMaster(
      _vestingMaster: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateVestingMaster(address)"(
      _vestingMaster: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateXmsPerBlock(
      _xmsPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateXmsPerBlock(uint256)"(
      _xmsPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,address)"(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    xmsPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "xmsPerBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
