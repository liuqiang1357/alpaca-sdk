/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MockPancakeswapV2CakeMaxiWorkerInterface
  extends ethers.utils.Interface {
  functions: {
    "baseToken()": FunctionFragment;
    "farmingToken()": FunctionFragment;
    "getPath()": FunctionFragment;
    "getReversedPath()": FunctionFragment;
    "getRewardPath()": FunctionFragment;
    "health(uint256)": FunctionFragment;
    "liquidate(uint256)": FunctionFragment;
    "lpToken()": FunctionFragment;
    "path(uint256)": FunctionFragment;
    "reinvest()": FunctionFragment;
    "rewardPath(uint256)": FunctionFragment;
    "setReinvestorOk(address[],bool)": FunctionFragment;
    "setStrategyOk(address[],bool)": FunctionFragment;
    "work(uint256,address,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "farmingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPath", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getReversedPath",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardPath",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "health",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "path", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "reinvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardPath",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReinvestorOk",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyOk",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "work",
    values: [BigNumberish, string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "farmingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPath", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReversedPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "health", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "path", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reinvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewardPath", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReinvestorOk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyOk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "work", data: BytesLike): Result;

  events: {};
}

export class MockPancakeswapV2CakeMaxiWorker extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MockPancakeswapV2CakeMaxiWorkerInterface;

  functions: {
    baseToken(overrides?: CallOverrides): Promise<[string]>;

    "baseToken()"(overrides?: CallOverrides): Promise<[string]>;

    farmingToken(overrides?: CallOverrides): Promise<[string]>;

    "farmingToken()"(overrides?: CallOverrides): Promise<[string]>;

    getPath(overrides?: CallOverrides): Promise<[string[]]>;

    "getPath()"(overrides?: CallOverrides): Promise<[string[]]>;

    getReversedPath(overrides?: CallOverrides): Promise<[string[]]>;

    "getReversedPath()"(overrides?: CallOverrides): Promise<[string[]]>;

    getRewardPath(overrides?: CallOverrides): Promise<[string[]]>;

    "getRewardPath()"(overrides?: CallOverrides): Promise<[string[]]>;

    health(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "health(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidate(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidate(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lpToken(overrides?: CallOverrides): Promise<[string]>;

    "lpToken()"(overrides?: CallOverrides): Promise<[string]>;

    path(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    reinvest(overrides?: Overrides): Promise<ContractTransaction>;

    "reinvest()"(overrides?: Overrides): Promise<ContractTransaction>;

    rewardPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "rewardPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setReinvestorOk(
      arg0: string[],
      arg1: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReinvestorOk(address[],bool)"(
      arg0: string[],
      arg1: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStrategyOk(
      arg0: string[],
      arg1: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStrategyOk(address[],bool)"(
      arg0: string[],
      arg1: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    work(
      arg0: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "work(uint256,address,uint256,bytes)"(
      arg0: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  baseToken(overrides?: CallOverrides): Promise<string>;

  "baseToken()"(overrides?: CallOverrides): Promise<string>;

  farmingToken(overrides?: CallOverrides): Promise<string>;

  "farmingToken()"(overrides?: CallOverrides): Promise<string>;

  getPath(overrides?: CallOverrides): Promise<string[]>;

  "getPath()"(overrides?: CallOverrides): Promise<string[]>;

  getReversedPath(overrides?: CallOverrides): Promise<string[]>;

  "getReversedPath()"(overrides?: CallOverrides): Promise<string[]>;

  getRewardPath(overrides?: CallOverrides): Promise<string[]>;

  "getRewardPath()"(overrides?: CallOverrides): Promise<string[]>;

  health(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "health(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidate(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidate(uint256)"(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lpToken(overrides?: CallOverrides): Promise<string>;

  "lpToken()"(overrides?: CallOverrides): Promise<string>;

  path(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "path(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  reinvest(overrides?: Overrides): Promise<ContractTransaction>;

  "reinvest()"(overrides?: Overrides): Promise<ContractTransaction>;

  rewardPath(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "rewardPath(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setReinvestorOk(
    arg0: string[],
    arg1: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReinvestorOk(address[],bool)"(
    arg0: string[],
    arg1: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStrategyOk(
    arg0: string[],
    arg1: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStrategyOk(address[],bool)"(
    arg0: string[],
    arg1: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  work(
    arg0: BigNumberish,
    user: string,
    debt: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "work(uint256,address,uint256,bytes)"(
    arg0: BigNumberish,
    user: string,
    debt: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    baseToken(overrides?: CallOverrides): Promise<string>;

    "baseToken()"(overrides?: CallOverrides): Promise<string>;

    farmingToken(overrides?: CallOverrides): Promise<string>;

    "farmingToken()"(overrides?: CallOverrides): Promise<string>;

    getPath(overrides?: CallOverrides): Promise<string[]>;

    "getPath()"(overrides?: CallOverrides): Promise<string[]>;

    getReversedPath(overrides?: CallOverrides): Promise<string[]>;

    "getReversedPath()"(overrides?: CallOverrides): Promise<string[]>;

    getRewardPath(overrides?: CallOverrides): Promise<string[]>;

    "getRewardPath()"(overrides?: CallOverrides): Promise<string[]>;

    health(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "health(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "liquidate(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lpToken(overrides?: CallOverrides): Promise<string>;

    "lpToken()"(overrides?: CallOverrides): Promise<string>;

    path(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    reinvest(overrides?: CallOverrides): Promise<void>;

    "reinvest()"(overrides?: CallOverrides): Promise<void>;

    rewardPath(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "rewardPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setReinvestorOk(
      arg0: string[],
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReinvestorOk(address[],bool)"(
      arg0: string[],
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategyOk(
      arg0: string[],
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStrategyOk(address[],bool)"(
      arg0: string[],
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    work(
      arg0: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "work(uint256,address,uint256,bytes)"(
      arg0: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    "baseToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    farmingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "farmingToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPath(overrides?: CallOverrides): Promise<BigNumber>;

    "getPath()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReversedPath(overrides?: CallOverrides): Promise<BigNumber>;

    "getReversedPath()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardPath(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardPath()"(overrides?: CallOverrides): Promise<BigNumber>;

    health(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "health(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(arg0: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "liquidate(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lpToken(overrides?: CallOverrides): Promise<BigNumber>;

    "lpToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    path(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reinvest(overrides?: Overrides): Promise<BigNumber>;

    "reinvest()"(overrides?: Overrides): Promise<BigNumber>;

    rewardPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setReinvestorOk(
      arg0: string[],
      arg1: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReinvestorOk(address[],bool)"(
      arg0: string[],
      arg1: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStrategyOk(
      arg0: string[],
      arg1: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setStrategyOk(address[],bool)"(
      arg0: string[],
      arg1: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    work(
      arg0: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "work(uint256,address,uint256,bytes)"(
      arg0: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    farmingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "farmingToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPath(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPath()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReversedPath(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReversedPath()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardPath(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRewardPath()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    health(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "health(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidate(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lpToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reinvest(overrides?: Overrides): Promise<PopulatedTransaction>;

    "reinvest()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewardPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setReinvestorOk(
      arg0: string[],
      arg1: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReinvestorOk(address[],bool)"(
      arg0: string[],
      arg1: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStrategyOk(
      arg0: string[],
      arg1: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStrategyOk(address[],bool)"(
      arg0: string[],
      arg1: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    work(
      arg0: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "work(uint256,address,uint256,bytes)"(
      arg0: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
