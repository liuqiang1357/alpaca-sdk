/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IWorkerConfigInterface extends ethers.utils.Interface {
  functions: {
    "acceptDebt(address)": FunctionFragment;
    "isReserveConsistent(address)": FunctionFragment;
    "isStable(address)": FunctionFragment;
    "killFactor(address,uint256)": FunctionFragment;
    "rawKillFactor(address,uint256)": FunctionFragment;
    "workFactor(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "acceptDebt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isReserveConsistent",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isStable", values: [string]): string;
  encodeFunctionData(
    functionFragment: "killFactor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rawKillFactor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "workFactor",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "acceptDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isReserveConsistent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isStable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "killFactor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawKillFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workFactor", data: BytesLike): Result;

  events: {};
}

export class IWorkerConfig extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IWorkerConfigInterface;

  functions: {
    acceptDebt(worker: string, overrides?: CallOverrides): Promise<[boolean]>;

    "acceptDebt(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isReserveConsistent(
      worker: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isReserveConsistent(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isStable(worker: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isStable(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    killFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "killFactor(address,uint256)"(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rawKillFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rawKillFactor(address,uint256)"(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    workFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "workFactor(address,uint256)"(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  acceptDebt(worker: string, overrides?: CallOverrides): Promise<boolean>;

  "acceptDebt(address)"(
    worker: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isReserveConsistent(
    worker: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isReserveConsistent(address)"(
    worker: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isStable(worker: string, overrides?: CallOverrides): Promise<boolean>;

  "isStable(address)"(
    worker: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  killFactor(
    worker: string,
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "killFactor(address,uint256)"(
    worker: string,
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rawKillFactor(
    worker: string,
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rawKillFactor(address,uint256)"(
    worker: string,
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  workFactor(
    worker: string,
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "workFactor(address,uint256)"(
    worker: string,
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    acceptDebt(worker: string, overrides?: CallOverrides): Promise<boolean>;

    "acceptDebt(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isReserveConsistent(
      worker: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isReserveConsistent(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isStable(worker: string, overrides?: CallOverrides): Promise<boolean>;

    "isStable(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    killFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "killFactor(address,uint256)"(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rawKillFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rawKillFactor(address,uint256)"(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "workFactor(address,uint256)"(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    acceptDebt(worker: string, overrides?: CallOverrides): Promise<BigNumber>;

    "acceptDebt(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReserveConsistent(
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isReserveConsistent(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isStable(worker: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isStable(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    killFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "killFactor(address,uint256)"(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rawKillFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rawKillFactor(address,uint256)"(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "workFactor(address,uint256)"(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptDebt(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "acceptDebt(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReserveConsistent(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isReserveConsistent(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStable(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isStable(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    killFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "killFactor(address,uint256)"(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawKillFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rawKillFactor(address,uint256)"(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "workFactor(address,uint256)"(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
