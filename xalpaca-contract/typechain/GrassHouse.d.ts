/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GrassHouseInterface extends ethers.utils.Interface {
  functions: {
    "TOKEN_CHECKPOINT_DEADLINE()": FunctionFragment;
    "WEEK()": FunctionFragment;
    "balanceOfAt(address,uint256)": FunctionFragment;
    "canCheckpointToken()": FunctionFragment;
    "checkpointToken()": FunctionFragment;
    "checkpointTotalSupply()": FunctionFragment;
    "claim(address)": FunctionFragment;
    "claimMany(address[])": FunctionFragment;
    "emergencyReturn()": FunctionFragment;
    "feed(uint256)": FunctionFragment;
    "initialize(address,uint256,address,address)": FunctionFragment;
    "isKilled()": FunctionFragment;
    "kill()": FunctionFragment;
    "lastTokenBalance()": FunctionFragment;
    "lastTokenTimestamp()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "setCanCheckpointToken(bool)": FunctionFragment;
    "startWeekCursor()": FunctionFragment;
    "tokensPerWeek(uint256)": FunctionFragment;
    "totalSupplyAt(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userEpochOf(address)": FunctionFragment;
    "weekCursor()": FunctionFragment;
    "weekCursorOf(address)": FunctionFragment;
    "xALPACA()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "TOKEN_CHECKPOINT_DEADLINE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WEEK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canCheckpointToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkpointToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkpointTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [string]): string;
  encodeFunctionData(functionFragment: "claimMany", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "emergencyReturn",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feed", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "isKilled", values?: undefined): string;
  encodeFunctionData(functionFragment: "kill", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTokenTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCanCheckpointToken",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "startWeekCursor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensPerWeek",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "userEpochOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "weekCursor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weekCursorOf",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "xALPACA", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "TOKEN_CHECKPOINT_DEADLINE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WEEK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canCheckpointToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpointToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpointTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimMany", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isKilled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTokenTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCanCheckpointToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startWeekCursor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensPerWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userEpochOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weekCursor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "weekCursorOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xALPACA", data: BytesLike): Result;

  events: {
    "LogCheckpointToken(uint256,uint256)": EventFragment;
    "LogClaimed(address,uint256,uint256,uint256)": EventFragment;
    "LogFeed(uint256)": EventFragment;
    "LogKilled()": EventFragment;
    "LogSetCanCheckpointToken(bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogCheckpointToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogFeed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogKilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetCanCheckpointToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class GrassHouse extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GrassHouseInterface;

  functions: {
    TOKEN_CHECKPOINT_DEADLINE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "TOKEN_CHECKPOINT_DEADLINE()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    WEEK(overrides?: CallOverrides): Promise<[BigNumber]>;

    "WEEK()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfAt(
      _user: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOfAt(address,uint256)"(
      _user: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canCheckpointToken(overrides?: CallOverrides): Promise<[boolean]>;

    "canCheckpointToken()"(overrides?: CallOverrides): Promise<[boolean]>;

    checkpointToken(overrides?: Overrides): Promise<ContractTransaction>;

    "checkpointToken()"(overrides?: Overrides): Promise<ContractTransaction>;

    checkpointTotalSupply(overrides?: Overrides): Promise<ContractTransaction>;

    "checkpointTotalSupply()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claim(_user: string, overrides?: Overrides): Promise<ContractTransaction>;

    "claim(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimMany(
      _users: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimMany(address[])"(
      _users: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emergencyReturn(overrides?: CallOverrides): Promise<[string]>;

    "emergencyReturn()"(overrides?: CallOverrides): Promise<[string]>;

    feed(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "feed(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _xALPACA: string,
      _startTime: BigNumberish,
      _rewardToken: string,
      _emergencyReturn: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,uint256,address,address)"(
      _xALPACA: string,
      _startTime: BigNumberish,
      _rewardToken: string,
      _emergencyReturn: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isKilled(overrides?: CallOverrides): Promise<[boolean]>;

    "isKilled()"(overrides?: CallOverrides): Promise<[boolean]>;

    kill(overrides?: Overrides): Promise<ContractTransaction>;

    "kill()"(overrides?: Overrides): Promise<ContractTransaction>;

    lastTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastTokenBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastTokenTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastTokenTimestamp()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    "rewardToken()"(overrides?: CallOverrides): Promise<[string]>;

    setCanCheckpointToken(
      _newCanCheckpointToken: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCanCheckpointToken(bool)"(
      _newCanCheckpointToken: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startWeekCursor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startWeekCursor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensPerWeek(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokensPerWeek(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupplyAt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalSupplyAt(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userEpochOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "userEpochOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    weekCursor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "weekCursor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    weekCursorOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "weekCursorOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    xALPACA(overrides?: CallOverrides): Promise<[string]>;

    "xALPACA()"(overrides?: CallOverrides): Promise<[string]>;
  };

  TOKEN_CHECKPOINT_DEADLINE(overrides?: CallOverrides): Promise<BigNumber>;

  "TOKEN_CHECKPOINT_DEADLINE()"(overrides?: CallOverrides): Promise<BigNumber>;

  WEEK(overrides?: CallOverrides): Promise<BigNumber>;

  "WEEK()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfAt(
    _user: string,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfAt(address,uint256)"(
    _user: string,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canCheckpointToken(overrides?: CallOverrides): Promise<boolean>;

  "canCheckpointToken()"(overrides?: CallOverrides): Promise<boolean>;

  checkpointToken(overrides?: Overrides): Promise<ContractTransaction>;

  "checkpointToken()"(overrides?: Overrides): Promise<ContractTransaction>;

  checkpointTotalSupply(overrides?: Overrides): Promise<ContractTransaction>;

  "checkpointTotalSupply()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claim(_user: string, overrides?: Overrides): Promise<ContractTransaction>;

  "claim(address)"(
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimMany(
    _users: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimMany(address[])"(
    _users: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emergencyReturn(overrides?: CallOverrides): Promise<string>;

  "emergencyReturn()"(overrides?: CallOverrides): Promise<string>;

  feed(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "feed(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _xALPACA: string,
    _startTime: BigNumberish,
    _rewardToken: string,
    _emergencyReturn: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,uint256,address,address)"(
    _xALPACA: string,
    _startTime: BigNumberish,
    _rewardToken: string,
    _emergencyReturn: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isKilled(overrides?: CallOverrides): Promise<boolean>;

  "isKilled()"(overrides?: CallOverrides): Promise<boolean>;

  kill(overrides?: Overrides): Promise<ContractTransaction>;

  "kill()"(overrides?: Overrides): Promise<ContractTransaction>;

  lastTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "lastTokenBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastTokenTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "lastTokenTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  "rewardToken()"(overrides?: CallOverrides): Promise<string>;

  setCanCheckpointToken(
    _newCanCheckpointToken: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCanCheckpointToken(bool)"(
    _newCanCheckpointToken: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startWeekCursor(overrides?: CallOverrides): Promise<BigNumber>;

  "startWeekCursor()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokensPerWeek(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokensPerWeek(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupplyAt(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalSupplyAt(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userEpochOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "userEpochOf(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  weekCursor(overrides?: CallOverrides): Promise<BigNumber>;

  "weekCursor()"(overrides?: CallOverrides): Promise<BigNumber>;

  weekCursorOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "weekCursorOf(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  xALPACA(overrides?: CallOverrides): Promise<string>;

  "xALPACA()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    TOKEN_CHECKPOINT_DEADLINE(overrides?: CallOverrides): Promise<BigNumber>;

    "TOKEN_CHECKPOINT_DEADLINE()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    "WEEK()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAt(
      _user: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(address,uint256)"(
      _user: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canCheckpointToken(overrides?: CallOverrides): Promise<boolean>;

    "canCheckpointToken()"(overrides?: CallOverrides): Promise<boolean>;

    checkpointToken(overrides?: CallOverrides): Promise<void>;

    "checkpointToken()"(overrides?: CallOverrides): Promise<void>;

    checkpointTotalSupply(overrides?: CallOverrides): Promise<void>;

    "checkpointTotalSupply()"(overrides?: CallOverrides): Promise<void>;

    claim(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "claim(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimMany(_users: string[], overrides?: CallOverrides): Promise<boolean>;

    "claimMany(address[])"(
      _users: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    emergencyReturn(overrides?: CallOverrides): Promise<string>;

    "emergencyReturn()"(overrides?: CallOverrides): Promise<string>;

    feed(_amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "feed(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _xALPACA: string,
      _startTime: BigNumberish,
      _rewardToken: string,
      _emergencyReturn: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,uint256,address,address)"(
      _xALPACA: string,
      _startTime: BigNumberish,
      _rewardToken: string,
      _emergencyReturn: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isKilled(overrides?: CallOverrides): Promise<boolean>;

    "isKilled()"(overrides?: CallOverrides): Promise<boolean>;

    kill(overrides?: CallOverrides): Promise<void>;

    "kill()"(overrides?: CallOverrides): Promise<void>;

    lastTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "lastTokenBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastTokenTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "lastTokenTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    "rewardToken()"(overrides?: CallOverrides): Promise<string>;

    setCanCheckpointToken(
      _newCanCheckpointToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCanCheckpointToken(bool)"(
      _newCanCheckpointToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    startWeekCursor(overrides?: CallOverrides): Promise<BigNumber>;

    "startWeekCursor()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokensPerWeek(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokensPerWeek(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyAt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userEpochOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userEpochOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weekCursor(overrides?: CallOverrides): Promise<BigNumber>;

    "weekCursor()"(overrides?: CallOverrides): Promise<BigNumber>;

    weekCursorOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "weekCursorOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xALPACA(overrides?: CallOverrides): Promise<string>;

    "xALPACA()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    LogCheckpointToken(_timestamp: null, _tokens: null): EventFilter;

    LogClaimed(
      _recipient: string | null,
      _amount: null,
      _claimEpoch: null,
      _maxEpoch: null
    ): EventFilter;

    LogFeed(_amount: null): EventFilter;

    LogKilled(): EventFilter;

    LogSetCanCheckpointToken(_toggleFlag: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    TOKEN_CHECKPOINT_DEADLINE(overrides?: CallOverrides): Promise<BigNumber>;

    "TOKEN_CHECKPOINT_DEADLINE()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    "WEEK()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAt(
      _user: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(address,uint256)"(
      _user: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canCheckpointToken(overrides?: CallOverrides): Promise<BigNumber>;

    "canCheckpointToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    checkpointToken(overrides?: Overrides): Promise<BigNumber>;

    "checkpointToken()"(overrides?: Overrides): Promise<BigNumber>;

    checkpointTotalSupply(overrides?: Overrides): Promise<BigNumber>;

    "checkpointTotalSupply()"(overrides?: Overrides): Promise<BigNumber>;

    claim(_user: string, overrides?: Overrides): Promise<BigNumber>;

    "claim(address)"(_user: string, overrides?: Overrides): Promise<BigNumber>;

    claimMany(_users: string[], overrides?: Overrides): Promise<BigNumber>;

    "claimMany(address[])"(
      _users: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    emergencyReturn(overrides?: CallOverrides): Promise<BigNumber>;

    "emergencyReturn()"(overrides?: CallOverrides): Promise<BigNumber>;

    feed(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "feed(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _xALPACA: string,
      _startTime: BigNumberish,
      _rewardToken: string,
      _emergencyReturn: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,uint256,address,address)"(
      _xALPACA: string,
      _startTime: BigNumberish,
      _rewardToken: string,
      _emergencyReturn: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isKilled(overrides?: CallOverrides): Promise<BigNumber>;

    "isKilled()"(overrides?: CallOverrides): Promise<BigNumber>;

    kill(overrides?: Overrides): Promise<BigNumber>;

    "kill()"(overrides?: Overrides): Promise<BigNumber>;

    lastTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "lastTokenBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastTokenTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "lastTokenTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCanCheckpointToken(
      _newCanCheckpointToken: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCanCheckpointToken(bool)"(
      _newCanCheckpointToken: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startWeekCursor(overrides?: CallOverrides): Promise<BigNumber>;

    "startWeekCursor()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokensPerWeek(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokensPerWeek(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyAt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userEpochOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userEpochOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weekCursor(overrides?: CallOverrides): Promise<BigNumber>;

    "weekCursor()"(overrides?: CallOverrides): Promise<BigNumber>;

    weekCursorOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "weekCursorOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xALPACA(overrides?: CallOverrides): Promise<BigNumber>;

    "xALPACA()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    TOKEN_CHECKPOINT_DEADLINE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TOKEN_CHECKPOINT_DEADLINE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WEEK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WEEK()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfAt(
      _user: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfAt(address,uint256)"(
      _user: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canCheckpointToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canCheckpointToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkpointToken(overrides?: Overrides): Promise<PopulatedTransaction>;

    "checkpointToken()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    checkpointTotalSupply(overrides?: Overrides): Promise<PopulatedTransaction>;

    "checkpointTotalSupply()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claim(_user: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "claim(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimMany(
      _users: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimMany(address[])"(
      _users: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emergencyReturn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "emergencyReturn()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feed(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "feed(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _xALPACA: string,
      _startTime: BigNumberish,
      _rewardToken: string,
      _emergencyReturn: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,uint256,address,address)"(
      _xALPACA: string,
      _startTime: BigNumberish,
      _rewardToken: string,
      _emergencyReturn: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isKilled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isKilled()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kill(overrides?: Overrides): Promise<PopulatedTransaction>;

    "kill()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    lastTokenBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastTokenBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTokenTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastTokenTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCanCheckpointToken(
      _newCanCheckpointToken: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCanCheckpointToken(bool)"(
      _newCanCheckpointToken: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startWeekCursor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startWeekCursor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensPerWeek(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokensPerWeek(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupplyAt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupplyAt(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userEpochOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userEpochOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weekCursor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weekCursor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weekCursorOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "weekCursorOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xALPACA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "xALPACA()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
