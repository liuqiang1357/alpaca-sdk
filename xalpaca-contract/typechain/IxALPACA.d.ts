/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IxALPACAInterface extends ethers.utils.Interface {
  functions: {
    "checkpoint()": FunctionFragment;
    "epoch()": FunctionFragment;
    "pointHistory(uint256)": FunctionFragment;
    "userPointEpoch(address)": FunctionFragment;
    "userPointHistory(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkpoint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pointHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPointEpoch",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userPointHistory",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "checkpoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pointHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPointEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPointHistory",
    data: BytesLike
  ): Result;

  events: {};
}

export class IxALPACA extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IxALPACAInterface;

  functions: {
    checkpoint(overrides?: Overrides): Promise<ContractTransaction>;

    "checkpoint()"(overrides?: Overrides): Promise<ContractTransaction>;

    epoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "epoch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pointHistory(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bias: BigNumber;
          slope: BigNumber;
          timestamp: BigNumber;
          blockNumber: BigNumber;
        }
      ]
    >;

    "pointHistory(uint256)"(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bias: BigNumber;
          slope: BigNumber;
          timestamp: BigNumber;
          blockNumber: BigNumber;
        }
      ]
    >;

    userPointEpoch(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userPointEpoch(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userPointHistory(
      _user: string,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bias: BigNumber;
          slope: BigNumber;
          timestamp: BigNumber;
          blockNumber: BigNumber;
        }
      ]
    >;

    "userPointHistory(address,uint256)"(
      _user: string,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bias: BigNumber;
          slope: BigNumber;
          timestamp: BigNumber;
          blockNumber: BigNumber;
        }
      ]
    >;
  };

  checkpoint(overrides?: Overrides): Promise<ContractTransaction>;

  "checkpoint()"(overrides?: Overrides): Promise<ContractTransaction>;

  epoch(overrides?: CallOverrides): Promise<BigNumber>;

  "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  pointHistory(
    _epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      timestamp: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  "pointHistory(uint256)"(
    _epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      timestamp: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  userPointEpoch(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "userPointEpoch(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userPointHistory(
    _user: string,
    _epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      timestamp: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  "userPointHistory(address,uint256)"(
    _user: string,
    _epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      timestamp: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  callStatic: {
    checkpoint(overrides?: CallOverrides): Promise<void>;

    "checkpoint()"(overrides?: CallOverrides): Promise<void>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    pointHistory(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    "pointHistory(uint256)"(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    userPointEpoch(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userPointEpoch(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userPointHistory(
      _user: string,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    "userPointHistory(address,uint256)"(
      _user: string,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    checkpoint(overrides?: Overrides): Promise<BigNumber>;

    "checkpoint()"(overrides?: Overrides): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    pointHistory(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pointHistory(uint256)"(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userPointEpoch(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userPointEpoch(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userPointHistory(
      _user: string,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userPointHistory(address,uint256)"(
      _user: string,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkpoint(overrides?: Overrides): Promise<PopulatedTransaction>;

    "checkpoint()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epoch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pointHistory(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pointHistory(uint256)"(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userPointEpoch(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userPointEpoch(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userPointHistory(
      _user: string,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userPointHistory(address,uint256)"(
      _user: string,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
