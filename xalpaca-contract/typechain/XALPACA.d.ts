/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface XALPACAInterface extends ethers.utils.Interface {
  functions: {
    "ACTION_CREATE_LOCK()": FunctionFragment;
    "ACTION_DEPOSIT_FOR()": FunctionFragment;
    "ACTION_INCREASE_LOCK_AMOUNT()": FunctionFragment;
    "ACTION_INCREASE_UNLOCK_TIME()": FunctionFragment;
    "MAX_LOCK()": FunctionFragment;
    "MULTIPLIER()": FunctionFragment;
    "WEEK()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfAt(address,uint256)": FunctionFragment;
    "breaker()": FunctionFragment;
    "checkpoint()": FunctionFragment;
    "createLock(uint256,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "depositFor(address,uint256)": FunctionFragment;
    "epoch()": FunctionFragment;
    "increaseLockAmount(uint256)": FunctionFragment;
    "increaseUnlockTime(uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "locks(address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "pointHistory(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBreaker(uint256)": FunctionFragment;
    "slopeChanges(uint256)": FunctionFragment;
    "supply()": FunctionFragment;
    "symbol()": FunctionFragment;
    "token()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyAt(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userPointEpoch(address)": FunctionFragment;
    "userPointHistory(address,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ACTION_CREATE_LOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ACTION_DEPOSIT_FOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ACTION_INCREASE_LOCK_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ACTION_INCREASE_UNLOCK_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_LOCK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WEEK", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "breaker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createLock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseLockAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseUnlockTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "locks", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pointHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBreaker",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slopeChanges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "supply", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userPointEpoch",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userPointHistory",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ACTION_CREATE_LOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACTION_DEPOSIT_FOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACTION_INCREASE_LOCK_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACTION_INCREASE_UNLOCK_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_LOCK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MULTIPLIER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WEEK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "breaker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkpoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createLock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseLockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pointHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBreaker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "slopeChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPointEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPointHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "LogDeposit(address,uint256,uint256,uint256,uint256)": EventFragment;
    "LogSetBreaker(uint256,uint256)": EventFragment;
    "LogSupply(uint256,uint256)": EventFragment;
    "LogWithdraw(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetBreaker"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSupply"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class XALPACA extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: XALPACAInterface;

  functions: {
    ACTION_CREATE_LOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ACTION_CREATE_LOCK()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ACTION_DEPOSIT_FOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ACTION_DEPOSIT_FOR()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ACTION_INCREASE_LOCK_AMOUNT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "ACTION_INCREASE_LOCK_AMOUNT()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ACTION_INCREASE_UNLOCK_TIME(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "ACTION_INCREASE_UNLOCK_TIME()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_LOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_LOCK()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MULTIPLIER()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    WEEK(overrides?: CallOverrides): Promise<[BigNumber]>;

    "WEEK()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfAt(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOfAt(address,uint256)"(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    breaker(overrides?: CallOverrides): Promise<[BigNumber]>;

    "breaker()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkpoint(overrides?: Overrides): Promise<ContractTransaction>;

    "checkpoint()"(overrides?: Overrides): Promise<ContractTransaction>;

    createLock(
      _amount: BigNumberish,
      _unlockTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createLock(uint256,uint256)"(
      _amount: BigNumberish,
      _unlockTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    depositFor(
      _for: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositFor(address,uint256)"(
      _for: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    epoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "epoch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseLockAmount(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseLockAmount(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    increaseUnlockTime(
      _newUnlockTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseUnlockTime(uint256)"(
      _newUnlockTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    locks(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

    "locks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pointHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    "pointHistory(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setBreaker(
      _breaker: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBreaker(uint256)"(
      _breaker: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    slopeChanges(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "slopeChanges(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "supply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyAt(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalSupplyAt(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userPointEpoch(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userPointEpoch(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userPointHistory(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    "userPointHistory(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    withdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  ACTION_CREATE_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

  "ACTION_CREATE_LOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

  ACTION_DEPOSIT_FOR(overrides?: CallOverrides): Promise<BigNumber>;

  "ACTION_DEPOSIT_FOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  ACTION_INCREASE_LOCK_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  "ACTION_INCREASE_LOCK_AMOUNT()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ACTION_INCREASE_UNLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  "ACTION_INCREASE_UNLOCK_TIME()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MAX_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_LOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

  MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  "MULTIPLIER()"(overrides?: CallOverrides): Promise<BigNumber>;

  WEEK(overrides?: CallOverrides): Promise<BigNumber>;

  "WEEK()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfAt(
    _user: string,
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfAt(address,uint256)"(
    _user: string,
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  breaker(overrides?: CallOverrides): Promise<BigNumber>;

  "breaker()"(overrides?: CallOverrides): Promise<BigNumber>;

  checkpoint(overrides?: Overrides): Promise<ContractTransaction>;

  "checkpoint()"(overrides?: Overrides): Promise<ContractTransaction>;

  createLock(
    _amount: BigNumberish,
    _unlockTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createLock(uint256,uint256)"(
    _amount: BigNumberish,
    _unlockTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  depositFor(
    _for: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositFor(address,uint256)"(
    _for: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  epoch(overrides?: CallOverrides): Promise<BigNumber>;

  "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  increaseLockAmount(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseLockAmount(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  increaseUnlockTime(
    _newUnlockTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseUnlockTime(uint256)"(
    _newUnlockTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  locks(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

  "locks(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pointHistory(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      timestamp: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  "pointHistory(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      timestamp: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setBreaker(
    _breaker: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBreaker(uint256)"(
    _breaker: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  slopeChanges(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "slopeChanges(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supply(overrides?: CallOverrides): Promise<BigNumber>;

  "supply()"(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAt(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalSupplyAt(uint256)"(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userPointEpoch(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "userPointEpoch(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userPointHistory(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      timestamp: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  "userPointHistory(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      timestamp: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  withdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    ACTION_CREATE_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    "ACTION_CREATE_LOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

    ACTION_DEPOSIT_FOR(overrides?: CallOverrides): Promise<BigNumber>;

    "ACTION_DEPOSIT_FOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    ACTION_INCREASE_LOCK_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "ACTION_INCREASE_LOCK_AMOUNT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ACTION_INCREASE_UNLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "ACTION_INCREASE_UNLOCK_TIME()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_LOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

    MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    "MULTIPLIER()"(overrides?: CallOverrides): Promise<BigNumber>;

    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    "WEEK()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(address,uint256)"(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    breaker(overrides?: CallOverrides): Promise<BigNumber>;

    "breaker()"(overrides?: CallOverrides): Promise<BigNumber>;

    checkpoint(overrides?: CallOverrides): Promise<void>;

    "checkpoint()"(overrides?: CallOverrides): Promise<void>;

    createLock(
      _amount: BigNumberish,
      _unlockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createLock(uint256,uint256)"(
      _amount: BigNumberish,
      _unlockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    depositFor(
      _for: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositFor(address,uint256)"(
      _for: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseLockAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "increaseLockAmount(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseUnlockTime(
      _newUnlockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "increaseUnlockTime(uint256)"(
      _newUnlockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(_token: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    locks(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

    "locks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pointHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    "pointHistory(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setBreaker(
      _breaker: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBreaker(uint256)"(
      _breaker: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slopeChanges(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "slopeChanges(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supply(overrides?: CallOverrides): Promise<BigNumber>;

    "supply()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userPointEpoch(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userPointEpoch(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userPointHistory(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    "userPointHistory(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    LogDeposit(
      locker: string | null,
      value: null,
      lockTime: BigNumberish | null,
      lockType: null,
      timestamp: null
    ): EventFilter;

    LogSetBreaker(previousBreaker: null, breaker: null): EventFilter;

    LogSupply(previousSupply: null, supply: null): EventFilter;

    LogWithdraw(
      locker: string | null,
      value: null,
      timestamp: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    ACTION_CREATE_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    "ACTION_CREATE_LOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

    ACTION_DEPOSIT_FOR(overrides?: CallOverrides): Promise<BigNumber>;

    "ACTION_DEPOSIT_FOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    ACTION_INCREASE_LOCK_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "ACTION_INCREASE_LOCK_AMOUNT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ACTION_INCREASE_UNLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "ACTION_INCREASE_UNLOCK_TIME()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_LOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

    MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    "MULTIPLIER()"(overrides?: CallOverrides): Promise<BigNumber>;

    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    "WEEK()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(address,uint256)"(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    breaker(overrides?: CallOverrides): Promise<BigNumber>;

    "breaker()"(overrides?: CallOverrides): Promise<BigNumber>;

    checkpoint(overrides?: Overrides): Promise<BigNumber>;

    "checkpoint()"(overrides?: Overrides): Promise<BigNumber>;

    createLock(
      _amount: BigNumberish,
      _unlockTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createLock(uint256,uint256)"(
      _amount: BigNumberish,
      _unlockTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositFor(
      _for: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositFor(address,uint256)"(
      _for: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseLockAmount(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseLockAmount(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    increaseUnlockTime(
      _newUnlockTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseUnlockTime(uint256)"(
      _newUnlockTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "initialize(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    locks(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "locks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pointHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pointHistory(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setBreaker(
      _breaker: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBreaker(uint256)"(
      _breaker: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    slopeChanges(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "slopeChanges(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supply(overrides?: CallOverrides): Promise<BigNumber>;

    "supply()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userPointEpoch(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userPointEpoch(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userPointHistory(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userPointHistory(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides): Promise<BigNumber>;

    "withdraw()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ACTION_CREATE_LOCK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ACTION_CREATE_LOCK()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ACTION_DEPOSIT_FOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ACTION_DEPOSIT_FOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ACTION_INCREASE_LOCK_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ACTION_INCREASE_LOCK_AMOUNT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ACTION_INCREASE_UNLOCK_TIME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ACTION_INCREASE_UNLOCK_TIME()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_LOCK()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MULTIPLIER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WEEK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WEEK()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAt(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfAt(address,uint256)"(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    breaker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "breaker()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkpoint(overrides?: Overrides): Promise<PopulatedTransaction>;

    "checkpoint()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    createLock(
      _amount: BigNumberish,
      _unlockTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createLock(uint256,uint256)"(
      _amount: BigNumberish,
      _unlockTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositFor(
      _for: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositFor(address,uint256)"(
      _for: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epoch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseLockAmount(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseLockAmount(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    increaseUnlockTime(
      _newUnlockTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseUnlockTime(uint256)"(
      _newUnlockTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    locks(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "locks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pointHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pointHistory(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setBreaker(
      _breaker: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBreaker(uint256)"(
      _breaker: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    slopeChanges(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "slopeChanges(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "supply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAt(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupplyAt(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userPointEpoch(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userPointEpoch(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userPointHistory(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userPointHistory(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
