import { FarmingPoolConfig, IFarmingConfig } from '../../entity';
import { BigNumber } from 'ethers';
import { Provider } from '@ethersproject/providers';
import { WorkerCalculator } from './WorkerCalculator';
import { LendingPoolCalculator } from './LendingPoolCalculator';
import { StakingPoolCalculator } from './StakingPoolCalculator';
export declare class FarmingPoolCalculatorFactory {
    private provider;
    private batchSize;
    private lendingPoolCalculators?;
    private debtStakingPoolCalculators?;
    constructor(_provider: Provider);
    setLendingPoolCalculators(_lendingPoolCalculators: LendingPoolCalculator[]): FarmingPoolCalculatorFactory;
    setDebtStakingPoolCalculators(_debtStakingPoolCalculators: StakingPoolCalculator[]): FarmingPoolCalculatorFactory;
    create(..._farmingPools: FarmingPoolConfig[]): Promise<FarmingPoolCalculator[]>;
    createWithInjectedCalculators(_farmingPools: FarmingPoolConfig[], _lendingPoolCalculators: LendingPoolCalculator[], _debtStakingPoolCalculators: StakingPoolCalculator[]): Promise<FarmingPoolCalculator[]>;
    createOne(_farmingPool: FarmingPoolConfig, _lendingPoolCalculators: LendingPoolCalculator[], _debtStakingPoolCalculators: StakingPoolCalculator[]): Promise<FarmingPoolCalculator>;
    private getData;
}
export declare class FarmingWorkerCalculator {
    private farmingPoolCalculationData;
    private lendingPoolCalculator;
    private debtStakingPoolCalculator;
    private workerCalculator;
    constructor(_farmingPoolCalculationData: IData, _lendingPoolCalculator: LendingPoolCalculator, _debtStakingPoolCalculator: StakingPoolCalculator, _workerCalculator: WorkerCalculator);
    get farmingConfig(): IFarmingConfig;
    get allocPoint(): BigNumber;
    get totalAllocPoint(): BigNumber;
    get maxLeverage(): BigNumber;
    get tvl(): BigNumber;
    get tvlInMasterChef(): BigNumber;
    dailyBorrowingInterestRate(levergage: BigNumber): BigNumber;
    yearlyBorrowingInterestRate(levergage: BigNumber): BigNumber;
    get maxDailyBorrowingInterestRate(): BigNumber;
    get maxYearlyBorrowingInterestRate(): BigNumber;
    dailyBorrowingInterestPercent(leverage: BigNumber): BigNumber;
    yearlyBorrowingInterestPercent(leverage: BigNumber): BigNumber;
    get maxDailyBorrowingInterestPercent(): BigNumber;
    get maxYearlyBorrowingInterestPercent(): BigNumber;
    dailyDebtRewardRate(levergage: BigNumber): BigNumber;
    yearlyDebtRewardRate(levergage: BigNumber): BigNumber;
    get maxDailyDebtRewardRate(): BigNumber;
    get maxYearlyDebtRewardRate(): BigNumber;
    dailyDebtRewardApr(levergage: BigNumber): BigNumber;
    yearlyDebtRewardApr(levergage: BigNumber): BigNumber;
    get maxDailyDebtRewardApr(): BigNumber;
    get maxYearlyDebtRewardApr(): BigNumber;
    get farmRewardPerBlock(): BigNumber;
    get farmRewardTokenPrice(): BigNumber;
    get farmRewardValuePerBlock(): BigNumber;
    get farmRewardValuePerYear(): BigNumber;
    get yearlyFarmRewardRateWithoutFee(): BigNumber;
    yearlyFarmRewardRate(leverage: BigNumber): BigNumber;
    dailyFarmRewardRate(leverage: BigNumber): BigNumber;
    get maxYearlyFarmRewardRate(): BigNumber;
    get maxDailyFarmRewardRate(): BigNumber;
    yearlyFarmRewardApr(leverage: BigNumber): BigNumber;
    dailyFarmRewardApr(leverage: BigNumber): BigNumber;
    get maxYearlyFarmRewardApr(): BigNumber;
    get maxDailyFarmRewardApr(): BigNumber;
    totalApr(_yearlyTradingFeeApr: BigNumber, leverage: BigNumber): BigNumber;
    dailyTotalApr(yearlyTradingFeeApr: BigNumber, leverage: BigNumber): BigNumber;
    totalRate(yearlyTradingFeeApr: BigNumber, leverage: BigNumber): BigNumber;
    dailyTotalRate(yearlyTradingFeeApr: BigNumber, leverage: BigNumber): BigNumber;
    totalApy(yearlyTradingFeeApr: BigNumber, leverage: BigNumber): BigNumber;
    maxTotalApr(yearlyTradingFeeApr: BigNumber): BigNumber;
    maxDailyTotalApr(yearlyTradingFeeApr: BigNumber): BigNumber;
    maxTotalApy(yearlyTradingFeeApr: BigNumber): BigNumber;
    get inverseOfPerformanceFee(): BigNumber;
    private mulWithLeverageDebt;
    private mulWithMaxLeverageDebt;
    private rateToPercent;
}
interface IData {
    farmingPoolConfig: FarmingPoolConfig;
    rewardPerBlock: BigNumber;
    rewardTokenPrice: BigNumber;
    allocPoint: BigNumber;
    totalAllocPoint: BigNumber;
}
export declare class FarmingPoolCalculator {
    private data;
    private lendingPoolCalculators;
    private debtStakingPoolCalculators;
    private workerCalculators;
    farmingWorkerCalculators: FarmingWorkerCalculator[];
    constructor(_data: IData, _lendingPoolCalculators: LendingPoolCalculator[], _debtStakingPoolCalculators: StakingPoolCalculator[], _workerCalculators: WorkerCalculator[]);
    get farmingPool(): FarmingPoolConfig;
    get rewardPerBlock(): BigNumber;
    get rewardTokenPrice(): BigNumber;
    get allocPoint(): BigNumber;
    get totalAllocPoint(): BigNumber;
    get buyBackBps(): BigNumber;
    get tvlInMasterChef(): BigNumber;
    get tvl(): BigNumber;
    get workerCalculatorWithHighestAprAtMaxLeverage(): FarmingWorkerCalculator;
    get maxLeverage(): BigNumber;
    get maxFarmRewardApr(): BigNumber;
    get maxDebtRewardApr(): BigNumber;
    maxTotalApr(yearlyTradingFeeApr: BigNumber): BigNumber;
    maxTotalAprAt1xLeverage(yearlyTradingFeeApr: BigNumber): BigNumber;
    maxTotalAprAtMaxLeverage(yearlyTradingFeeApr: BigNumber): BigNumber;
    maxTotalApy(yearlyTradingFeeApr: BigNumber): BigNumber;
    maxTotalApyAt1xLeverage(yearlyTradingFeeApr: BigNumber): BigNumber;
    maxTotalApyAtMaxLeverage(yearlyTradingFeeApr: BigNumber): BigNumber;
}
export {};
