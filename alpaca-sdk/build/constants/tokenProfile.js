import { BNBVaultAddress, BUSDVaultAddress, AlpacaTokenAddress, ETHVaultAddress, ALPACAVaultAddress, USDTVaultAddress, StronkAlpacaAddress, DebtTokenALPACAAddress, DebtTokenBNBAddress, DebtTokenBUSDAddress, DebtTokenETHAddress, DebtTokenUSDTAddress, WBNBAddress, BUSDAddress, ETHAddress, BTCBAddress, CAKEAddress, USDTAddress, DOTAddress, UNIAddress, LINKAddress, XVSAddress, YFIAddress, VAIAddress, USDCAddress, DAIAddress, USTAddress, BETHAddress, COMPAddress, SUSHIAddress, ITAMAddress, BMXXAddress, BELTAddress, BORAddress, BRYAddress, PCWSAddress, SWINGBYAddress, DODOAddress, DebtTokenBTCBAddress, BTCBVaultAddress, WEXAddress, WAULTXAddress, ODDZAddress, ADAAddress, FORMAddress, MATICAddress, TUSDAddress, TRXAddress, BTTAddress, ORBSAddress, TUSDVaultAddress, DebtTokenTUSDAddress, AXSAddress, PMONAddress, SCIXAddress, WUSDAddress, PHAAddress, ALMAddress, KALAAddress, MBOXAddress, NAOSAddress, MDEXAddress, DVIAddress, LATTEAddress, QBTAddress, PEARAddress, POTSAddress, LUCKYAddress, POLARAddress, MONIAddress, BMONAddress, NFTYAddress, SHEESHAAddress, SKILLAddress, XMSAddress, ARVAddress, XWINAddress, LEONAddress, WNOWAddress, TENFIAddress, DEPAddress, CAPSAddress, SPSAddress, PLUTAddress, ETERNALAddress, THGAddress, PAYBSWAPAddress, LANDAddress, USDCVaultAddress, DebtTokenUSDCAddress, HIGHAddress, DLTAAddress, } from './contracts';
import { PancakeSwapDex, PancakeSwapDexV1, DexKey, LPRouteV2, } from '../entity';
import { getTokenPrice, getZero } from '../utils/fiatPrice';
import { TokenSymbol, TokenType, ILPRouteV2Factory, } from '../entity';
import { AUSDAddress } from './ausdContracts';
const busdToken = {
    name: 'Binance USD',
    type: TokenType.Common,
    symbol: TokenSymbol.BUSD,
    displaySymbol: 'BUSD',
    slug: 'binance-usd',
    address: BUSDAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/busd.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0xe9e7cea3dedca5984780bafc599bd69add087d56',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('binance-usd'),
    priceSourceIds: {
        coinMarketCap: 4687,
        coinGecko: 'binance-usd',
        cryptoCompare: TokenSymbol.BUSD,
    },
};
const bnbToken = {
    name: 'Wrapped BNB',
    type: TokenType.Common,
    symbol: TokenSymbol.WBNB,
    displaySymbol: 'BNB',
    slug: 'binancecoin',
    address: WBNBAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/bnb.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',
    decimal: 18,
    isTokenNative: true,
    getPriceInUSD: () => getTokenPrice('binancecoin'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 1839,
        coinGecko: 'binancecoin',
        cryptoCompare: TokenSymbol.WBNB,
    },
};
const ethToken = {
    name: 'Ethereum',
    type: TokenType.Common,
    symbol: TokenSymbol.ETH,
    displaySymbol: 'ETH',
    slug: 'ethereum',
    address: ETHAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/eth.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x2170ed0880ac9a755fd29b2688956bd959f933f8',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('ethereum'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.ETH, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.ETH, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 1027,
        coinGecko: 'ethereum',
        cryptoCompare: TokenSymbol.ETH,
    },
};
const btcbToken = {
    name: 'Bitcoin BEP2',
    type: TokenType.Common,
    symbol: TokenSymbol.BTCB,
    displaySymbol: 'BTCB',
    slug: 'bitcoin-bep2',
    address: BTCBAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/btcb.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('bitcoin-bep2'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.BTCB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.BTCB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 4023,
        coinGecko: 'bitcoin-bep2',
        cryptoCompare: TokenSymbol.BTCB,
    },
};
const cakeToken = {
    name: 'PancakeSwap',
    type: TokenType.Common,
    symbol: TokenSymbol.CAKE,
    displaySymbol: 'CAKE',
    slug: 'pancakeswap-token',
    address: CAKEAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/cake.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('pancakeswap-token'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.CAKE, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.CAKE, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 7186,
        coinGecko: 'pancakeswap-token',
        cryptoCompare: TokenSymbol.CAKE,
    },
};
const usdtToken = {
    name: 'Tether',
    type: TokenType.Common,
    symbol: TokenSymbol.USDT,
    displaySymbol: 'USDT',
    slug: 'tether',
    address: USDTAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/usdt.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x55d398326f99059ff775485246999027b3197955',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('tether'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.USDT, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.USDT, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 825,
        coinGecko: 'tether',
        cryptoCompare: TokenSymbol.USDT,
    },
};
const dotToken = {
    name: 'Polkadot',
    type: TokenType.Common,
    symbol: TokenSymbol.DOT,
    displaySymbol: 'DOT',
    slug: 'polkadot',
    address: DOTAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/dot.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x7083609fce4d1d8dc0c979aab8c869ea2c873402',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('polkadot'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.DOT, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.DOT, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 6636,
        coinGecko: 'polkadot',
        cryptoCompare: TokenSymbol.DOT,
    },
};
const uniToken = {
    name: 'Uniswap',
    type: TokenType.Common,
    symbol: TokenSymbol.UNI,
    displaySymbol: 'UNI',
    slug: 'uniswap',
    address: UNIAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/uni.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0xbf5140a22578168fd562dccf235e5d43a02ce9b1',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('uniswap'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.UNI, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.UNI, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 7083,
        coinGecko: 'uniswap',
        cryptoCompare: TokenSymbol.UNI,
    },
};
const linkToken = {
    name: 'Chainlink',
    type: TokenType.Common,
    symbol: TokenSymbol.LINK,
    displaySymbol: 'LINK',
    slug: 'chainlink',
    address: LINKAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/link.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0xf8a0bf9cf54bb92f17374d9e9a321e6a111a51bd',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('chainlink'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.LINK, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.LINK, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 1975,
        coinGecko: 'chainlink',
        cryptoCompare: TokenSymbol.LINK,
    },
};
const xvsToken = {
    name: 'Venus',
    type: TokenType.Common,
    symbol: TokenSymbol.XVS,
    displaySymbol: 'XVS',
    slug: 'venus',
    address: XVSAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/xvs.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0xcf6bb5389c92bdda8a3747ddb454cb7a64626c63',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('venus'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.XVS, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.XVS, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 7288,
        coinGecko: 'venus',
        cryptoCompare: TokenSymbol.XVS,
    },
};
const yfiToken = {
    name: 'Yearn.finance',
    type: TokenType.Common,
    symbol: TokenSymbol.YFI,
    displaySymbol: 'YFI',
    slug: 'yearn-finance',
    address: YFIAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/yfi.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('yearn-finance'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.YFI, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.YFI, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 5864,
        coinGecko: 'yearn-finance',
        cryptoCompare: TokenSymbol.YFI,
    },
};
const vaiToken = {
    name: 'Vai',
    type: TokenType.Common,
    symbol: TokenSymbol.VAI,
    displaySymbol: 'VAI',
    slug: 'vai',
    address: VAIAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/vai.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x4bd17003473389a42daf6a0a729f6fdb328bbbd7',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('vai'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.VAI, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.VAI, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 7824,
        coinGecko: 'vai',
        cryptoCompare: TokenSymbol.VAI,
    },
};
const usdcToken = {
    name: 'USD Coin',
    type: TokenType.Common,
    symbol: TokenSymbol.USDC,
    displaySymbol: 'USDC',
    slug: 'usd-coin',
    address: USDCAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/usdc.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('usd-coin'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.USDC, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.USDC, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 3408,
        coinGecko: 'usd-coin',
        cryptoCompare: TokenSymbol.USDC,
    },
};
const daiToken = {
    name: 'Dai',
    type: TokenType.Common,
    symbol: TokenSymbol.DAI,
    displaySymbol: 'DAI',
    slug: 'dai',
    address: DAIAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/dai.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('dai'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.DAI, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.DAI, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 4943,
        coinGecko: 'dai',
        cryptoCompare: TokenSymbol.DAI,
    },
};
const ustToken = {
    name: 'TerraUSD',
    type: TokenType.Common,
    symbol: TokenSymbol.UST,
    displaySymbol: 'UST',
    slug: 'terrausd',
    address: USTAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/ust.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x55d398326f99059ff775485246999027b3197955',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('terrausd'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.UST, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.UST, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 7129,
        coinGecko: 'terrausd',
        cryptoCompare: TokenSymbol.UST,
    },
};
const itamToken = {
    name: 'Itam',
    type: TokenType.Common,
    symbol: TokenSymbol.ITAM,
    displaySymbol: 'ITAM',
    slug: 'itam-games',
    address: ITAMAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/itam.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('itam-games'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.ITAM, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.ITAM, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 6490,
        coinGecko: 'itam-games',
        cryptoCompare: TokenSymbol.ITAM,
    },
};
const bethToken = {
    name: 'Binance Eth',
    type: TokenType.Common,
    symbol: TokenSymbol.BETH,
    displaySymbol: 'BETH',
    slug: 'binance-eth',
    address: BETHAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/beth.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('binance-eth'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.BETH, TokenSymbol.ETH, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.BETH, TokenSymbol.ETH, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 8353,
        coinGecko: 'binance-eth',
        cryptoCompare: TokenSymbol.BETH,
    },
};
const compToken = {
    name: 'Compound Governance Token',
    type: TokenType.Common,
    symbol: TokenSymbol.COMP,
    displaySymbol: 'COMP',
    slug: 'compound-governance-token',
    address: COMPAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/comp.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x52ce071bd9b1c4b00a0b92d298c512478cad67e8',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('compound-governance-token'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.COMP, TokenSymbol.ETH, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.COMP, TokenSymbol.ETH, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 5692,
        coinGecko: 'compound-governance-token',
        cryptoCompare: TokenSymbol.COMP,
    },
};
const sushiToken = {
    name: 'Sushi',
    type: TokenType.Common,
    symbol: TokenSymbol.SUSHI,
    displaySymbol: 'SUSHI',
    slug: 'sushi',
    address: SUSHIAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/sushi.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x947950bcc74888a40ffa2593c5798f11fc9124c4',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('sushi'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.SUSHI, TokenSymbol.ETH, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.SUSHI, TokenSymbol.ETH, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 6758,
        coinGecko: 'sushi',
        cryptoCompare: TokenSymbol.SUSHI,
    },
};
const alpacaToken = {
    name: 'Alpaca',
    type: TokenType.Common,
    symbol: TokenSymbol.ALPACA,
    displaySymbol: 'ALPACA',
    slug: 'alpaca-finance',
    address: AlpacaTokenAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/alpaca.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x8f0528ce5ef7b51152a59745befdd91d97091d2f',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('alpaca-finance'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.ALPACA, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.ALPACA, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 8707,
        coinGecko: 'alpaca-finance',
        cryptoCompare: TokenSymbol.ALPACA,
    },
};
const bmxxToken = {
    name: 'bmxx',
    type: TokenType.Common,
    symbol: TokenSymbol.BMXX,
    displaySymbol: 'bMXX',
    slug: 'multiplier-bsc',
    address: BMXXAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/bmxx.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('multiplier-bsc'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.BMXX, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.BMXX, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 8618,
        coinGecko: 'multiplier-bsc',
        cryptoCompare: TokenSymbol.BMXX,
    },
};
const beltToken = {
    name: 'belt',
    type: TokenType.Common,
    symbol: TokenSymbol.BELT,
    displaySymbol: 'BELT',
    slug: 'belt',
    address: BELTAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/belt.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0xe0e514c71282b6f4e823703a39374cf58dc3ea4f',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('belt'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.BELT, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.BELT, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 8730,
        coinGecko: 'belt',
        cryptoCompare: TokenSymbol.BELT,
    },
};
const borToken = {
    name: 'bor',
    type: TokenType.Common,
    symbol: TokenSymbol.BOR,
    displaySymbol: 'BOR',
    slug: 'boringdao',
    address: BORAddress,
    iconUrl: 'https://assets.coingecko.com/coins/images/12917/small/bor_logo.png?1603607502',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('boringdao'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.BOR, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.BOR, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 7509,
        coinGecko: 'boringdao',
        cryptoCompare: TokenSymbol.BOR,
    },
};
const bryToken = {
    name: 'bry',
    type: TokenType.Common,
    symbol: TokenSymbol.BRY,
    displaySymbol: 'BRY',
    slug: 'berry-data',
    address: BRYAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/berry.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0xf859Bf77cBe8699013d6Dbc7C2b926Aaf307F830',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('berry-data'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.BRY, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.BRY, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 8483,
        coinGecko: 'berry-data',
        cryptoCompare: TokenSymbol.BRY,
    },
};
const pcwsToken = {
    name: 'crowns',
    type: TokenType.Common,
    symbol: TokenSymbol.PCWS,
    displaySymbol: 'pCWS',
    slug: 'crowns',
    address: PCWSAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/cws.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0xbcf39f0edda668c58371e519af37ca705f2bfcbd',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('crowns'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.PCWS, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.PCWS, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 8365,
        coinGecko: 'crowns',
        cryptoCompare: TokenSymbol.PCWS,
    },
};
const swingbyToken = {
    name: 'Swingby',
    type: TokenType.Common,
    symbol: TokenSymbol.SWINGBY,
    displaySymbol: 'SWINGBY',
    slug: 'swingby',
    address: SWINGBYAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/swingby.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('swingby'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.SWINGBY, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.SWINGBY, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 5922,
        coinGecko: 'swingby',
        cryptoCompare: TokenSymbol.SWINGBY,
    },
};
const dodoToken = {
    name: 'DODO',
    type: TokenType.Common,
    symbol: TokenSymbol.DODO,
    displaySymbol: 'DODO',
    slug: 'dodo',
    address: DODOAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/dodo.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x67ee3cb086f8a16f34bee3ca72fad36f7db929e2',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('dodo'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.DODO, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.DODO, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 7224,
        coinGecko: 'dodo',
        cryptoCompare: TokenSymbol.DODO,
    },
};
const sAlpacaToken = {
    name: 'sAlpaca',
    type: TokenType.Common,
    symbol: TokenSymbol.SALPACA,
    displaySymbol: 'sALPACA',
    slug: '',
    address: StronkAlpacaAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/s-alpaca.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: getZero,
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.SALPACA, TokenSymbol.ALPACA, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.SALPACA, TokenSymbol.ALPACA, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {},
};
const wexToken = {
    name: 'WaultSwap',
    type: TokenType.Common,
    symbol: TokenSymbol.WEX,
    displaySymbol: 'WEX',
    slug: 'waultswap',
    address: WEXAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/wex.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('waultswap'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.WEX, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.WEX, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 9951,
        coinGecko: 'waultswap',
        cryptoCompare: TokenSymbol.WEX,
    },
};
const waultxToken = {
    name: 'Wault',
    type: TokenType.Common,
    symbol: TokenSymbol.WAULTX,
    displaySymbol: 'WAULTx',
    slug: 'wault',
    address: WAULTXAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/waultx.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('wault'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.WAULTX, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.WAULTX, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 9478,
        coinGecko: 'wault',
        cryptoCompare: TokenSymbol.WAULTX,
    },
};
const oddzToken = {
    name: 'Oddz',
    type: TokenType.Common,
    symbol: TokenSymbol.ODDZ,
    displaySymbol: 'ODDZ',
    slug: 'oddz',
    address: ODDZAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/oddz.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0xcd40f2670cf58720b694968698a5514e924f742d',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('oddz'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.ODDZ, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.ODDZ, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 8717,
        coinGecko: 'oddz',
        cryptoCompare: TokenSymbol.ODDZ,
    },
};
const adaToken = {
    name: 'Ada',
    type: TokenType.Common,
    symbol: TokenSymbol.ADA,
    displaySymbol: 'ADA',
    slug: 'cardano',
    address: ADAAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/ada.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x3ee2200efb3400fabb9aacf31297cbdd1d435d47',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('cardano'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.ADA, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.ADA, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 2010,
        coinGecko: 'cardano',
        cryptoCompare: TokenSymbol.ADA,
    },
};
const formToken = {
    name: 'Form',
    type: TokenType.Common,
    symbol: TokenSymbol.FORM,
    displaySymbol: 'FORM',
    slug: 'formation-fi',
    address: FORMAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/form-fi.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x25a528af62e56512a19ce8c3cab427807c28cc19',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('formation-fi'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.FORM, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.FORM, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 10408,
        coinGecko: 'formation-fi',
        cryptoCompare: TokenSymbol.FORM,
    },
};
const maticToken = {
    name: 'Matic',
    type: TokenType.Common,
    symbol: TokenSymbol.MATIC,
    displaySymbol: 'MATIC',
    slug: 'matic-network',
    address: MATICAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/matic.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('matic-network'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.MATIC, TokenSymbol.USDT, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.MATIC, TokenSymbol.USDT, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 3890,
        coinGecko: 'matic-network',
        cryptoCompare: TokenSymbol.MATIC,
    },
};
const tusdToken = {
    name: 'TrueUSD',
    type: TokenType.Common,
    symbol: TokenSymbol.TUSD,
    displaySymbol: 'TUSD',
    slug: 'true-usd',
    address: TUSDAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/tusd.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x14016e85a25aeb13065688cafb43044c2ef86784',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('true-usd'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.TUSD, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.TUSD, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 2563,
        coinGecko: 'true-usd',
        cryptoCompare: TokenSymbol.TUSD,
    },
};
const trxToken = {
    name: 'Tron',
    type: TokenType.Common,
    symbol: TokenSymbol.TRX,
    displaySymbol: 'TRX',
    slug: 'tron',
    address: TRXAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/trx.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x85eac5ac2f758618dfa09bdbe0cf174e7d574d5b',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('tron'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.TRX, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.TRX, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 1958,
        coinGecko: 'tron',
        cryptoCompare: TokenSymbol.TRX,
    },
};
const bttToken = {
    name: 'BitTorrent',
    type: TokenType.Common,
    symbol: TokenSymbol.BTT,
    displaySymbol: 'BTT',
    slug: 'bittorrent-old',
    address: BTTAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/btt.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x8595f9da7b868b1822194faed312235e43007b49',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('bittorrent-old'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.BTT, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.BTT, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 3718,
        coinGecko: 'bittorrent-old',
        cryptoCompare: TokenSymbol.BTT,
    },
};
const pmonToken = {
    name: 'PolyChainMonsters',
    type: TokenType.Common,
    symbol: TokenSymbol.PMON,
    displaySymbol: 'PMON',
    slug: 'polychain-monsters',
    address: PMONAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/pmon.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x1796ae0b0fa4862485106a0de9b654efe301d0b2',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('polychain-monsters'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.PMON, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.PMON, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 8968,
        coinGecko: 'polychain-monsters',
        cryptoCompare: TokenSymbol.PMON,
    },
};
const orbsToken = {
    name: 'Orbs',
    type: TokenType.Common,
    symbol: TokenSymbol.ORBS,
    displaySymbol: 'ORBS',
    slug: 'orbs',
    address: ORBSAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/orbs.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0xebd49b26169e1b52c04cfd19fcf289405df55f80',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('orbs'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.ORBS, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.ORBS, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 3835,
        coinGecko: 'orbs',
        cryptoCompare: TokenSymbol.ORBS,
    },
};
const axsToken = {
    name: 'Axie Infinity',
    type: TokenType.Common,
    symbol: TokenSymbol.AXS,
    displaySymbol: 'AXS',
    slug: 'axie-infinity',
    address: AXSAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/axs.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x715d400f88c167884bbcc41c5fea407ed4d2f8a0',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('axie-infinity'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.AXS, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.AXS, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 6783,
        coinGecko: 'axie-infinity',
        cryptoCompare: TokenSymbol.AXS,
    },
};
const wusdToken = {
    name: 'Wault USD',
    type: TokenType.Common,
    symbol: TokenSymbol.WUSD,
    displaySymbol: 'WUSD',
    slug: 'wault-usd',
    address: WUSDAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/wusd.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('wault-usd'),
    priceRoutes: [ILPRouteV2Factory.createILPFromWsRoute([TokenSymbol.WUSD, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 11559,
        coinGecko: 'wault-usd',
        cryptoCompare: TokenSymbol.WUSD,
    },
};
const phaToken = {
    name: 'Phala Network',
    type: TokenType.Common,
    symbol: TokenSymbol.PHA,
    displaySymbol: 'PHA',
    slug: 'pha',
    address: PHAAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/pha.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x0112e557d400474717056c4e6d40edd846f38351',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('pha'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.PHA, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.PHA, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 6841,
        coinGecko: 'pha',
        cryptoCompare: TokenSymbol.PHA,
    },
};
const scixToken = {
    name: 'Scientix',
    type: TokenType.Common,
    symbol: TokenSymbol.SCIX,
    displaySymbol: 'SCIX',
    slug: 'scientix',
    address: SCIXAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/scix.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('scientix'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.SCIX, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 11784,
        coinGecko: 'scientix',
        cryptoCompare: TokenSymbol.SCIX,
    },
};
const almToken = {
    name: 'Alium Swap',
    type: TokenType.Common,
    symbol: TokenSymbol.ALM,
    displaySymbol: 'ALM',
    slug: 'alium-swap',
    address: ALMAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/alm.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('alium-swap'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.ALM, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.ALM, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 10428,
        coinGecko: 'alium-swap',
        cryptoCompare: TokenSymbol.ALM,
    },
};
const kalaToken = {
    name: 'Kalata Protocol',
    type: TokenType.Common,
    symbol: TokenSymbol.KALA,
    displaySymbol: 'KALA',
    slug: 'kalata',
    address: KALAAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/kala.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('kalata'),
    priceRoutes: [
        ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.KALA, TokenSymbol.WBNB, TokenSymbol.BUSD]),
        ILPRouteV2Factory.createILPFromPcsV1Route([TokenSymbol.KALA, TokenSymbol.WBNB, TokenSymbol.BUSD]),
    ],
    priceSourceIds: {
        coinMarketCap: 9353,
        coinGecko: 'kalata',
        cryptoCompare: TokenSymbol.KALA,
    },
};
const mboxToken = {
    name: 'Mobox',
    type: TokenType.Common,
    symbol: TokenSymbol.MBOX,
    displaySymbol: 'MBOX',
    slug: 'mobox',
    address: MBOXAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/mbox.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x3203c9e46ca618c8c1ce5dc67e7e9d75f5da2377',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('mobox'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.MBOX, TokenSymbol.WBNB, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 9175,
        coinGecko: 'mobox',
        cryptoCompare: TokenSymbol.MBOX,
    },
};
const naosToken = {
    name: 'NAOS Finance',
    type: TokenType.Common,
    symbol: TokenSymbol.NAOS,
    displaySymbol: 'NAOS',
    slug: 'naos-finance',
    address: NAOSAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/naos.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x758d08864fb6cce3062667225ca10b8f00496cc2',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('naos-finance'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.NAOS, TokenSymbol.WBNB, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 9504,
        coinGecko: 'naos-finance',
        cryptoCompare: TokenSymbol.NAOS,
    },
};
const mdxToken = {
    name: 'Mdex',
    type: TokenType.Common,
    symbol: TokenSymbol.MDX,
    displaySymbol: 'MDX',
    slug: 'mdex',
    address: MDEXAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/mdex.svg',
    buyUrl: 'https://ht.mdex.me/#/swap?outputCurrency=0x25d2e80cb6b86881fd7e07dd263fb79f4abe033c',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('mdex'),
    priceRoutes: [ILPRouteV2Factory.createILPFromMdxRoute([TokenSymbol.MDX, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 8335,
        coinGecko: 'mdex',
        cryptoCompare: TokenSymbol.MDX,
    },
};
const dviToken = {
    name: 'Dvision Network',
    type: TokenType.Common,
    symbol: TokenSymbol.DVI,
    displaySymbol: 'DVI',
    slug: 'dvision-network',
    address: DVIAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/dvi.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x758fb037a375f17c7e195cc634d77da4f554255b',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('dvision-network'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.DVI, TokenSymbol.WBNB, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 7590,
        coinGecko: 'dvision-network',
        cryptoCompare: TokenSymbol.DVI,
    },
};
const latteToken = {
    name: 'LatteSwap',
    type: TokenType.Common,
    symbol: TokenSymbol.LATTE,
    displaySymbol: 'LATTE',
    slug: 'latteswap',
    address: LATTEAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/latte-v2.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: getZero,
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.LATTE, TokenSymbol.BUSD])],
    priceSourceIds: {},
};
const qbtToken = {
    name: 'Qubit',
    type: TokenType.Common,
    symbol: TokenSymbol.QBT,
    displaySymbol: 'QBT',
    slug: 'qubit',
    address: QBTAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/qbt.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x17b7163cf1dbd286e262ddc68b553d899b93f526',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('qubit'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.QBT, TokenSymbol.WBNB, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 11414,
        coinGecko: 'qubit',
        // no cryptoCompare because duplicated with Qbao
    },
};
const pearToken = {
    name: 'Pear',
    type: TokenType.Common,
    symbol: TokenSymbol.PEAR,
    displaySymbol: 'PEAR',
    slug: 'pear',
    address: PEARAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/pear.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('pear'),
    priceRoutes: [ILPRouteV2Factory.createILPFromAsRoute([TokenSymbol.PEAR, TokenSymbol.WBNB, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 11105,
        coinGecko: 'pear',
        // no cryptoCompare because duplicated with Qbao
    },
};
const potsToken = {
    name: 'Moonpot',
    type: TokenType.Common,
    symbol: TokenSymbol.POTS,
    displaySymbol: 'POTS',
    slug: 'moonpot',
    address: POTSAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/pots.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x3fcca8648651e5b974dd6d3e50f61567779772a8',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('moonpot'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.POTS, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 11242,
        coinGecko: 'moonpot',
        // not listed on cryptoCompare
    },
};
const luckyToken = {
    name: 'Lucky Lion',
    type: TokenType.Common,
    symbol: TokenSymbol.LUCKY,
    displaySymbol: 'LUCKY',
    slug: 'lucky-lion',
    address: LUCKYAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/lucky.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('lucky-lion'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.LUCKY, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 12233,
        coinGecko: 'lucky-lion',
        // not listed on cryptoCompare
    },
};
const polarToken = {
    name: 'Polar Sync',
    type: TokenType.Common,
    symbol: TokenSymbol.POLAR,
    displaySymbol: 'POLAR',
    slug: 'polar-sync',
    address: POLARAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/polar.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('polar-sync'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.POLAR, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 11540,
        coinGecko: 'polar-sync',
        // not listed on cryptoCompare
    },
};
const moniToken = {
    name: 'Monsta Infinite',
    type: TokenType.Common,
    symbol: TokenSymbol.MONI,
    displaySymbol: 'MONI',
    slug: 'monsta-infinite',
    address: MONIAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/moni.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('monsta-infinite'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.MONI, TokenSymbol.WBNB, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 11925,
        coinGecko: 'monsta-infinite',
        cryptoCompare: TokenSymbol.MONI,
    },
};
const bmonToken = {
    name: 'Binamon',
    type: TokenType.Common,
    symbol: TokenSymbol.BMON,
    displaySymbol: 'BMON',
    slug: 'binamon',
    address: BMONAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/bmon.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x08ba0619b1e7a582e0bce5bbe9843322c954c340',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('binamon'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.BMON, TokenSymbol.WBNB, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 10704,
        coinGecko: 'binamon',
        cryptoCompare: TokenSymbol.BMON,
    },
};
const nftyToken = {
    name: 'NFTY Token',
    type: TokenType.Common,
    symbol: TokenSymbol.NFTY,
    displaySymbol: 'NFTY',
    slug: 'nfty-token',
    address: NFTYAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/nfty.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('nfty-token'),
    priceRoutes: [ILPRouteV2Factory.createILPFromAsRoute([TokenSymbol.NFTY, TokenSymbol.WBNB, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 12506,
        coinGecko: 'nfty-token',
        // not listed on cryptoCompare
    },
};
const sheeshaToken = {
    name: 'Sheesha Finance',
    type: TokenType.Common,
    symbol: TokenSymbol.SHEESHA,
    displaySymbol: 'SHEESHA',
    slug: 'sheesha-finance-bep20',
    address: SHEESHAAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/sheesha.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('sheesha-finance-bep20'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.SHEESHA, TokenSymbol.WBNB, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 10337,
        // not listed on coinGecko
        cryptoCompare: TokenSymbol.SHEESHA,
    },
};
const skillToken = {
    name: 'Crypto Blades',
    type: TokenType.Common,
    symbol: TokenSymbol.SKILL,
    displaySymbol: 'SKILL',
    slug: 'cryptoblades',
    address: SKILLAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/skill.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('cryptoblades'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.SKILL, TokenSymbol.WBNB, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 9654,
        coinGecko: 'cryptoblades',
        cryptoCompare: TokenSymbol.SKILL,
    },
};
const arvToken = {
    name: 'Ariva',
    type: TokenType.Common,
    symbol: TokenSymbol.ARV,
    displaySymbol: 'ARV',
    slug: 'ariva',
    address: ARVAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/arv.svg',
    buyUrl: undefined,
    decimal: 8,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('ariva'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.ARV, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 11541,
        coinGecko: 'ariva',
        // not listed on cryptoCompare
    },
};
const xwinToken = {
    name: 'xWIN Finance',
    type: TokenType.Common,
    symbol: TokenSymbol.XWIN,
    displaySymbol: 'XWIN',
    slug: 'xwin-finance',
    address: XWINAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/xwin.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('xwin-finance'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.XWIN, TokenSymbol.WBNB, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 9870,
        coinGecko: 'xwin-finance',
        cryptoCompare: TokenSymbol.XWIN,
    },
};
const xmsToken = {
    name: 'Mars Ecosystem',
    type: TokenType.Common,
    symbol: TokenSymbol.XMS,
    displaySymbol: 'XMS',
    slug: 'mars-ecosystem-token',
    address: XMSAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/xms.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('mars-ecosystem-token'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.XMS, TokenSymbol.WBNB, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 10030,
        coinGecko: 'mars-ecosystem-token',
        cryptoCompare: TokenSymbol.XMS,
    },
};
const leonToken = {
    name: 'Leon Token',
    type: TokenType.Common,
    symbol: TokenSymbol.LEON,
    displaySymbol: 'LEON',
    slug: 'leon-token',
    address: LEONAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/leon.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('leon-token'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.LEON, TokenSymbol.WBNB, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 13778,
        // not listed on coinGecko
        // not listed on cryptoCompare
    },
};
const wnowToken = {
    name: 'WalletNow',
    type: TokenType.Common,
    symbol: TokenSymbol.WNOW,
    displaySymbol: 'WNOW',
    slug: 'walletnow',
    address: WNOWAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/wnow.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('walletnow'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.WNOW, TokenSymbol.WBNB, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 14257,
        coinGecko: 'walletnow',
        // not listed on cryptoCompare
    },
};
const depToken = {
    name: 'DEAPCOIN',
    type: TokenType.Common,
    symbol: TokenSymbol.DEP,
    displaySymbol: 'DEP',
    slug: 'deapcoin',
    address: DEPAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/dep.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('deapcoin'),
    priceRoutes: [ILPRouteV2Factory.createILPFromAsRoute([TokenSymbol.DEP, TokenSymbol.WBNB, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 5429,
        coinGecko: 'deapcoin',
        cryptoCompare: TokenSymbol.DEP,
    },
};
const tenfiToken = {
    name: 'TEN',
    type: TokenType.Common,
    symbol: TokenSymbol.TENFI,
    displaySymbol: 'TENFI',
    slug: 'ten',
    address: TENFIAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/tenfi.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('ten'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.TENFI, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 10031,
        coinGecko: 'ten',
        cryptoCompare: TokenSymbol.TENFI,
    },
};
const capsToken = {
    name: 'Ternoa',
    type: TokenType.Common,
    symbol: TokenSymbol.CAPS,
    displaySymbol: 'CAPS',
    slug: 'ternoa',
    address: CAPSAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/caps.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('ternoa'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.CAPS, TokenSymbol.WBNB, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 9291,
        coinGecko: 'ternoa',
    },
};
const spsToken = {
    name: 'Splinterlands',
    type: TokenType.Common,
    symbol: TokenSymbol.SPS,
    displaySymbol: 'SPS',
    slug: 'splinterlands',
    address: SPSAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/sps.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x1633b7157e7638c4d6593436111bf125ee74703f',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('splinterlands'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.SPS, TokenSymbol.WBNB, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 11035,
        coinGecko: 'splinterlands',
        cryptoCompare: TokenSymbol.SPS,
    },
};
const plutToken = {
    name: 'Plutos Network',
    type: TokenType.Common,
    symbol: TokenSymbol.PLUT,
    displaySymbol: 'PLUT',
    slug: 'plutos-network',
    address: PLUTAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/plut.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('plutos-network'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.PLUT, TokenSymbol.WBNB, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 10525,
        coinGecko: 'plutos-network',
        // not listed on cryptoCompare
    },
};
const eternalToken = {
    name: 'CryptoMines Eternal',
    type: TokenType.Common,
    symbol: TokenSymbol.ETERNAL,
    displaySymbol: 'ETERNAL',
    slug: 'cryptomines-eternal',
    address: ETERNALAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/eternal.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('cryptomines-eternal'),
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.ETERNAL, TokenSymbol.WBNB, TokenSymbol.BUSD])],
    priceSourceIds: {
        coinMarketCap: 11736,
        coinGecko: 'cryptomines-eternal',
        // not listed on cryptoCompare
    },
};
const thgToken = {
    name: 'Thetan Gem',
    type: TokenType.Common,
    symbol: TokenSymbol.THG,
    displaySymbol: 'THG',
    slug: 'thetan-arena',
    address: THGAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/thg.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x9fd87aefe02441b123c3c32466cd9db4c578618f',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('thetan-arena'),
    priceSourceIds: {
        coinMarketCap: 11926,
        coinGecko: 'thetan-arena',
        cryptoCompare: TokenSymbol.THG,
    },
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.THG, TokenSymbol.WBNB, TokenSymbol.BUSD])],
};
const paybSwapToken = {
    name: 'Paybswap',
    type: TokenType.Common,
    symbol: TokenSymbol.PAYB,
    displaySymbol: 'PAYB',
    slug: 'paybswap',
    address: PAYBSWAPAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/payb.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('paybswap'),
    priceSourceIds: {
        coinMarketCap: 8942,
        coinGecko: 'paybswap',
        // not listed on cryptoCompare
    },
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.PAYB, TokenSymbol.WBNB, TokenSymbol.BUSD])],
};
const landToken = {
    name: 'Landshare',
    type: TokenType.Common,
    symbol: TokenSymbol.LAND,
    displaySymbol: 'LAND',
    slug: 'landshare',
    address: LANDAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/land.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('landshare'),
    priceSourceIds: {
        coinMarketCap: 11245,
        coinGecko: 'landshare',
        // not listed on cryptoCompare
    },
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.LAND, TokenSymbol.WBNB, TokenSymbol.BUSD])],
};
const highToken = {
    name: 'HighStreet',
    type: TokenType.Common,
    symbol: TokenSymbol.HIGH,
    displaySymbol: 'HIGH',
    slug: 'highstreet',
    address: HIGHAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/high.svg',
    buyUrl: 'https://pancakeswap.finance/swap?outputCurrency=0x5f4bde007dc06b867f86ebfe4802e34a1ffeed63',
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('highstreet'),
    priceSourceIds: {
        coinMarketCap: 11232,
        coinGecko: 'highstreet',
        cryptoCompare: TokenSymbol.HIGH,
    },
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.HIGH, TokenSymbol.BUSD])],
};
const dltaToken = {
    name: 'Delta Thetha',
    type: TokenType.Common,
    symbol: TokenSymbol.DLTA,
    displaySymbol: 'DLTA',
    slug: 'delta-theta',
    address: DLTAAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/dlta.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('delta-theta'),
    priceSourceIds: {
        coinMarketCap: 11341,
        coinGecko: 'delta-theta',
        // not listed on cryptoCompare
    },
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.DLTA, TokenSymbol.BUSD])],
};
// IB Tokens
const ibBNBToken = {
    name: 'ibBNB',
    type: TokenType.InterestBearing,
    symbol: TokenSymbol.IBBNB,
    displaySymbol: 'ibBNB',
    slug: '',
    address: BNBVaultAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/ib-bnb.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: getZero,
    underlyingToken: bnbToken,
    priceSourceIds: {},
};
const ibBUSDToken = {
    name: 'ibBUSD',
    type: TokenType.InterestBearing,
    symbol: TokenSymbol.IBBUSD,
    displaySymbol: 'ibBUSD',
    slug: '',
    address: BUSDVaultAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/ib-busd.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: getZero,
    underlyingToken: busdToken,
    priceSourceIds: {},
};
const ibETHToken = {
    name: 'ibETH',
    type: TokenType.InterestBearing,
    symbol: TokenSymbol.IBETH,
    displaySymbol: 'ibETH',
    slug: '',
    address: ETHVaultAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/ib-eth.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: getZero,
    underlyingToken: ethToken,
    priceSourceIds: {},
};
const ibALPACAToken = {
    name: 'ibALPACA',
    type: TokenType.InterestBearing,
    symbol: TokenSymbol.IBALPACA,
    displaySymbol: 'ibALPACA',
    slug: '',
    address: ALPACAVaultAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/ib-alpaca.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: getZero,
    underlyingToken: alpacaToken,
    priceSourceIds: {},
};
const ibUSDTToken = {
    name: 'ibUSDT',
    type: TokenType.InterestBearing,
    symbol: TokenSymbol.IBUSDT,
    displaySymbol: 'ibUSDT',
    slug: '',
    address: USDTVaultAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/ib-usdt.svg?v=2',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: getZero,
    underlyingToken: usdtToken,
    priceSourceIds: {},
};
const ibBTCBToken = {
    name: 'ibBTCB',
    type: TokenType.InterestBearing,
    symbol: TokenSymbol.IBBTCB,
    displaySymbol: 'ibBTCB',
    slug: '',
    address: BTCBVaultAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/ib-btcb.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: getZero,
    underlyingToken: btcbToken,
    priceSourceIds: {},
};
const ibTUSDToken = {
    name: 'ibTUSD',
    type: TokenType.InterestBearing,
    symbol: TokenSymbol.IBTUSD,
    displaySymbol: 'ibTUSD',
    slug: '',
    address: TUSDVaultAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/ib-tusd.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: getZero,
    underlyingToken: tusdToken,
    priceSourceIds: {},
};
const ibUSDCToken = {
    name: 'ibUSDC',
    type: TokenType.InterestBearing,
    symbol: TokenSymbol.IBUSDC,
    displaySymbol: 'ibUSDC',
    slug: '',
    address: USDCVaultAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/ib-usdc.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: getZero,
    underlyingToken: usdcToken,
    priceSourceIds: {},
};
// Debt Tokens
const debtBNBToken = {
    name: 'debtBNB',
    type: TokenType.Debt,
    symbol: TokenSymbol.DEBTBNB,
    displaySymbol: 'debtBNB',
    slug: '',
    address: DebtTokenBNBAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/bnb.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: getZero,
    underlyingToken: bnbToken,
    priceSourceIds: {},
};
const debtBUSDToken = {
    name: 'debtBUSD',
    type: TokenType.Debt,
    symbol: TokenSymbol.DEBTBUSD,
    displaySymbol: 'debtBUSD',
    slug: '',
    address: DebtTokenBUSDAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/busd.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: getZero,
    underlyingToken: busdToken,
    priceSourceIds: {},
};
const debtETHToken = {
    name: 'debtETH',
    type: TokenType.Debt,
    symbol: TokenSymbol.DEBTETH,
    displaySymbol: 'debtETH',
    slug: '',
    address: DebtTokenETHAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/eth.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: getZero,
    underlyingToken: ethToken,
    priceSourceIds: {},
};
const debtALPACAToken = {
    name: 'debtALPACA',
    type: TokenType.Debt,
    symbol: TokenSymbol.DEBTALPACA,
    displaySymbol: 'debtALPACA',
    slug: '',
    address: DebtTokenALPACAAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/alpaca.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: getZero,
    underlyingToken: alpacaToken,
    priceSourceIds: {},
};
const debtUSDTToken = {
    name: 'debtUSDT',
    type: TokenType.Debt,
    symbol: TokenSymbol.DEBTUSDT,
    displaySymbol: 'debtUSDT',
    slug: '',
    address: DebtTokenUSDTAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/usdt.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: getZero,
    underlyingToken: usdtToken,
    priceSourceIds: {},
};
const debtBTCBToken = {
    name: 'debtBTCB',
    type: TokenType.Debt,
    symbol: TokenSymbol.DEBTBTCB,
    displaySymbol: 'debtBTCB',
    slug: '',
    address: DebtTokenBTCBAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/btcb.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: getZero,
    underlyingToken: btcbToken,
    priceSourceIds: {},
};
const debtTUSDToken = {
    name: 'debtTUSD',
    type: TokenType.Debt,
    symbol: TokenSymbol.DEBTTUSD,
    displaySymbol: 'debtTUSD',
    slug: '',
    address: DebtTokenTUSDAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/tusd.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: getZero,
    underlyingToken: tusdToken,
    priceSourceIds: {},
};
const debtUSDCToken = {
    name: 'debtUSDC',
    type: TokenType.Debt,
    symbol: TokenSymbol.DEBTUSDC,
    displaySymbol: 'debtUSDC',
    slug: '',
    address: DebtTokenUSDCAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/usdc.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: getZero,
    underlyingToken: usdcToken,
    priceSourceIds: {},
};
// Alpaca Stablecoin
const ausdToken = {
    name: 'Alpaca USD',
    type: TokenType.Common,
    symbol: TokenSymbol.AUSD,
    displaySymbol: 'AUSD',
    slug: 'ausd',
    address: AUSDAddress,
    iconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/ausd.svg',
    buyUrl: undefined,
    decimal: 18,
    isTokenNative: false,
    getPriceInUSD: () => getTokenPrice('ausd'),
    priceSourceIds: {},
    priceRoutes: [ILPRouteV2Factory.createILPFromPcsV2Route([TokenSymbol.AUSD, TokenSymbol.BUSD])],
};
export const tokenProfiles = [
    bnbToken,
    busdToken,
    ethToken,
    btcbToken,
    cakeToken,
    usdtToken,
    dotToken,
    uniToken,
    linkToken,
    xvsToken,
    yfiToken,
    vaiToken,
    usdcToken,
    daiToken,
    ustToken,
    itamToken,
    bethToken,
    compToken,
    sushiToken,
    alpacaToken,
    sAlpacaToken,
    ibBNBToken,
    ibBUSDToken,
    ibETHToken,
    ibALPACAToken,
    ibUSDTToken,
    ibBTCBToken,
    ibTUSDToken,
    ibUSDCToken,
    debtBNBToken,
    debtBUSDToken,
    debtETHToken,
    debtUSDTToken,
    debtALPACAToken,
    debtBTCBToken,
    debtTUSDToken,
    debtUSDCToken,
    ausdToken,
    bmxxToken,
    beltToken,
    borToken,
    bryToken,
    pcwsToken,
    swingbyToken,
    dodoToken,
    wexToken,
    waultxToken,
    oddzToken,
    adaToken,
    formToken,
    maticToken,
    tusdToken,
    trxToken,
    bttToken,
    orbsToken,
    axsToken,
    pmonToken,
    scixToken,
    wusdToken,
    phaToken,
    almToken,
    kalaToken,
    mboxToken,
    naosToken,
    mdxToken,
    dviToken,
    latteToken,
    qbtToken,
    pearToken,
    potsToken,
    luckyToken,
    polarToken,
    moniToken,
    bmonToken,
    nftyToken,
    sheeshaToken,
    skillToken,
    xmsToken,
    arvToken,
    xwinToken,
    leonToken,
    wnowToken,
    depToken,
    tenfiToken,
    capsToken,
    spsToken,
    plutToken,
    eternalToken,
    thgToken,
    paybSwapToken,
    landToken,
    highToken,
    dltaToken,
];
export const mapTokenProfiles = tokenProfiles.reduce((accu, token) => {
    return Object.assign(Object.assign({}, accu), { [token.symbol]: token });
}, {});
export const mapAddressTokenProfiles = tokenProfiles.reduce((accu, token) => {
    return Object.assign(Object.assign({}, accu), { [token.address.toLowerCase()]: token });
}, {});
const pcsAlpacaWbnb = {
    name: 'PancakeSwap ALPACA-WBNB',
    tokenA: bnbToken,
    tokenB: alpacaToken,
    dex: PancakeSwapDex,
    type: TokenType.LpPair,
};
const pcsAusdBusd = {
    name: 'PancakeSwap AUSD-BUSD',
    tokenA: busdToken,
    tokenB: ausdToken,
    dex: PancakeSwapDex,
    type: TokenType.LpPair,
};
const pcsV1AlpacaWbnb = {
    name: 'PancakeSwapV1 ALPACA-WBNB',
    tokenA: bnbToken,
    tokenB: alpacaToken,
    dex: PancakeSwapDexV1,
    type: TokenType.LpPair,
};
export const lpTokenProfiles = [pcsAlpacaWbnb, pcsV1AlpacaWbnb];
export const mapLpTokenProfiles = {
    [DexKey.PancakeSwap]: {
        [TokenSymbol.ALPACA]: {
            [TokenSymbol.WBNB]: pcsAlpacaWbnb,
        },
        [TokenSymbol.WBNB]: {
            [TokenSymbol.ALPACA]: pcsAlpacaWbnb,
        },
        [TokenSymbol.AUSD]: {
            [TokenSymbol.BUSD]: pcsAusdBusd,
        },
        [TokenSymbol.BUSD]: {
            [TokenSymbol.AUSD]: pcsAusdBusd,
        },
    },
    [DexKey.PancakeSwapV1]: {
        [TokenSymbol.ALPACA]: {
            [TokenSymbol.WBNB]: pcsV1AlpacaWbnb,
        },
        [TokenSymbol.WBNB]: {
            [TokenSymbol.ALPACA]: pcsV1AlpacaWbnb,
        },
    },
    [DexKey.WaultSwap]: {},
    [DexKey.MdexSwap]: {},
};
export function getLpTokenAddress(lpToken) {
    const iLpRoute = ILPRouteV2Factory.createILPRouteV2([lpToken.tokenA, lpToken.tokenB], lpToken.dex.factory);
    if (!iLpRoute)
        return '';
    const [lpAddress] = new LPRouteV2(iLpRoute, mapTokenProfiles).getLPPaths();
    return lpAddress;
}
export function getTokenAddress(token) {
    if (token.type === TokenType.LpPair) {
        return getLpTokenAddress(token);
    }
    return token.address;
}
export function getDisplaySymbol(token) {
    if (token.type !== TokenType.LpPair) {
        return token.displaySymbol;
    }
    const { tokenA, tokenB, dex } = token;
    return `${tokenB.displaySymbol}-${tokenA.displaySymbol} ${dex.key.toUpperCase()} LP`;
}
