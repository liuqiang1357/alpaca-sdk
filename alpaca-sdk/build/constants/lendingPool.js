import { AlpacaTokenAddress, ALPACAVaultAddress, BUSDAddress, BUSDVaultAddress, ETHAddress, ETHVaultAddress, WBNBAddress, BNBVaultAddress, USDTAddress, USDTVaultAddress, BTCBAddress, BTCBVaultAddress, TUSDAddress, TUSDVaultAddress, USDCAddress, USDCVaultAddress, } from './contracts';
import { getAlpacaPrice, getTokenPrice } from '../utils/fiatPrice';
import { availableStakePools } from './stakingPool';
export const availableLendingPools = [
    {
        tokenName: 'ALPACA',
        tokenUnit: 'ALPACA',
        tokenIconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/alpaca.svg',
        tokenAddress: AlpacaTokenAddress,
        isTokenNative: false,
        isNew: false,
        ibName: 'ibALPACA',
        ibUnit: 'ibALPACA',
        ibVaultAddress: ALPACAVaultAddress,
        ibIconUrl: '',
        associatedStakingPool: availableStakePools.find((o) => o.name === 'ibALPACA'),
        getPriceInUSD: () => getAlpacaPrice(),
    },
    {
        tokenName: 'BNB',
        tokenUnit: 'BNB',
        tokenIconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/bnb.svg',
        tokenAddress: WBNBAddress,
        isTokenNative: true,
        isNew: false,
        ibName: 'ibWBNB',
        ibUnit: 'ibBNB',
        ibVaultAddress: BNBVaultAddress,
        ibIconUrl: '',
        associatedStakingPool: availableStakePools.find((o) => o.name === 'ibBNB'),
        getPriceInUSD: () => getTokenPrice('wbnb'),
    },
    {
        tokenName: 'BUSD',
        tokenUnit: 'BUSD',
        tokenIconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/busd.svg',
        tokenAddress: BUSDAddress,
        isTokenNative: false,
        isNew: false,
        ibName: 'ibBUSD',
        ibUnit: 'ibBUSD',
        ibVaultAddress: BUSDVaultAddress,
        ibIconUrl: '',
        associatedStakingPool: availableStakePools.find((o) => o.name === 'ibBUSD'),
        getPriceInUSD: () => getTokenPrice('binance-usd'),
    },
    {
        tokenName: 'USDT',
        tokenUnit: 'USDT',
        tokenIconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/usdt.svg',
        tokenAddress: USDTAddress,
        isTokenNative: false,
        isNew: false,
        ibName: 'ibUSDT',
        ibUnit: 'ibUSDT',
        ibVaultAddress: USDTVaultAddress,
        ibIconUrl: '',
        associatedStakingPool: availableStakePools.find((o) => o.name === 'ibUSDT'),
        getPriceInUSD: () => getTokenPrice('tether'),
    },
    {
        tokenName: 'USDC',
        tokenUnit: 'USDC',
        tokenIconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/usdc.svg',
        tokenAddress: USDCAddress,
        isTokenNative: false,
        isNew: false,
        ibName: 'ibUSDC',
        ibUnit: 'ibUSDC',
        ibVaultAddress: USDCVaultAddress,
        ibIconUrl: '',
        associatedStakingPool: availableStakePools.find((o) => o.name === 'ibUSDC'),
        getPriceInUSD: () => getTokenPrice('usd-coin'),
    },
    {
        tokenName: 'TUSD',
        tokenUnit: 'TUSD',
        tokenIconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/tusd.svg',
        tokenAddress: TUSDAddress,
        isTokenNative: false,
        isNew: false,
        ibName: 'ibTUSD',
        ibUnit: 'ibTUSD',
        ibVaultAddress: TUSDVaultAddress,
        ibIconUrl: '',
        associatedStakingPool: availableStakePools.find((o) => o.name === 'ibTUSD'),
        getPriceInUSD: () => getTokenPrice('true-usd'),
    },
    {
        tokenName: 'BTCB',
        tokenUnit: 'BTCB',
        tokenIconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/btcb.svg',
        tokenAddress: BTCBAddress,
        isTokenNative: false,
        isNew: false,
        ibName: 'ibBTCB',
        ibUnit: 'ibBTCB',
        ibVaultAddress: BTCBVaultAddress,
        ibIconUrl: '',
        associatedStakingPool: availableStakePools.find((o) => o.name === 'ibBTCB'),
        getPriceInUSD: () => getTokenPrice('bitcoin-bep2'),
    },
    {
        tokenName: 'ETH',
        tokenUnit: 'ETH',
        tokenIconUrl: 'https://alpaca-app-assets.alpacafinance.org/icons/coins/eth.svg',
        tokenAddress: ETHAddress,
        isTokenNative: false,
        isNew: false,
        ibName: 'ibETH',
        ibUnit: 'ibETH',
        ibVaultAddress: ETHVaultAddress,
        ibIconUrl: '',
        associatedStakingPool: availableStakePools.find((o) => o.name === 'ibETH'),
        getPriceInUSD: () => getTokenPrice('ethereum'),
    },
];
