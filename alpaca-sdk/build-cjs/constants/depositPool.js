"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93;
Object.defineProperty(exports, "__esModule", { value: true });
exports.depositPools = void 0;
const entity_1 = require("../entity");
const fiatPrice_1 = require("../utils/fiatPrice");
const appConfig_1 = require("./appConfig");
const contracts_1 = require("./contracts");
const pools_1 = require("./pools");
const tokenProfile_1 = require("./tokenProfile");
const worker_1 = require("./worker");
const singleAssetDepositPools = [
    {
        key: 'pcs-cakemaxi-eth',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.CAKEMAXI_ETH.activeWorker,
        isFarmingSingleAssetOptions: true,
        stakingTokenAddress: tokenProfile_1.mapTokenProfiles.cake.address,
        holderAddress: (_a = worker_1.mapWorkers['pcs-cakemaxi-eth']) === null || _a === void 0 ? void 0 : _a.address,
        farmingSingleAssetOptions: {
            dex: entity_1.PancakeSwapDex,
            poolId: pools_1.PancakeSyrupPoolId,
            getStakingTokenPrice: tokenProfile_1.mapTokenProfiles.cake.getPriceInUSD,
        },
    },
    {
        key: 'pcs-cakemaxi-usdt',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.CAKEMAXI_USDT.activeWorker,
        isFarmingSingleAssetOptions: true,
        stakingTokenAddress: tokenProfile_1.mapTokenProfiles.cake.address,
        holderAddress: (_b = worker_1.mapWorkers['pcs-cakemaxi-usdt']) === null || _b === void 0 ? void 0 : _b.address,
        farmingSingleAssetOptions: {
            dex: entity_1.PancakeSwapDex,
            poolId: pools_1.PancakeSyrupPoolId,
            getStakingTokenPrice: tokenProfile_1.mapTokenProfiles.cake.getPriceInUSD,
        },
    },
    {
        key: 'pcs-cakemaxi-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.CAKEMAXI_BNB.activeWorker,
        isFarmingSingleAssetOptions: true,
        stakingTokenAddress: tokenProfile_1.mapTokenProfiles.cake.address,
        holderAddress: (_c = worker_1.mapWorkers['pcs-cakemaxi-bnb']) === null || _c === void 0 ? void 0 : _c.address,
        farmingSingleAssetOptions: {
            dex: entity_1.PancakeSwapDex,
            poolId: pools_1.PancakeSyrupPoolId,
            getStakingTokenPrice: tokenProfile_1.mapTokenProfiles.cake.getPriceInUSD,
        },
    },
    {
        key: 'pcs-cakemaxi-busd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.CAKEMAXI_BUSD.activeWorker,
        isFarmingSingleAssetOptions: true,
        stakingTokenAddress: tokenProfile_1.mapTokenProfiles.cake.address,
        holderAddress: (_d = worker_1.mapWorkers['pcs-cakemaxi-busd']) === null || _d === void 0 ? void 0 : _d.address,
        farmingSingleAssetOptions: {
            dex: entity_1.PancakeSwapDex,
            poolId: pools_1.PancakeSyrupPoolId,
            getStakingTokenPrice: tokenProfile_1.mapTokenProfiles.cake.getPriceInUSD,
        },
    },
    {
        key: 'pcs-cakemaxi-btcb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.CAKEMAXI_BTCB.activeWorker,
        isFarmingSingleAssetOptions: true,
        stakingTokenAddress: tokenProfile_1.mapTokenProfiles.cake.address,
        holderAddress: (_e = worker_1.mapWorkers['pcs-cakemaxi-btcb']) === null || _e === void 0 ? void 0 : _e.address,
        farmingSingleAssetOptions: {
            dex: entity_1.PancakeSwapDex,
            poolId: pools_1.PancakeSyrupPoolId,
            getStakingTokenPrice: tokenProfile_1.mapTokenProfiles.cake.getPriceInUSD,
        },
    },
    {
        key: 'pcs-cakemaxi-tusd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.CAKEMAXI_TUSD.activeWorker,
        isFarmingSingleAssetOptions: true,
        stakingTokenAddress: tokenProfile_1.mapTokenProfiles.cake.address,
        holderAddress: (_f = worker_1.mapWorkers['pcs-cakemaxi-tusd']) === null || _f === void 0 ? void 0 : _f.address,
        farmingSingleAssetOptions: {
            dex: entity_1.PancakeSwapDex,
            poolId: pools_1.PancakeSyrupPoolId,
            getStakingTokenPrice: tokenProfile_1.mapTokenProfiles.cake.getPriceInUSD,
        },
    },
    {
        key: 'pcs-cakemaxi-usdc',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.CAKEMAXI_USDC.activeWorker,
        isFarmingSingleAssetOptions: true,
        stakingTokenAddress: tokenProfile_1.mapTokenProfiles.cake.address,
        holderAddress: (_g = worker_1.mapWorkers['pcs-cakemaxi-usdc']) === null || _g === void 0 ? void 0 : _g.address,
        farmingSingleAssetOptions: {
            dex: entity_1.PancakeSwapDex,
            poolId: pools_1.PancakeSyrupPoolId,
            getStakingTokenPrice: tokenProfile_1.mapTokenProfiles.cake.getPriceInUSD,
        },
    },
];
const waultExDepositPools = [
    // BNB
    {
        key: 'ws-wex-bnb',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.WEX_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_WEXWBNBLpTokenAddress,
        holderAddress: (_h = worker_1.mapWorkers['ws-wex-bnb']) === null || _h === void 0 ? void 0 : _h.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_WEXWBNBPoolId,
            lpTokenAddress: contracts_1.WS_WEXWBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'ws-busd-bnb',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.BUSD_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_WBNBBUSDLpTokenAddress,
        holderAddress: (_j = worker_1.mapWorkers['ws-busd-bnb']) === null || _j === void 0 ? void 0 : _j.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_WBNBBUSDPoolId,
            lpTokenAddress: contracts_1.WS_WBNBBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'ws-alpaca-bnb',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.ALPACA_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_ALPACAWBNBLpTokenAddress,
        holderAddress: (_k = worker_1.mapWorkers['ws-alpaca-bnb']) === null || _k === void 0 ? void 0 : _k.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_ALPACAWBNBPoolId,
            lpTokenAddress: contracts_1.WS_ALPACAWBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'ws-waultx-bnb',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.WAULTX_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_WAULTXWBNBLpTokenAddress,
        holderAddress: (_l = worker_1.mapWorkers['ws-waultx-bnb']) === null || _l === void 0 ? void 0 : _l.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_WAULTXWBNBPoolId,
            lpTokenAddress: contracts_1.WS_WAULTXWBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    // BUSD
    {
        key: 'ws-eth-busd',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.ETH_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_ETHBUSDLpTokenAddress,
        holderAddress: (_m = worker_1.mapWorkers['ws-eth-busd']) === null || _m === void 0 ? void 0 : _m.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_ETHBUSDPoolId,
            lpTokenAddress: contracts_1.WS_ETHBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'ws-bnb-busd',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.BNB_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_WBNBBUSDLpTokenAddress,
        holderAddress: (_o = worker_1.mapWorkers['ws-bnb-busd']) === null || _o === void 0 ? void 0 : _o.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_WBNBBUSDPoolId,
            lpTokenAddress: contracts_1.WS_WBNBBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'ws-usdt-busd',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.USDT_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_USDTBUSDLpTokenAddress,
        holderAddress: (_p = worker_1.mapWorkers['ws-usdt-busd']) === null || _p === void 0 ? void 0 : _p.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_USDTBUSDPoolId,
            lpTokenAddress: contracts_1.WS_USDTBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'ws-btcb-busd',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.BTCB_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_BTCBBUSDLpTokenAddress,
        holderAddress: (_q = worker_1.mapWorkers['ws-btcb-busd']) === null || _q === void 0 ? void 0 : _q.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_BTCBBUSDPoolId,
            lpTokenAddress: contracts_1.WS_BTCBBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'ws-wusd-busd',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.WUSD_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_WUSDBUSDLpTokenAddress,
        holderAddress: (_r = worker_1.mapWorkers['ws-wusd-busd']) === null || _r === void 0 ? void 0 : _r.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_WUSDBUSDPoolId,
            lpTokenAddress: contracts_1.WS_WUSDBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    // ETH
    {
        key: 'ws-busd-eth',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.BUSD_ETH.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_ETHBUSDLpTokenAddress,
        holderAddress: (_s = worker_1.mapWorkers['ws-busd-eth']) === null || _s === void 0 ? void 0 : _s.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_ETHBUSDPoolId,
            lpTokenAddress: contracts_1.WS_ETHBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['eth'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['eth'].getPriceInUSD,
        },
    },
    {
        key: 'ws-btcb-eth',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.BTCB_ETH.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_ETHBTCBLpTokenAddress,
        holderAddress: (_t = worker_1.mapWorkers['ws-btcb-eth']) === null || _t === void 0 ? void 0 : _t.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_ETHBTCBPoolId,
            lpTokenAddress: contracts_1.WS_ETHBTCBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['eth'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['eth'].getPriceInUSD,
        },
    },
    {
        key: 'ws-beth-eth',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.BETH_ETH.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_BETHETHLpTokenAddress,
        holderAddress: (_u = worker_1.mapWorkers['ws-beth-eth']) === null || _u === void 0 ? void 0 : _u.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_BETHETHPoolId,
            lpTokenAddress: contracts_1.WS_BETHETHLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['eth'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['eth'].getPriceInUSD,
        },
    },
    {
        key: 'ws-usdt-eth',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.USDT_ETH.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_ETHUSDTLpTokenAddress,
        holderAddress: (_v = worker_1.mapWorkers['ws-usdt-eth']) === null || _v === void 0 ? void 0 : _v.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_ETHUSDTPoolId,
            lpTokenAddress: contracts_1.WS_ETHUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['eth'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['eth'].getPriceInUSD,
        },
    },
    // ALPACA
    {
        key: 'ws-usdt-alpaca',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.USDT_ALPACA.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_ALPACAUSDTLpTokenAddress,
        holderAddress: (_w = worker_1.mapWorkers['ws-usdt-alpaca']) === null || _w === void 0 ? void 0 : _w.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_ALPACAUSDTPoolId,
            lpTokenAddress: contracts_1.WS_ALPACAUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['alpaca'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['alpaca'].getPriceInUSD,
        },
    },
    {
        key: 'ws-bnb-alpaca',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.ALPACA_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_ALPACAWBNBLpTokenAddress,
        holderAddress: (_x = worker_1.mapWorkers['ws-bnb-alpaca']) === null || _x === void 0 ? void 0 : _x.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_ALPACAWBNBPoolId,
            lpTokenAddress: contracts_1.WS_ALPACAWBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['alpaca'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['alpaca'].getPriceInUSD,
        },
    },
    // USDT
    {
        key: 'ws-alpaca-usdt',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.ALPACA_USDT.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_ALPACAUSDTLpTokenAddress,
        holderAddress: (_y = worker_1.mapWorkers['ws-alpaca-usdt']) === null || _y === void 0 ? void 0 : _y.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_ALPACAUSDTPoolId,
            lpTokenAddress: contracts_1.WS_ALPACAUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['usdt'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['usdt'].getPriceInUSD,
        },
    },
    {
        key: 'ws-wex-usdt',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.WEX_USDT.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_WEXUSDTLpTokenAddress,
        holderAddress: (_z = worker_1.mapWorkers['ws-wex-usdt']) === null || _z === void 0 ? void 0 : _z.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_WEXUSDTPoolId,
            lpTokenAddress: contracts_1.WS_WEXUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['usdt'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['usdt'].getPriceInUSD,
        },
    },
    {
        key: 'ws-busd-usdt',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.BUSD_USDT.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_USDTBUSDLpTokenAddress,
        holderAddress: (_0 = worker_1.mapWorkers['ws-busd-usdt']) === null || _0 === void 0 ? void 0 : _0.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_USDTBUSDPoolId,
            lpTokenAddress: contracts_1.WS_USDTBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['usdt'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['usdt'].getPriceInUSD,
        },
    },
    {
        key: 'ws-btcb-usdt',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.BTCB_USDT.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_BTCBUSDTLpTokenAddress,
        holderAddress: (_1 = worker_1.mapWorkers['ws-btcb-usdt']) === null || _1 === void 0 ? void 0 : _1.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_BTCBUSDTPoolId,
            lpTokenAddress: contracts_1.WS_BTCBUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['usdt'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['usdt'].getPriceInUSD,
        },
    },
    {
        key: 'ws-eth-usdt',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.ETH_USDT.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_ETHUSDTLpTokenAddress,
        holderAddress: (_2 = worker_1.mapWorkers['ws-eth-usdt']) === null || _2 === void 0 ? void 0 : _2.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_ETHUSDTPoolId,
            lpTokenAddress: contracts_1.WS_ETHUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['usdt'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['usdt'].getPriceInUSD,
        },
    },
    {
        key: 'ws-matic-usdt',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.MATIC_USDT.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_MATICUSDTLpTokenAddress,
        holderAddress: (_3 = worker_1.mapWorkers['ws-matic-usdt']) === null || _3 === void 0 ? void 0 : _3.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_MATICUSDTPoolId,
            lpTokenAddress: contracts_1.WS_MATICUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['usdt'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['usdt'].getPriceInUSD,
        },
    },
    {
        key: 'ws-tusd-usdt',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.TUSD_USDT.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_TUSDUSDTLpTokenAddress,
        holderAddress: (_4 = worker_1.mapWorkers['ws-tusd-usdt']) === null || _4 === void 0 ? void 0 : _4.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_TUSDUSDTPoolId,
            lpTokenAddress: contracts_1.WS_TUSDUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['usdt'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['usdt'].getPriceInUSD,
        },
    },
    // BTCB
    {
        key: 'ws-eth-btcb',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.ETH_BTCB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_ETHBTCBLpTokenAddress,
        holderAddress: (_5 = worker_1.mapWorkers['ws-eth-btcb']) === null || _5 === void 0 ? void 0 : _5.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_ETHBTCBPoolId,
            lpTokenAddress: contracts_1.WS_ETHBTCBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['btcb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['btcb'].getPriceInUSD,
        },
    },
    {
        key: 'ws-usdt-btcb',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.USDT_BTCB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_BTCBUSDTLpTokenAddress,
        holderAddress: (_6 = worker_1.mapWorkers['ws-usdt-btcb']) === null || _6 === void 0 ? void 0 : _6.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_BTCBUSDTPoolId,
            lpTokenAddress: contracts_1.WS_BTCBUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['btcb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['btcb'].getPriceInUSD,
        },
    },
    {
        key: 'ws-busd-btcb',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.BUSD_BTCB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_BTCBBUSDLpTokenAddress,
        holderAddress: (_7 = worker_1.mapWorkers['ws-busd-btcb']) === null || _7 === void 0 ? void 0 : _7.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_BTCBBUSDPoolId,
            lpTokenAddress: contracts_1.WS_BTCBBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['btcb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['btcb'].getPriceInUSD,
        },
    },
    // TUSD
    {
        key: 'ws-usdt-tusd',
        active: appConfig_1.appConfig.ActiveFarms.WaultSwap.workers.USDT_TUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WS_TUSDUSDTLpTokenAddress,
        holderAddress: (_8 = worker_1.mapWorkers['ws-usdt-tusd']) === null || _8 === void 0 ? void 0 : _8.address,
        farmingLpOptions: {
            dex: entity_1.WaultSwapDex,
            pancakeLpPoolId: pools_1.WS_TUSDUSDTPoolId,
            lpTokenAddress: contracts_1.WS_TUSDUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['tusd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['tusd'].getPriceInUSD,
        },
    },
];
const mdexDepositPools = [
    // USDT
    {
        key: 'ms-btcb-usdt',
        active: appConfig_1.appConfig.ActiveFarms.MdexSwap.workers.BTCB_USDT.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.MS_BTCBUSDTLpTokenAddress,
        holderAddress: (_9 = worker_1.mapWorkers['ms-btcb-usdt']) === null || _9 === void 0 ? void 0 : _9.address,
        farmingLpOptions: {
            dex: entity_1.MdexSwapDex,
            pancakeLpPoolId: pools_1.MS_BTCBUSDTPoolId,
            lpTokenAddress: contracts_1.MS_BTCBUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['usdt'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['usdt'].getPriceInUSD,
        },
    },
    {
        key: 'ms-bnb-usdt',
        active: appConfig_1.appConfig.ActiveFarms.MdexSwap.workers.BNB_USDT.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.MS_WBNBUSDTLpTokenAddress,
        holderAddress: (_10 = worker_1.mapWorkers['ms-bnb-usdt']) === null || _10 === void 0 ? void 0 : _10.address,
        farmingLpOptions: {
            dex: entity_1.MdexSwapDex,
            pancakeLpPoolId: pools_1.MS_WBNBUSDTPoolId,
            lpTokenAddress: contracts_1.MS_WBNBUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['usdt'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['usdt'].getPriceInUSD,
        },
    },
    {
        key: 'ms-eth-usdt',
        active: appConfig_1.appConfig.ActiveFarms.MdexSwap.workers.ETH_USDT.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.MS_ETHUSDTLpTokenAddress,
        holderAddress: (_11 = worker_1.mapWorkers['ms-eth-usdt']) === null || _11 === void 0 ? void 0 : _11.address,
        farmingLpOptions: {
            dex: entity_1.MdexSwapDex,
            pancakeLpPoolId: pools_1.MS_ETHUSDTPoolId,
            lpTokenAddress: contracts_1.MS_ETHUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['usdt'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['usdt'].getPriceInUSD,
        },
    },
    {
        key: 'ms-usdc-usdt',
        active: appConfig_1.appConfig.ActiveFarms.MdexSwap.workers.USDC_USDT.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.MS_USDCUSDTLpTokenAddress,
        holderAddress: (_12 = worker_1.mapWorkers['ms-usdc-usdt']) === null || _12 === void 0 ? void 0 : _12.address,
        farmingLpOptions: {
            dex: entity_1.MdexSwapDex,
            pancakeLpPoolId: pools_1.MS_USDCUSDTPoolId,
            lpTokenAddress: contracts_1.MS_USDCUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['usdt'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['usdt'].getPriceInUSD,
        },
    },
    {
        key: 'ms-dai-usdt',
        active: appConfig_1.appConfig.ActiveFarms.MdexSwap.workers.DAI_USDT.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.MS_DAIUSDTLpTokenAddress,
        holderAddress: (_13 = worker_1.mapWorkers['ms-dai-usdt']) === null || _13 === void 0 ? void 0 : _13.address,
        farmingLpOptions: {
            dex: entity_1.MdexSwapDex,
            pancakeLpPoolId: pools_1.MS_DAIUSDTPoolId,
            lpTokenAddress: contracts_1.MS_DAIUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['usdt'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['usdt'].getPriceInUSD,
        },
    },
    // BTCB
    {
        key: 'ms-usdt-btcb',
        active: appConfig_1.appConfig.ActiveFarms.MdexSwap.workers.USDT_BTCB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.MS_BTCBUSDTLpTokenAddress,
        holderAddress: (_14 = worker_1.mapWorkers['ms-usdt-btcb']) === null || _14 === void 0 ? void 0 : _14.address,
        farmingLpOptions: {
            dex: entity_1.MdexSwapDex,
            pancakeLpPoolId: pools_1.MS_BTCBUSDTPoolId,
            lpTokenAddress: contracts_1.MS_BTCBUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['btcb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['btcb'].getPriceInUSD,
        },
    },
    {
        key: 'ms-eth-btcb',
        active: appConfig_1.appConfig.ActiveFarms.MdexSwap.workers.ETH_BTCB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.MS_ETHBTCBLpTokenAddress,
        holderAddress: (_15 = worker_1.mapWorkers['ms-eth-btcb']) === null || _15 === void 0 ? void 0 : _15.address,
        farmingLpOptions: {
            dex: entity_1.MdexSwapDex,
            pancakeLpPoolId: pools_1.MS_ETHBTCBPoolId,
            lpTokenAddress: contracts_1.MS_ETHBTCBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['btcb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['btcb'].getPriceInUSD,
        },
    },
    {
        key: 'ms-bnb-btcb',
        active: appConfig_1.appConfig.ActiveFarms.MdexSwap.workers.BNB_BTCB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.MS_WBNBBTCBLpTokenAddress,
        holderAddress: (_16 = worker_1.mapWorkers['ms-bnb-btcb']) === null || _16 === void 0 ? void 0 : _16.address,
        farmingLpOptions: {
            dex: entity_1.MdexSwapDex,
            pancakeLpPoolId: pools_1.MS_WBNBBTCBPoolId,
            lpTokenAddress: contracts_1.MS_WBNBBTCBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['btcb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['btcb'].getPriceInUSD,
        },
    },
    // ETH
    {
        key: 'ms-usdt-eth',
        active: appConfig_1.appConfig.ActiveFarms.MdexSwap.workers.USDT_ETH.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.MS_ETHUSDTLpTokenAddress,
        holderAddress: (_17 = worker_1.mapWorkers['ms-usdt-eth']) === null || _17 === void 0 ? void 0 : _17.address,
        farmingLpOptions: {
            dex: entity_1.MdexSwapDex,
            pancakeLpPoolId: pools_1.MS_ETHUSDTPoolId,
            lpTokenAddress: contracts_1.MS_ETHUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['eth'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['eth'].getPriceInUSD,
        },
    },
    {
        key: 'ms-bnb-eth',
        active: appConfig_1.appConfig.ActiveFarms.MdexSwap.workers.BNB_ETH.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.MS_WBNBETHLpTokenAddress,
        holderAddress: (_18 = worker_1.mapWorkers['ms-bnb-eth']) === null || _18 === void 0 ? void 0 : _18.address,
        farmingLpOptions: {
            dex: entity_1.MdexSwapDex,
            pancakeLpPoolId: pools_1.MS_WBNBETHPoolId,
            lpTokenAddress: contracts_1.MS_WBNBETHLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['eth'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['eth'].getPriceInUSD,
        },
    },
    {
        key: 'ms-btcb-eth',
        active: appConfig_1.appConfig.ActiveFarms.MdexSwap.workers.BTCB_ETH.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.MS_ETHBTCBLpTokenAddress,
        holderAddress: (_19 = worker_1.mapWorkers['ms-btcb-eth']) === null || _19 === void 0 ? void 0 : _19.address,
        farmingLpOptions: {
            dex: entity_1.MdexSwapDex,
            pancakeLpPoolId: pools_1.MS_ETHBTCBPoolId,
            lpTokenAddress: contracts_1.MS_ETHBTCBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['eth'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['eth'].getPriceInUSD,
        },
    },
    // BNB
    {
        key: 'ms-mdx-bnb',
        active: appConfig_1.appConfig.ActiveFarms.MdexSwap.workers.MDX_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.MS_MDXWBNBLpTokenAddress,
        holderAddress: (_20 = worker_1.mapWorkers['ms-mdx-bnb']) === null || _20 === void 0 ? void 0 : _20.address,
        farmingLpOptions: {
            dex: entity_1.MdexSwapDex,
            pancakeLpPoolId: pools_1.MS_MDXWBNBPoolId,
            lpTokenAddress: contracts_1.MS_MDXWBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'ms-usdt-bnb',
        active: appConfig_1.appConfig.ActiveFarms.MdexSwap.workers.USDT_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.MS_WBNBUSDTLpTokenAddress,
        holderAddress: (_21 = worker_1.mapWorkers['ms-usdt-bnb']) === null || _21 === void 0 ? void 0 : _21.address,
        farmingLpOptions: {
            dex: entity_1.MdexSwapDex,
            pancakeLpPoolId: pools_1.MS_WBNBUSDTPoolId,
            lpTokenAddress: contracts_1.MS_WBNBUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'ms-eth-bnb',
        active: appConfig_1.appConfig.ActiveFarms.MdexSwap.workers.ETH_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.MS_WBNBETHLpTokenAddress,
        holderAddress: (_22 = worker_1.mapWorkers['ms-eth-bnb']) === null || _22 === void 0 ? void 0 : _22.address,
        farmingLpOptions: {
            dex: entity_1.MdexSwapDex,
            pancakeLpPoolId: pools_1.MS_WBNBETHPoolId,
            lpTokenAddress: contracts_1.MS_WBNBETHLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'ms-busd-bnb',
        active: appConfig_1.appConfig.ActiveFarms.MdexSwap.workers.BUSD_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.MS_WBNBBUSDLpTokenAddress,
        holderAddress: (_23 = worker_1.mapWorkers['ms-busd-bnb']) === null || _23 === void 0 ? void 0 : _23.address,
        farmingLpOptions: {
            dex: entity_1.MdexSwapDex,
            pancakeLpPoolId: pools_1.MS_WBNBBUSDPoolId,
            lpTokenAddress: contracts_1.MS_WBNBBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'ms-btcb-bnb',
        active: appConfig_1.appConfig.ActiveFarms.MdexSwap.workers.BTCB_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.MS_WBNBBTCBLpTokenAddress,
        holderAddress: (_24 = worker_1.mapWorkers['ms-btcb-bnb']) === null || _24 === void 0 ? void 0 : _24.address,
        farmingLpOptions: {
            dex: entity_1.MdexSwapDex,
            pancakeLpPoolId: pools_1.MS_WBNBBTCBPoolId,
            lpTokenAddress: contracts_1.MS_WBNBBTCBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    // BUSD
    {
        key: 'ms-mdx-busd',
        active: appConfig_1.appConfig.ActiveFarms.MdexSwap.workers.MDX_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.MS_MDXBUSDLpTokenAddress,
        holderAddress: (_25 = worker_1.mapWorkers['ms-mdx-busd']) === null || _25 === void 0 ? void 0 : _25.address,
        farmingLpOptions: {
            dex: entity_1.MdexSwapDex,
            pancakeLpPoolId: pools_1.MS_MDXBUSDPoolId,
            lpTokenAddress: contracts_1.MS_MDXBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'ms-bnb-busd',
        active: appConfig_1.appConfig.ActiveFarms.MdexSwap.workers.BNB_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.MS_WBNBBUSDLpTokenAddress,
        holderAddress: (_26 = worker_1.mapWorkers['ms-bnb-busd']) === null || _26 === void 0 ? void 0 : _26.address,
        farmingLpOptions: {
            dex: entity_1.MdexSwapDex,
            pancakeLpPoolId: pools_1.MS_WBNBBUSDPoolId,
            lpTokenAddress: contracts_1.MS_WBNBBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
];
const allDepositPools = [
    {
        key: 'ausd-busd-lp',
        active: true,
        isLp: true,
        stakingTokenAddress: contracts_1.AUSDBUSDLpTokenAddress,
        holderAddress: contracts_1.FairLaunchAddress,
        lpOptions: {
            lpTokenAddress: contracts_1.AUSDBUSDLpTokenAddress,
            baseTokenAddress: contracts_1.BUSDAddress,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'alpaca-wbnb-lp-v2',
        active: true,
        isLp: true,
        stakingTokenAddress: contracts_1.AlpacaBNBLpV2Address,
        holderAddress: contracts_1.FairLaunchAddress,
        lpOptions: {
            lpTokenAddress: contracts_1.AlpacaBNBLpV2Address,
            baseTokenAddress: contracts_1.WBNBAddress,
            getBaseTokenPrice: fiatPrice_1.getNativeTokenPrice,
        },
    },
    {
        key: 'alpaca-wbnb-lp',
        active: true,
        isLp: true,
        stakingTokenAddress: contracts_1.AlpacaBNBLpAddress,
        holderAddress: contracts_1.FairLaunchAddress,
        lpOptions: {
            lpTokenAddress: contracts_1.AlpacaBNBLpAddress,
            baseTokenAddress: contracts_1.WBNBAddress,
            getBaseTokenPrice: fiatPrice_1.getNativeTokenPrice,
        },
    },
    {
        key: 'ib-wbnb',
        active: true,
        isIb: true,
        stakingTokenAddress: contracts_1.BNBVaultAddress,
        holderAddress: contracts_1.BNBVaultAddress,
        ibOptions: {
            ibTokenAddress: contracts_1.BNBVaultAddress,
            getUnderlyingTokenPrice: fiatPrice_1.getNativeTokenPrice,
        },
    },
    {
        key: 'ib-busd',
        active: true,
        isIb: true,
        stakingTokenAddress: contracts_1.BUSDVaultAddress,
        holderAddress: contracts_1.BUSDVaultAddress,
        ibOptions: {
            ibTokenAddress: contracts_1.BUSDVaultAddress,
            getUnderlyingTokenPrice: () => fiatPrice_1.getTokenPrice('binance-usd'),
        },
    },
    {
        key: 'ib-eth',
        active: true,
        isIb: true,
        stakingTokenAddress: contracts_1.ETHVaultAddress,
        holderAddress: contracts_1.ETHVaultAddress,
        ibOptions: {
            ibTokenAddress: contracts_1.ETHVaultAddress,
            getUnderlyingTokenPrice: () => fiatPrice_1.getTokenPrice('ethereum'),
        },
    },
    {
        key: 'ib-alpaca',
        active: true,
        isIb: true,
        stakingTokenAddress: contracts_1.ALPACAVaultAddress,
        holderAddress: contracts_1.ALPACAVaultAddress,
        ibOptions: {
            ibTokenAddress: contracts_1.ALPACAVaultAddress,
            getUnderlyingTokenPrice: () => fiatPrice_1.getAlpacaPrice(),
        },
    },
    {
        key: 'ib-usdt',
        active: true,
        isIb: true,
        stakingTokenAddress: contracts_1.USDTVaultAddress,
        holderAddress: contracts_1.USDTVaultAddress,
        ibOptions: {
            ibTokenAddress: contracts_1.USDTVaultAddress,
            getUnderlyingTokenPrice: () => fiatPrice_1.getTokenPrice('tether'),
        },
    },
    {
        key: 'ib-btcb',
        active: true,
        isIb: true,
        stakingTokenAddress: contracts_1.BTCBVaultAddress,
        holderAddress: contracts_1.BTCBVaultAddress,
        ibOptions: {
            ibTokenAddress: contracts_1.BTCBVaultAddress,
            getUnderlyingTokenPrice: () => fiatPrice_1.getTokenPrice('bitcoin-bep2'),
        },
    },
    {
        key: 'ib-tusd',
        active: true,
        isIb: true,
        stakingTokenAddress: contracts_1.TUSDVaultAddress,
        holderAddress: contracts_1.TUSDVaultAddress,
        ibOptions: {
            ibTokenAddress: contracts_1.TUSDVaultAddress,
            getUnderlyingTokenPrice: () => fiatPrice_1.getTokenPrice('true-usd'),
        },
    },
    {
        key: 'ib-usdc',
        active: true,
        isIb: true,
        stakingTokenAddress: contracts_1.USDCVaultAddress,
        holderAddress: contracts_1.USDCVaultAddress,
        ibOptions: {
            ibTokenAddress: contracts_1.USDCVaultAddress,
            getUnderlyingTokenPrice: () => fiatPrice_1.getTokenPrice('usd-coin'),
        },
    },
    {
        key: 's-alpaca',
        active: true,
        isSingleTokenDeriveValueFromLP: true,
        stakingTokenAddress: contracts_1.StronkAlpacaAddress,
        holderAddress: contracts_1.FairLaunchAddress,
        singleTokenDeriveValueFromLPOptions: {
            derivingLpAddress: contracts_1.StronkAlpacaAlpacaLpAddress,
            derivingLpBaseTokenAddress: contracts_1.AlpacaTokenAddress,
            getDerivingLpBaseTokenPrice: fiatPrice_1.getAlpacaPrice,
        },
    },
    // BNB
    {
        key: 'pcs-cake-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.CAKE_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.CAKEWBNBLpTokenAddress,
        holderAddress: (_27 = worker_1.mapWorkers['pcs-cake-bnb']) === null || _27 === void 0 ? void 0 : _27.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeCAKEWBNBPoolId,
            lpTokenAddress: contracts_1.CAKEWBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-btcb-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BTCB_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.BTCBWBNBLpTokenAddress,
        holderAddress: (_28 = worker_1.mapWorkers['pcs-btcb-bnb']) === null || _28 === void 0 ? void 0 : _28.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeBTCBWBNBPoolId,
            lpTokenAddress: contracts_1.BTCBWBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-eth-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.ETH_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.ETHWBNBLpTokenAddress,
        holderAddress: (_29 = worker_1.mapWorkers['pcs-eth-bnb']) === null || _29 === void 0 ? void 0 : _29.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeETHWBNBPoolId,
            lpTokenAddress: contracts_1.ETHWBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-busd-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BUSD_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WBNBBUSDLpTokenAddress,
        holderAddress: (_30 = worker_1.mapWorkers['pcs-busd-bnb']) === null || _30 === void 0 ? void 0 : _30.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeWBNBBUSDPoolId,
            lpTokenAddress: contracts_1.WBNBBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-dot-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.DOT_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.DOTWBNBLpTokenAddress,
        holderAddress: (_31 = worker_1.mapWorkers['pcs-dot-bnb']) === null || _31 === void 0 ? void 0 : _31.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeDOTWBNBPoolId,
            lpTokenAddress: contracts_1.DOTWBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-uni-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.UNI_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.UNIWBNBLpTokenAddress,
        holderAddress: (_32 = worker_1.mapWorkers['pcs-uni-bnb']) === null || _32 === void 0 ? void 0 : _32.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeUNIWBNBPoolId,
            lpTokenAddress: contracts_1.UNIWBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-link-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.LINK_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.LINKWBNBLpTokenAddress,
        holderAddress: (_33 = worker_1.mapWorkers['pcs-link-bnb']) === null || _33 === void 0 ? void 0 : _33.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeLINKWBNBPoolId,
            lpTokenAddress: contracts_1.LINKWBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-xvs-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.XVS_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.XVSWBNBLpTokenAddress,
        holderAddress: (_34 = worker_1.mapWorkers['pcs-xvs-bnb']) === null || _34 === void 0 ? void 0 : _34.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeXVSWBNBPoolId,
            lpTokenAddress: contracts_1.XVSWBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-yfi-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.YFI_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.YFIWBNBLpTokenAddress,
        holderAddress: (_35 = worker_1.mapWorkers['pcs-yfi-bnb']) === null || _35 === void 0 ? void 0 : _35.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeYFIWBNBPoolId,
            lpTokenAddress: contracts_1.YFIWBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-bmxx-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BMXX_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.bMXXBNBLpTokenAddress,
        holderAddress: (_36 = worker_1.mapWorkers['pcs-bmxx-bnb']) === null || _36 === void 0 ? void 0 : _36.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeBMXXBNBPoolId,
            lpTokenAddress: contracts_1.bMXXBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-belt-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BELT_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.BELTBNBLpTokenAddress,
        holderAddress: (_37 = worker_1.mapWorkers['pcs-belt-bnb']) === null || _37 === void 0 ? void 0 : _37.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeBELTBNBPoolId,
            lpTokenAddress: contracts_1.BELTBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-bor-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BOR_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.BORBNBLpTokenAddress,
        holderAddress: (_38 = worker_1.mapWorkers['pcs-bor-bnb']) === null || _38 === void 0 ? void 0 : _38.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeBORBNBPoolId,
            lpTokenAddress: contracts_1.BORBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-bry-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BRY_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.BRYBNBLpTokenAddress,
        holderAddress: (_39 = worker_1.mapWorkers['pcs-bry-bnb']) === null || _39 === void 0 ? void 0 : _39.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeBRYBNBPoolId,
            lpTokenAddress: contracts_1.BRYBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-cws-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.CWS_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.PCWSBNBLpTokenAddress,
        holderAddress: (_40 = worker_1.mapWorkers['pcs-cws-bnb']) === null || _40 === void 0 ? void 0 : _40.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakePCWSBNBPoolId,
            lpTokenAddress: contracts_1.PCWSBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-swingby-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.SWINGBY_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.SWINGBYBNBLpTokenAddress,
        holderAddress: (_41 = worker_1.mapWorkers['pcs-swingby-bnb']) === null || _41 === void 0 ? void 0 : _41.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeSWINGBYBNBPoolId,
            lpTokenAddress: contracts_1.SWINGBYBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-dodo-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.DODO_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.DODOBNBLpTokenAddress,
        holderAddress: (_42 = worker_1.mapWorkers['pcs-dodo-bnb']) === null || _42 === void 0 ? void 0 : _42.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeDODOBNBPoolId,
            lpTokenAddress: contracts_1.DODOBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-itam-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.ITAM_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.ITAMBNBLpTokenAddress,
        holderAddress: (_43 = worker_1.mapWorkers['pcs-itam-bnb']) === null || _43 === void 0 ? void 0 : _43.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeITAMWBNBPoolId,
            lpTokenAddress: contracts_1.ITAMBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-usdt-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.USDT_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.USDTBNBLpTokenAddress,
        holderAddress: (_44 = worker_1.mapWorkers['pcs-usdt-bnb']) === null || _44 === void 0 ? void 0 : _44.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeUSDTBNBPoolId,
            lpTokenAddress: contracts_1.USDTBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-oddz-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.ODDZ_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.ODDZBNBLpTokenAddress,
        holderAddress: (_45 = worker_1.mapWorkers['pcs-oddz-bnb']) === null || _45 === void 0 ? void 0 : _45.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeODDZBNBPoolId,
            lpTokenAddress: contracts_1.ODDZBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-ada-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.ADA_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.ADABNBLpTokenAddress,
        holderAddress: (_46 = worker_1.mapWorkers['pcs-ada-bnb']) === null || _46 === void 0 ? void 0 : _46.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeADABNBPoolId,
            lpTokenAddress: contracts_1.ADABNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-trx-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.TRX_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.TRXBNBLpTokenAddress,
        holderAddress: (_47 = worker_1.mapWorkers['pcs-trx-bnb']) === null || _47 === void 0 ? void 0 : _47.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeTRXBNBPoolId,
            lpTokenAddress: contracts_1.TRXBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-btt-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BTT_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.BTTBNBLpTokenAddress,
        holderAddress: (_48 = worker_1.mapWorkers['pcs-btt-bnb']) === null || _48 === void 0 ? void 0 : _48.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeBTTBNBPoolId,
            lpTokenAddress: contracts_1.BTTBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-axs-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.AXS_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.AXSBNBLpTokenAddress,
        holderAddress: (_49 = worker_1.mapWorkers['pcs-axs-bnb']) === null || _49 === void 0 ? void 0 : _49.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeAXSBNBPoolId,
            lpTokenAddress: contracts_1.AXSBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-mbox-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.MBOX_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.MBOXBNBLpTokenAddress,
        holderAddress: (_50 = worker_1.mapWorkers['pcs-mbox-bnb']) === null || _50 === void 0 ? void 0 : _50.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeMBOXBNBPoolId,
            lpTokenAddress: contracts_1.MBOXBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-naos-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.NAOS_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.NAOSBNBLpTokenAddress,
        holderAddress: (_51 = worker_1.mapWorkers['pcs-naos-bnb']) === null || _51 === void 0 ? void 0 : _51.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeNAOSBNBPoolId,
            lpTokenAddress: contracts_1.NAOSBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-dvi-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.DVI_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.DVIBNBLpTokenAddress,
        holderAddress: (_52 = worker_1.mapWorkers['pcs-dvi-bnb']) === null || _52 === void 0 ? void 0 : _52.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeDVIBNBPoolId,
            lpTokenAddress: contracts_1.DVIBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-qbt-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.QBT_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.QBTBNBLpTokenAddress,
        holderAddress: (_53 = worker_1.mapWorkers['pcs-qbt-bnb']) === null || _53 === void 0 ? void 0 : _53.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeQBTBNBPoolId,
            lpTokenAddress: contracts_1.QBTBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-bmon-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BMON_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.BMONBNBLpTokenAddress,
        holderAddress: (_54 = worker_1.mapWorkers['pcs-bmon-bnb']) === null || _54 === void 0 ? void 0 : _54.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeBMONBNBPoolId,
            lpTokenAddress: contracts_1.BMONBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-sps-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.SPS_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.SPSBNBLpTokenAddress,
        holderAddress: (_55 = worker_1.mapWorkers['pcs-sps-bnb']) === null || _55 === void 0 ? void 0 : _55.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeSPSBNBPoolId,
            lpTokenAddress: contracts_1.SPSBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-eternal-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.ETERNAL_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.ETERNALBNBLpTokenAddress,
        holderAddress: (_56 = worker_1.mapWorkers['pcs-eternal-bnb']) === null || _56 === void 0 ? void 0 : _56.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeETERNALBNBPoolId,
            lpTokenAddress: contracts_1.ETERNALBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-thg-bnb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.THG_BNB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.THGBNBLpTokenAddress,
        holderAddress: (_57 = worker_1.mapWorkers['pcs-thg-bnb']) === null || _57 === void 0 ? void 0 : _57.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeTHGBNBPoolId,
            lpTokenAddress: contracts_1.THGBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['bnb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['bnb'].getPriceInUSD,
        },
    },
    // BUSD
    {
        key: 'pcs-vai-busd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.VAI_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.VAIBUSDLpTokenAddress,
        holderAddress: (_58 = worker_1.mapWorkers['pcs-vai-busd']) === null || _58 === void 0 ? void 0 : _58.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeVAIBUSDPoolId,
            lpTokenAddress: contracts_1.VAIBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-dai-busd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.DAI_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.DAIBUSDLpTokenAddress,
        holderAddress: (_59 = worker_1.mapWorkers['pcs-dai-busd']) === null || _59 === void 0 ? void 0 : _59.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeDAIBUSDPoolId,
            lpTokenAddress: contracts_1.DAIBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-usdc-busd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.USDC_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.USDCBUSDLpTokenAddress,
        holderAddress: (_60 = worker_1.mapWorkers['pcs-usdc-busd']) === null || _60 === void 0 ? void 0 : _60.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeUSDCBUSDPoolId,
            lpTokenAddress: contracts_1.USDCBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-ust-busd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.UST_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.USTBUSDLpTokenAddress,
        holderAddress: (_61 = worker_1.mapWorkers['pcs-ust-busd']) === null || _61 === void 0 ? void 0 : _61.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeUSTBUSDPoolId,
            lpTokenAddress: contracts_1.USTBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-alpaca-busd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.ALPACA_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.ALPACABUSDLpTokenAddress,
        holderAddress: (_62 = worker_1.mapWorkers['pcs-alpaca-busd']) === null || _62 === void 0 ? void 0 : _62.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeBUSDALPACAPoolId,
            lpTokenAddress: contracts_1.ALPACABUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-btcb-busd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BTCB_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.BTCBBUSDLpTokenAddress,
        holderAddress: (_63 = worker_1.mapWorkers['pcs-btcb-busd']) === null || _63 === void 0 ? void 0 : _63.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeBTCBBUSDPoolId,
            lpTokenAddress: contracts_1.BTCBBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-usdt-busd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.USDT_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.USDTBUSDLpTokenAddress,
        holderAddress: (_64 = worker_1.mapWorkers['pcs-usdt-busd']) === null || _64 === void 0 ? void 0 : _64.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeUSDTBUSDPoolId,
            lpTokenAddress: contracts_1.USDTBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-bnb-busd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BNB_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.WBNBBUSDLpTokenAddress,
        holderAddress: (_65 = worker_1.mapWorkers['pcs-bnb-busd']) === null || _65 === void 0 ? void 0 : _65.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeWBNBBUSDPoolId,
            lpTokenAddress: contracts_1.WBNBBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-cake-busd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.CAKE_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.CAKEBUSDLpTokenAddress,
        holderAddress: (_66 = worker_1.mapWorkers['pcs-cake-busd']) === null || _66 === void 0 ? void 0 : _66.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeCAKEBUSDPoolId,
            lpTokenAddress: contracts_1.CAKEBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-form-busd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.FORM_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.FORMBUSDLpTokenAddress,
        holderAddress: (_67 = worker_1.mapWorkers['pcs-form-busd']) === null || _67 === void 0 ? void 0 : _67.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeFORMBUSDPoolId,
            lpTokenAddress: contracts_1.FORMBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-tusd-busd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.TUSD_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.TUSDBUSDLpTokenAddress,
        holderAddress: (_68 = worker_1.mapWorkers['pcs-tusd-busd']) === null || _68 === void 0 ? void 0 : _68.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeTUSDBUSDPoolId,
            lpTokenAddress: contracts_1.TUSDBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-orbs-busd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.ORBS_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.ORBSBUSDLpTokenAddress,
        holderAddress: (_69 = worker_1.mapWorkers['pcs-orbs-busd']) === null || _69 === void 0 ? void 0 : _69.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeORBSBUSDPoolId,
            lpTokenAddress: contracts_1.ORBSBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-trx-busd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.TRX_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.TRXBUSDLpTokenAddress,
        holderAddress: (_70 = worker_1.mapWorkers['pcs-trx-busd']) === null || _70 === void 0 ? void 0 : _70.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeTRXBUSDPoolId,
            lpTokenAddress: contracts_1.TRXBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-btt-busd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BTT_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.BTTBUSDLpTokenAddress,
        holderAddress: (_71 = worker_1.mapWorkers['pcs-btt-busd']) === null || _71 === void 0 ? void 0 : _71.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeBTTBUSDPoolId,
            lpTokenAddress: contracts_1.BTTBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-pmon-busd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.PMON_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.PMONBUSDLpTokenAddress,
        holderAddress: (_72 = worker_1.mapWorkers['pcs-pmon-busd']) === null || _72 === void 0 ? void 0 : _72.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakePMONBUSDPoolId,
            lpTokenAddress: contracts_1.PMONBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-pha-busd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.PHA_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.PHABUSDLpTokenAddress,
        holderAddress: (_73 = worker_1.mapWorkers['pcs-pha-busd']) === null || _73 === void 0 ? void 0 : _73.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakePHABUSDPoolId,
            lpTokenAddress: contracts_1.PHABUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-pots-busd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.POTS_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.POTSBUSDLpTokenAddress,
        holderAddress: (_74 = worker_1.mapWorkers['pcs-pots-busd']) === null || _74 === void 0 ? void 0 : _74.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakePOTSBUSDPoolId,
            lpTokenAddress: contracts_1.POTSBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-bmon-busd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BMON_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.BMONBUSDLpTokenAddress,
        holderAddress: (_75 = worker_1.mapWorkers['pcs-bmon-busd']) === null || _75 === void 0 ? void 0 : _75.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeBMONBUSDPoolId,
            lpTokenAddress: contracts_1.BMONBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-high-busd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.HIGH_BUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.HIGHBUSDLpTokenAddress,
        holderAddress: (_76 = worker_1.mapWorkers['pcs-high-busd']) === null || _76 === void 0 ? void 0 : _76.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeHIGHBUSDPoolId,
            lpTokenAddress: contracts_1.HIGHBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['busd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['busd'].getPriceInUSD,
        },
    },
    // ETH
    {
        key: 'pcs-beth-eth',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BETH_ETH.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.BETHETHLpTokenAddress,
        holderAddress: (_77 = worker_1.mapWorkers['pcs-beth-eth']) === null || _77 === void 0 ? void 0 : _77.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeBETHETHPoolId,
            lpTokenAddress: contracts_1.BETHETHLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['eth'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['eth'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-comp-eth',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.COMP_ETH.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.COMPETHLpTokenAddress,
        holderAddress: (_78 = worker_1.mapWorkers['pcs-comp-eth']) === null || _78 === void 0 ? void 0 : _78.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeCOMPETHPoolId,
            lpTokenAddress: contracts_1.COMPETHLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['eth'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['eth'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-sushi-eth',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.SUSHI_ETH.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.SUSHIETHLpTokenAddress,
        holderAddress: (_79 = worker_1.mapWorkers['pcs-sushi-eth']) === null || _79 === void 0 ? void 0 : _79.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeSUSHIETHPoolId,
            lpTokenAddress: contracts_1.SUSHIETHLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['eth'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['eth'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-bnb-eth',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BNB_ETH.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.ETHWBNBLpTokenAddress,
        holderAddress: (_80 = worker_1.mapWorkers['pcs-bnb-eth']) === null || _80 === void 0 ? void 0 : _80.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeETHWBNBPoolId,
            lpTokenAddress: contracts_1.ETHWBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['eth'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['eth'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-btcb-eth',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BTCB_ETH.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.ETHBTCBLpTokenAddress,
        holderAddress: (_81 = worker_1.mapWorkers['pcs-btcb-eth']) === null || _81 === void 0 ? void 0 : _81.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeETHBTCBPoolId,
            lpTokenAddress: contracts_1.ETHBTCBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['eth'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['eth'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-usdc-eth',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.USDC_ETH.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.ETHUSDCLpTokenAddress,
        holderAddress: (_82 = worker_1.mapWorkers['pcs-usdc-eth']) === null || _82 === void 0 ? void 0 : _82.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeETHUSDCPoolId,
            lpTokenAddress: contracts_1.ETHUSDCLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['eth'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['eth'].getPriceInUSD,
        },
    },
    // ALPACA
    {
        key: 'pcs-busd-alpaca',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BUSD_ALPACA.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.ALPACABUSDLpTokenAddress,
        holderAddress: (_83 = worker_1.mapWorkers['pcs-busd-alpaca']) === null || _83 === void 0 ? void 0 : _83.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeBUSDALPACAPoolId,
            lpTokenAddress: contracts_1.ALPACABUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['alpaca'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['alpaca'].getPriceInUSD,
        },
    },
    // USDT
    {
        key: 'pcs-bnb-usdt',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BNB_USDT.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.USDTBNBLpTokenAddress,
        holderAddress: (_84 = worker_1.mapWorkers['pcs-bnb-usdt']) === null || _84 === void 0 ? void 0 : _84.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeUSDTBNBPoolId,
            lpTokenAddress: contracts_1.USDTBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['usdt'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['usdt'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-busd-usdt',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BUSD_USDT.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.USDTBUSDLpTokenAddress,
        holderAddress: (_85 = worker_1.mapWorkers['pcs-busd-usdt']) === null || _85 === void 0 ? void 0 : _85.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeUSDTBUSDPoolId,
            lpTokenAddress: contracts_1.USDTBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['usdt'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['usdt'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-cake-usdt',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.CAKE_USDT.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.CAKEUSDTLpTokenAddress,
        holderAddress: (_86 = worker_1.mapWorkers['pcs-cake-usdt']) === null || _86 === void 0 ? void 0 : _86.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeCAKEUSDTPoolId,
            lpTokenAddress: contracts_1.CAKEUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['usdt'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['usdt'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-usdc-usdt',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.USDC_USDT.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.USDCUSDTLpTokenAddress,
        holderAddress: (_87 = worker_1.mapWorkers['pcs-usdc-usdt']) === null || _87 === void 0 ? void 0 : _87.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeUSDCUSDTPoolId,
            lpTokenAddress: contracts_1.USDCUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['usdt'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['usdt'].getPriceInUSD,
        },
    },
    // BTCB
    {
        key: 'pcs-bnb-btcb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BNB_BTCB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.BTCBWBNBLpTokenAddress,
        holderAddress: (_88 = worker_1.mapWorkers['pcs-bnb-btcb']) === null || _88 === void 0 ? void 0 : _88.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeBTCBWBNBPoolId,
            lpTokenAddress: contracts_1.BTCBWBNBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['btcb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['btcb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-busd-btcb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BUSD_BTCB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.BTCBBUSDLpTokenAddress,
        holderAddress: (_89 = worker_1.mapWorkers['pcs-busd-btcb']) === null || _89 === void 0 ? void 0 : _89.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeBTCBBUSDPoolId,
            lpTokenAddress: contracts_1.BTCBBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['btcb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['btcb'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-eth-btcb',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.ETH_BTCB.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.ETHBTCBLpTokenAddress,
        holderAddress: (_90 = worker_1.mapWorkers['pcs-eth-btcb']) === null || _90 === void 0 ? void 0 : _90.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeETHBTCBPoolId,
            lpTokenAddress: contracts_1.ETHBTCBLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['btcb'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['btcb'].getPriceInUSD,
        },
    },
    // TUSD
    {
        key: 'pcs-busd-tusd',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.BUSD_TUSD.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.TUSDBUSDLpTokenAddress,
        holderAddress: (_91 = worker_1.mapWorkers['pcs-busd-tusd']) === null || _91 === void 0 ? void 0 : _91.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeTUSDBUSDPoolId,
            lpTokenAddress: contracts_1.TUSDBUSDLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['tusd'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['tusd'].getPriceInUSD,
        },
    },
    // USDC
    {
        key: 'pcs-eth-usdc',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.ETH_USDC.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.ETHUSDCLpTokenAddress,
        holderAddress: (_92 = worker_1.mapWorkers['pcs-eth-usdc']) === null || _92 === void 0 ? void 0 : _92.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeETHUSDCPoolId,
            lpTokenAddress: contracts_1.ETHUSDCLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['usdc'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['usdc'].getPriceInUSD,
        },
    },
    {
        key: 'pcs-usdt-usdc',
        active: appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers.USDT_USDC.activeWorker,
        isFarmingLp: true,
        stakingTokenAddress: contracts_1.USDCUSDTLpTokenAddress,
        holderAddress: (_93 = worker_1.mapWorkers['pcs-usdt-usdc']) === null || _93 === void 0 ? void 0 : _93.address,
        farmingLpOptions: {
            dex: entity_1.PancakeSwapDex,
            pancakeLpPoolId: pools_1.PancakeUSDCUSDTPoolId,
            lpTokenAddress: contracts_1.USDCUSDTLpTokenAddress,
            baseTokenAddress: tokenProfile_1.mapTokenProfiles['usdc'].address,
            getBaseTokenPrice: tokenProfile_1.mapTokenProfiles['usdc'].getPriceInUSD,
        },
    },
    ...waultExDepositPools,
    ...singleAssetDepositPools,
    ...mdexDepositPools,
];
exports.depositPools = allDepositPools.filter((o) => o.active);
