"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWorkerByAddress = exports.mapWorkers = exports.workers = void 0;
const entity_1 = require("../entity");
const tokenProfile_1 = require("./tokenProfile");
const contracts_1 = require("./contracts");
const address_1 = require("../utils/address");
const appConfig_1 = require("./appConfig");
function parseStrategyAddress(strategies) {
    return {
        strategyAddTwoSidesOptimalAddress: strategies.StrategyAddTwoSidesOptimal,
        strategyAddAllBaseTokenAddress: strategies.StrategyAddAllBaseToken,
        strategyLiquidateAddress: strategies.StrategyLiquidate,
        strategyWithdrawMinimizeTrading: strategies.StrategyWithdrawMinimizeTrading,
        strategyPartialCloseLiquidate: strategies.StrategyPartialCloseLiquidate,
        strategyPartialCloseMinimizeTrading: strategies.StrategyPartialCloseMinimizeTrading,
    };
}
const pancakeSwapWorkers = appConfig_1.appConfig.ActiveFarms.PancakeSwap.workers;
const waultSwapWorkers = appConfig_1.appConfig.ActiveFarms.WaultSwap.workers;
const mdexSwapWorkers = appConfig_1.appConfig.ActiveFarms.MdexSwap.workers;
const pancakeLpWorkers = [
    // BNB
    {
        key: 'pcs-cake-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['cake'],
        },
        active: pancakeSwapWorkers.CAKE_BNB.activeWorker,
        address: contracts_1.CAKEBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.CAKEBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.CAKEBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-btcb-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['btcb'],
        },
        active: pancakeSwapWorkers.BTCB_BNB.activeWorker,
        address: contracts_1.BTCBBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BTCBBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BTCBBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-eth-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['eth'],
        },
        active: pancakeSwapWorkers.ETH_BNB.activeWorker,
        address: contracts_1.ETHBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.ETHBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.ETHBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-dot-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['dot'],
        },
        active: pancakeSwapWorkers.DOT_BNB.activeWorker,
        address: contracts_1.DOTBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.DOTBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.DOTBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-uni-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['uni'],
        },
        active: pancakeSwapWorkers.UNI_BNB.activeWorker,
        address: contracts_1.UNIBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.UNIBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.UNIBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-link-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['link'],
        },
        active: pancakeSwapWorkers.LINK_BNB.activeWorker,
        address: contracts_1.LINKBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.LINKBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.LINKBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-xvs-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['xvs'],
        },
        active: pancakeSwapWorkers.XVS_BNB.activeWorker,
        address: contracts_1.XVSBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.XVSBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.XVSBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-yfi-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['yfi'],
        },
        active: pancakeSwapWorkers.YFI_BNB.activeWorker,
        address: contracts_1.YFIBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.YFIBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.YFIBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-itam-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['itam'],
        },
        active: pancakeSwapWorkers.ITAM_BNB.activeWorker,
        address: contracts_1.ITAMBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.ITAMBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.ITAMBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-bmxx-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['bmxx'],
        },
        active: pancakeSwapWorkers.BMXX_BNB.activeWorker,
        address: contracts_1.BMXXBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BMXXBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BMXXBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-belt-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['belt'],
        },
        active: pancakeSwapWorkers.BELT_BNB.activeWorker,
        address: contracts_1.BELTBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BELTBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BELTBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-bor-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['bor'],
        },
        active: pancakeSwapWorkers.BOR_BNB.activeWorker,
        address: contracts_1.BORBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BORBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BORBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-bry-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['bry'],
        },
        active: pancakeSwapWorkers.BRY_BNB.activeWorker,
        address: contracts_1.BRYBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BRYBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BRYBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-cws-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['cws'],
        },
        active: pancakeSwapWorkers.CWS_BNB.activeWorker,
        address: contracts_1.PCWSBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.PCWSBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.PCWSBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-swingby-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['swingby'],
        },
        active: pancakeSwapWorkers.SWINGBY_BNB.activeWorker,
        address: contracts_1.SWINGBYBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.SWINGBYBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.SWINGBYBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-dodo-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['dodo'],
        },
        active: pancakeSwapWorkers.DODO_BNB.activeWorker,
        address: contracts_1.DODOBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.DODOBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.DODOBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-busd-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['busd'],
        },
        active: pancakeSwapWorkers.BUSD_BNB.activeWorker,
        address: contracts_1.BUSDBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BUSDBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BUSDBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-usdt-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['usdt'],
        },
        active: pancakeSwapWorkers.USDT_BNB.activeWorker,
        address: contracts_1.USDTBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.USDTBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.USDTBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-oddz-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['oddz'],
        },
        active: pancakeSwapWorkers.ODDZ_BNB.activeWorker,
        address: contracts_1.ODDZBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.ODDZBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.ODDZBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-ada-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['ada'],
        },
        active: pancakeSwapWorkers.ADA_BNB.activeWorker,
        address: contracts_1.ADABNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.ADABNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.ADABNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-trx-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['trx'],
        },
        active: pancakeSwapWorkers.TRX_BNB.activeWorker,
        address: contracts_1.TRXBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.TRXBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.TRXBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-btt-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['btt'],
        },
        active: pancakeSwapWorkers.BTT_BNB.activeWorker,
        address: contracts_1.BTTBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BTTBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BTTBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-axs-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['axs'],
        },
        active: pancakeSwapWorkers.AXS_BNB.activeWorker,
        address: contracts_1.AXSBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.AXSBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.AXSBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-mbox-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['mbox'],
        },
        active: pancakeSwapWorkers.MBOX_BNB.activeWorker,
        address: contracts_1.MBOXBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.MBOXBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.MBOXBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-naos-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['naos'],
        },
        active: pancakeSwapWorkers.NAOS_BNB.activeWorker,
        address: contracts_1.NAOSBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.NAOSBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.NAOSBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-dvi-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['dvi'],
        },
        active: pancakeSwapWorkers.DVI_BNB.activeWorker,
        address: contracts_1.DVIBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.DVIBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.DVIBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-qbt-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['qbt'],
        },
        active: pancakeSwapWorkers.QBT_BNB.activeWorker,
        address: contracts_1.QBTBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.QBTBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.QBTBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-bmon-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['bmon'],
        },
        active: pancakeSwapWorkers.BMON_BNB.activeWorker,
        address: contracts_1.BMONBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BMONBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BMONBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-sps-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['sps'],
        },
        active: pancakeSwapWorkers.SPS_BNB.activeWorker,
        address: contracts_1.SPSBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.SPSBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.SPSBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-eternal-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['eternal'],
        },
        active: pancakeSwapWorkers.ETERNAL_BNB.activeWorker,
        address: contracts_1.ETERNALBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.ETERNALBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.ETERNALBNBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-thg-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['thg'],
        },
        active: pancakeSwapWorkers.THG_BNB.activeWorker,
        address: contracts_1.THGBNBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.THGBNBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.THGBNBPancakeswapWorkerConfig,
    },
    // BUSD
    {
        key: 'pcs-btcb-busd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['btcb'],
        },
        active: pancakeSwapWorkers.BTCB_BUSD.activeWorker,
        address: contracts_1.BTCBBUSDPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BTCBBUSDPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BTCBBUSDPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-usdt-busd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['usdt'],
        },
        active: pancakeSwapWorkers.USDT_BUSD.activeWorker,
        address: contracts_1.USDTBUSDPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.USDTBUSDPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.USDTBUSDPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-bnb-busd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['bnb'],
        },
        active: pancakeSwapWorkers.BNB_BUSD.activeWorker,
        address: contracts_1.BNBBUSDPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BNBBUSDPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BNBBUSDPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-vai-busd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['vai'],
        },
        active: pancakeSwapWorkers.VAI_BUSD.activeWorker,
        address: contracts_1.VAIBUSDPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.VAIBUSDPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.VAIBUSDPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-usdc-busd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['usdc'],
        },
        active: pancakeSwapWorkers.USDC_BUSD.activeWorker,
        address: contracts_1.USDCBUSDPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.USDCBUSDPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.USDCBUSDPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-dai-busd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['dai'],
        },
        active: pancakeSwapWorkers.DAI_BUSD.activeWorker,
        address: contracts_1.DAIBUSDPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.DAIBUSDPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.DAIBUSDPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-ust-busd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['ust'],
        },
        active: pancakeSwapWorkers.UST_BUSD.activeWorker,
        address: contracts_1.USTBUSDPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.USTBUSDPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.USTBUSDPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-alpaca-busd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['alpaca'],
        },
        active: pancakeSwapWorkers.ALPACA_BUSD.activeWorker,
        address: contracts_1.ALPACABUSDPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.ALPACABUSDPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.ALPACABUSDPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-cake-busd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['cake'],
        },
        active: pancakeSwapWorkers.CAKE_BUSD.activeWorker,
        address: contracts_1.CAKEBUSDPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.CAKEBUSDPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.CAKEBUSDPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-form-busd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['form'],
        },
        active: pancakeSwapWorkers.FORM_BUSD.activeWorker,
        address: contracts_1.FORMBUSDPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.FORMBUSDPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.FORMBUSDPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-tusd-busd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['tusd'],
        },
        active: pancakeSwapWorkers.TUSD_BUSD.activeWorker,
        address: contracts_1.TUSDBUSDPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.TUSDBUSDPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.TUSDBUSDPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-orbs-busd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['orbs'],
        },
        active: pancakeSwapWorkers.ORBS_BUSD.activeWorker,
        address: contracts_1.ORBSBUSDPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.ORBSBUSDPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.ORBSBUSDPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-trx-busd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['trx'],
        },
        active: pancakeSwapWorkers.TRX_BUSD.activeWorker,
        address: contracts_1.TRXBUSDPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.TRXBUSDPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.TRXBUSDPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-btt-busd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['btt'],
        },
        active: pancakeSwapWorkers.BTT_BUSD.activeWorker,
        address: contracts_1.BTTBUSDPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BTTBUSDPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BTTBUSDPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-pmon-busd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['pmon'],
        },
        active: pancakeSwapWorkers.PMON_BUSD.activeWorker,
        address: contracts_1.PMONBUSDPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.PMONBUSDPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.PMONBUSDPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-pha-busd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['pha'],
        },
        active: pancakeSwapWorkers.PHA_BUSD.activeWorker,
        address: contracts_1.PHABUSDPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.PHABUSDPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.PHABUSDPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-pots-busd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['pots'],
        },
        active: pancakeSwapWorkers.POTS_BUSD.activeWorker,
        address: contracts_1.POTSBUSDPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.POTSBUSDPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.POTSBUSDPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-bmon-busd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['bmon'],
        },
        active: pancakeSwapWorkers.BMON_BUSD.activeWorker,
        address: contracts_1.BMONBUSDPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BMONBUSDPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BMONBUSDPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-high-busd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['high'],
        },
        active: pancakeSwapWorkers.HIGH_BUSD.activeWorker,
        address: contracts_1.HIGHBUSDPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.HIGHBUSDPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.HIGHBUSDPancakeswapWorkerConfig,
    },
    // ETH
    {
        key: 'pcs-beth-eth',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['eth'],
            farmingToken: tokenProfile_1.mapTokenProfiles['beth'],
        },
        active: pancakeSwapWorkers.BETH_ETH.activeWorker,
        address: contracts_1.BETHETHPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BETHETHPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BETHETHPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-comp-eth',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['eth'],
            farmingToken: tokenProfile_1.mapTokenProfiles['comp'],
        },
        active: pancakeSwapWorkers.COMP_ETH.activeWorker,
        address: contracts_1.COMPETHPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.COMPETHPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.COMPETHPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-sushi-eth',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['eth'],
            farmingToken: tokenProfile_1.mapTokenProfiles['sushi'],
        },
        active: pancakeSwapWorkers.SUSHI_ETH.activeWorker,
        address: contracts_1.SUSHIETHPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.SUSHIETHPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.SUSHIETHPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-bnb-eth',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['eth'],
            farmingToken: tokenProfile_1.mapTokenProfiles['bnb'],
        },
        active: pancakeSwapWorkers.BNB_ETH.activeWorker,
        address: contracts_1.BNBETHPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BNBETHPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BNBETHPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-btcb-eth',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['eth'],
            farmingToken: tokenProfile_1.mapTokenProfiles['btcb'],
        },
        active: pancakeSwapWorkers.BTCB_ETH.activeWorker,
        address: contracts_1.BTCBETHPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BTCBETHPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BTCBETHPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-usdc-eth',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['eth'],
            farmingToken: tokenProfile_1.mapTokenProfiles['usdc'],
        },
        active: pancakeSwapWorkers.USDC_ETH.activeWorker,
        address: contracts_1.USDCETHPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.USDCETHPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.USDCETHPancakeswapWorkerConfig,
    },
    // ALPACA
    {
        key: 'pcs-busd-alpaca',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['alpaca'],
            farmingToken: tokenProfile_1.mapTokenProfiles['busd'],
        },
        active: pancakeSwapWorkers.BUSD_ALPACA.activeWorker,
        address: contracts_1.BUSDALPACAPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BUSDALPACAPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BUSDALPACAPancakeswapWorkerConfig,
    },
    // USDT
    {
        key: 'pcs-bnb-usdt',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['usdt'],
            farmingToken: tokenProfile_1.mapTokenProfiles['bnb'],
        },
        active: pancakeSwapWorkers.BNB_USDT.activeWorker,
        address: contracts_1.BNBUSDTPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BNBUSDTPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BNBUSDTPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-busd-usdt',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['usdt'],
            farmingToken: tokenProfile_1.mapTokenProfiles['busd'],
        },
        active: pancakeSwapWorkers.BUSD_USDT.activeWorker,
        address: contracts_1.BUSDUSDTPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BUSDUSDTPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BUSDUSDTPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-cake-usdt',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['usdt'],
            farmingToken: tokenProfile_1.mapTokenProfiles['cake'],
        },
        active: pancakeSwapWorkers.CAKE_USDT.activeWorker,
        address: contracts_1.CAKEUSDTPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.CAKEUSDTPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.CAKEUSDTPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-usdc-usdt',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['usdt'],
            farmingToken: tokenProfile_1.mapTokenProfiles['usdc'],
        },
        active: pancakeSwapWorkers.USDC_USDT.activeWorker,
        address: contracts_1.USDCUSDTPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.USDCUSDTPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.USDCUSDTPancakeswapWorkerConfig,
    },
    // BTCB
    {
        key: 'pcs-bnb-btcb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['btcb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['bnb'],
        },
        active: pancakeSwapWorkers.BNB_BTCB.activeWorker,
        address: contracts_1.BNBBTCBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BNBBTCBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BNBBTCBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-busd-btcb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['btcb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['busd'],
        },
        active: pancakeSwapWorkers.BUSD_BTCB.activeWorker,
        address: contracts_1.BUSDBTCBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BUSDBTCBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BUSDBTCBPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-eth-btcb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['btcb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['eth'],
        },
        active: pancakeSwapWorkers.ETH_BTCB.activeWorker,
        address: contracts_1.ETHBTCBPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.ETHBTCBPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.ETHBTCBPancakeswapWorkerConfig,
    },
    // TUSD
    {
        key: 'pcs-busd-tusd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['tusd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['busd'],
        },
        active: pancakeSwapWorkers.BUSD_TUSD.activeWorker,
        address: contracts_1.BUSDTUSDPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BUSDTUSDPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.BUSDTUSDPancakeswapWorkerConfig,
    },
    // USDC
    {
        key: 'pcs-eth-usdc',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['usdc'],
            farmingToken: tokenProfile_1.mapTokenProfiles['eth'],
        },
        active: pancakeSwapWorkers.ETH_USDC.activeWorker,
        address: contracts_1.ETHUSDCPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.ETHUSDCPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.ETHUSDCPancakeswapWorkerConfig,
    },
    {
        key: 'pcs-usdt-usdc',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['usdc'],
            farmingToken: tokenProfile_1.mapTokenProfiles['usdt'],
        },
        active: pancakeSwapWorkers.USDT_USDC.activeWorker,
        address: contracts_1.USDTUSDCPancakeswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.USDTUSDCPancakeswapWorkerStrategies),
        workerConfigAddress: contracts_1.USDTUSDCPancakeswapWorkerConfig,
    },
];
const waultlpWorkers = [
    // BNB
    {
        key: 'ws-wex-bnb',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['wex'],
        },
        active: waultSwapWorkers.WEX_BNB.activeWorker,
        address: contracts_1.WEXBNBWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.WEXBNBWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.WEXBNBWaultswapWorkerConfig,
    },
    {
        key: 'ws-busd-bnb',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['busd'],
        },
        active: waultSwapWorkers.BUSD_BNB.activeWorker,
        address: contracts_1.BUSDBNBWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BUSDBNBWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.BUSDBNBWaultswapWorkerConfig,
    },
    {
        key: 'ws-alpaca-bnb',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['alpaca'],
        },
        active: waultSwapWorkers.ALPACA_BNB.activeWorker,
        address: contracts_1.ALPACABNBWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.ALPACABNBWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.ALPACABNBWaultswapWorkerConfig,
    },
    {
        key: 'ws-waultx-bnb',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['waultx'],
        },
        active: waultSwapWorkers.WAULTX_BNB.activeWorker,
        address: contracts_1.WAULTXBNBWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.WAULTXBNBWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.WAULTXBNBWaultswapWorkerConfig,
    },
    // BUSD
    {
        key: 'ws-eth-busd',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['eth'],
        },
        active: waultSwapWorkers.ETH_BUSD.activeWorker,
        address: contracts_1.ETHBUSDWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.ETHBUSDWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.ETHBUSDWaultswapWorkerConfig,
    },
    {
        key: 'ws-bnb-busd',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['bnb'],
        },
        active: waultSwapWorkers.BNB_BUSD.activeWorker,
        address: contracts_1.BNBBUSDWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BNBBUSDWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.BNBBUSDWaultswapWorkerConfig,
    },
    {
        key: 'ws-usdt-busd',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['usdt'],
        },
        active: waultSwapWorkers.USDT_BUSD.activeWorker,
        address: contracts_1.USDTBUSDWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.USDTBUSDWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.USDTBUSDWaultswapWorkerConfig,
    },
    {
        key: 'ws-btcb-busd',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['btcb'],
        },
        active: waultSwapWorkers.BTCB_BUSD.activeWorker,
        address: contracts_1.BTCBBUSDWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BTCBBUSDWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.BTCBBUSDWaultswapWorkerConfig,
    },
    {
        key: 'ws-wusd-busd',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['wusd'],
        },
        active: waultSwapWorkers.WUSD_BUSD.activeWorker,
        address: contracts_1.WUSDBUSDWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.WUSDBUSDWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.WUSDBUSDWaultswapWorkerConfig,
    },
    // ETH
    {
        key: 'ws-busd-eth',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['eth'],
            farmingToken: tokenProfile_1.mapTokenProfiles['busd'],
        },
        active: waultSwapWorkers.BUSD_ETH.activeWorker,
        address: contracts_1.BUSDETHWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BUSDETHWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.BUSDETHWaultswapWorkerConfig,
    },
    {
        key: 'ws-btcb-eth',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['eth'],
            farmingToken: tokenProfile_1.mapTokenProfiles['btcb'],
        },
        active: waultSwapWorkers.BTCB_ETH.activeWorker,
        address: contracts_1.BTCBETHWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BTCBETHWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.BTCBETHWaultswapWorkerConfig,
    },
    {
        key: 'ws-beth-eth',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['eth'],
            farmingToken: tokenProfile_1.mapTokenProfiles['beth'],
        },
        active: waultSwapWorkers.BETH_ETH.activeWorker,
        address: contracts_1.BETHETHWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BETHETHWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.BETHETHWaultswapWorkerConfig,
    },
    {
        key: 'ws-usdt-eth',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['eth'],
            farmingToken: tokenProfile_1.mapTokenProfiles['usdt'],
        },
        active: waultSwapWorkers.USDT_ETH.activeWorker,
        address: contracts_1.USDTETHWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.USDTETHWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.USDTETHWaultswapWorkerConfig,
    },
    // ALPACA
    {
        key: 'ws-usdt-alpaca',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['alpaca'],
            farmingToken: tokenProfile_1.mapTokenProfiles['usdt'],
        },
        active: waultSwapWorkers.USDT_ALPACA.activeWorker,
        address: contracts_1.USDTALPACAWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.USDTALPACAWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.USDTALPACAWaultswapWorkerConfig,
    },
    {
        key: 'ws-bnb-alpaca',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['alpaca'],
            farmingToken: tokenProfile_1.mapTokenProfiles['bnb'],
        },
        active: waultSwapWorkers.BNB_ALPACA.activeWorker,
        address: contracts_1.BNBALPACAWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BNBALPACAWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.BNBALPACAWaultswapWorkerConfig,
    },
    // USDT
    {
        key: 'ws-alpaca-usdt',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['usdt'],
            farmingToken: tokenProfile_1.mapTokenProfiles['alpaca'],
        },
        active: waultSwapWorkers.ALPACA_USDT.activeWorker,
        address: contracts_1.ALPACAUSDTWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.ALPACAUSDTWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.ALPACAUSDTWaultswapWorkerConfig,
    },
    {
        key: 'ws-wex-usdt',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['usdt'],
            farmingToken: tokenProfile_1.mapTokenProfiles['wex'],
        },
        active: waultSwapWorkers.WEX_USDT.activeWorker,
        address: contracts_1.WEXUSDTWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.WEXUSDTWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.WEXUSDTWaultswapWorkerConfig,
    },
    {
        key: 'ws-busd-usdt',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['usdt'],
            farmingToken: tokenProfile_1.mapTokenProfiles['busd'],
        },
        active: waultSwapWorkers.BUSD_USDT.activeWorker,
        address: contracts_1.BUSDUSDTWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BUSDUSDTWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.BUSDUSDTWaultswapWorkerConfig,
    },
    {
        key: 'ws-btcb-usdt',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['usdt'],
            farmingToken: tokenProfile_1.mapTokenProfiles['btcb'],
        },
        active: waultSwapWorkers.BTCB_USDT.activeWorker,
        address: contracts_1.BTCBUSDTWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BTCBUSDTWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.BTCBUSDTWaultswapWorkerConfig,
    },
    {
        key: 'ws-eth-usdt',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['usdt'],
            farmingToken: tokenProfile_1.mapTokenProfiles['eth'],
        },
        active: waultSwapWorkers.ETH_USDT.activeWorker,
        address: contracts_1.ETHUSDTWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.ETHUSDTWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.ETHUSDTWaultswapWorkerConfig,
    },
    {
        key: 'ws-matic-usdt',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['usdt'],
            farmingToken: tokenProfile_1.mapTokenProfiles['matic'],
        },
        active: waultSwapWorkers.MATIC_USDT.activeWorker,
        address: contracts_1.MATICUSDTWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.MATICUSDTWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.MATICUSDTWaultswapWorkerConfig,
    },
    {
        key: 'ws-tusd-usdt',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['usdt'],
            farmingToken: tokenProfile_1.mapTokenProfiles['tusd'],
        },
        active: waultSwapWorkers.TUSD_USDT.activeWorker,
        address: contracts_1.TUSDUSDTWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.TUSDUSDTWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.TUSDUSDTWaultswapWorkerConfig,
    },
    // BTCB
    {
        key: 'ws-eth-btcb',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['btcb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['eth'],
        },
        active: waultSwapWorkers.ETH_BTCB.activeWorker,
        address: contracts_1.ETHBTCBWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.ETHBTCBWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.ETHBTCBWaultswapWorkerConfig,
    },
    {
        key: 'ws-usdt-btcb',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['btcb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['usdt'],
        },
        active: waultSwapWorkers.USDT_BTCB.activeWorker,
        address: contracts_1.USDTBTCBWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.USDTBTCBWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.USDTBTCBWaultswapWorkerConfig,
    },
    {
        key: 'ws-busd-btcb',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['btcb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['busd'],
        },
        active: waultSwapWorkers.BUSD_BTCB.activeWorker,
        address: contracts_1.BUSDBTCBWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BUSDBTCBWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.BUSDBTCBWaultswapWorkerConfig,
    },
    // TUSD
    {
        key: 'ws-usdt-tusd',
        dex: entity_1.WaultSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['tusd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['usdt'],
        },
        active: waultSwapWorkers.USDT_TUSD.activeWorker,
        address: contracts_1.USDTTUSDWaultswapWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.USDTTUSDWaultswapWorkerStrategies),
        workerConfigAddress: contracts_1.USDTTUSDWaultswapWorkerConfig,
    },
];
const pancakeSingleAssetWorkers = [
    {
        key: 'pcs-cakemaxi-eth',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles.eth,
            farmingToken: tokenProfile_1.mapTokenProfiles.cake,
        },
        active: pancakeSwapWorkers.CAKEMAXI_ETH.activeWorker,
        address: contracts_1.ETHPancakeswapCakeMaxiWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.ETHPancakeswapCakeMaxiWorkerStrategies),
        workerConfigAddress: contracts_1.ETHPancakeswapCakeMaxiWorkerConfig,
        lpRoute: {
            token0: tokenProfile_1.mapTokenProfiles.cake,
            token1: tokenProfile_1.mapTokenProfiles.eth,
            path: [tokenProfile_1.mapTokenProfiles.eth, tokenProfile_1.mapTokenProfiles.bnb, tokenProfile_1.mapTokenProfiles.cake],
        },
    },
    {
        key: 'pcs-cakemaxi-usdt',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles.usdt,
            farmingToken: tokenProfile_1.mapTokenProfiles.cake,
        },
        active: pancakeSwapWorkers.CAKEMAXI_USDT.activeWorker,
        address: contracts_1.USDTPancakeswapCakeMaxiWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.USDTPancakeswapCakeMaxiWorkerStrategies),
        workerConfigAddress: contracts_1.USDTPancakeswapCakeMaxiWorkerConfig,
        lpRoute: {
            token0: tokenProfile_1.mapTokenProfiles.cake,
            token1: tokenProfile_1.mapTokenProfiles.usdt,
            path: [tokenProfile_1.mapTokenProfiles.usdt, tokenProfile_1.mapTokenProfiles.cake],
        },
    },
    {
        key: 'pcs-cakemaxi-bnb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles.bnb,
            farmingToken: tokenProfile_1.mapTokenProfiles.cake,
        },
        active: pancakeSwapWorkers.CAKEMAXI_BNB.activeWorker,
        address: contracts_1.BNBPancakeswapCakeMaxiWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BNBPancakeswapCakeMaxiWorkerStrategies),
        workerConfigAddress: contracts_1.BNBPancakeswapCakeMaxiWorkerConfig,
        lpRoute: {
            token0: tokenProfile_1.mapTokenProfiles.cake,
            token1: tokenProfile_1.mapTokenProfiles.bnb,
            path: [tokenProfile_1.mapTokenProfiles.bnb, tokenProfile_1.mapTokenProfiles.cake],
        },
    },
    {
        key: 'pcs-cakemaxi-busd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles.busd,
            farmingToken: tokenProfile_1.mapTokenProfiles.cake,
        },
        active: pancakeSwapWorkers.CAKEMAXI_BUSD.activeWorker,
        address: contracts_1.BUSDPancakeswapCakeMaxiWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BUSDPancakeswapCakeMaxiWorkerStrategies),
        workerConfigAddress: contracts_1.BUSDPancakeswapCakeMaxiWorkerConfig,
        lpRoute: {
            token0: tokenProfile_1.mapTokenProfiles.cake,
            token1: tokenProfile_1.mapTokenProfiles.busd,
            path: [tokenProfile_1.mapTokenProfiles.busd, tokenProfile_1.mapTokenProfiles.cake],
        },
    },
    {
        key: 'pcs-cakemaxi-btcb',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles.btcb,
            farmingToken: tokenProfile_1.mapTokenProfiles.cake,
        },
        active: pancakeSwapWorkers.CAKEMAXI_BTCB.activeWorker,
        address: contracts_1.BTCBPancakeswapCakeMaxiWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BTCBPancakeswapCakeMaxiWorkerStrategies),
        workerConfigAddress: contracts_1.BTCBPancakeswapCakeMaxiWorkerConfig,
        lpRoute: {
            token0: tokenProfile_1.mapTokenProfiles.cake,
            token1: tokenProfile_1.mapTokenProfiles.btcb,
            path: [tokenProfile_1.mapTokenProfiles.btcb, tokenProfile_1.mapTokenProfiles.bnb, tokenProfile_1.mapTokenProfiles.cake],
        },
    },
    {
        key: 'pcs-cakemaxi-tusd',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles.tusd,
            farmingToken: tokenProfile_1.mapTokenProfiles.cake,
        },
        active: pancakeSwapWorkers.CAKEMAXI_TUSD.activeWorker,
        address: contracts_1.TUSDPancakeswapCakeMaxiWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.TUSDPancakeswapCakeMaxiWorkerStrategies),
        workerConfigAddress: contracts_1.TUSDPancakeswapCakeMaxiWorkerConfig,
        lpRoute: {
            token0: tokenProfile_1.mapTokenProfiles.cake,
            token1: tokenProfile_1.mapTokenProfiles.tusd,
            path: [tokenProfile_1.mapTokenProfiles.tusd, tokenProfile_1.mapTokenProfiles.busd, tokenProfile_1.mapTokenProfiles.cake],
        },
    },
    {
        key: 'pcs-cakemaxi-usdc',
        dex: entity_1.PancakeSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles.usdc,
            farmingToken: tokenProfile_1.mapTokenProfiles.cake,
        },
        active: pancakeSwapWorkers.CAKEMAXI_USDC.activeWorker,
        address: contracts_1.USDCPancakeswapCakeMaxiWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.USDCPancakeswapCakeMaxiWorkerStrategies),
        workerConfigAddress: contracts_1.USDCPancakeswapCakeMaxiWorkerConfig,
        lpRoute: {
            token0: tokenProfile_1.mapTokenProfiles.cake,
            token1: tokenProfile_1.mapTokenProfiles.usdc,
            path: [tokenProfile_1.mapTokenProfiles.usdc, tokenProfile_1.mapTokenProfiles.busd, tokenProfile_1.mapTokenProfiles.cake],
        },
    },
];
const mdexLpWorkers = [
    // USDT
    {
        key: 'ms-btcb-usdt',
        dex: entity_1.MdexSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['usdt'],
            farmingToken: tokenProfile_1.mapTokenProfiles['btcb'],
        },
        active: mdexSwapWorkers.BTCB_USDT.activeWorker,
        address: contracts_1.BTCBUSDTMdexWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BTCBUSDTMdexWorkerStrategies),
        workerConfigAddress: contracts_1.BTCBUSDTMdexWorkerConfig,
    },
    {
        key: 'ms-eth-usdt',
        dex: entity_1.MdexSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['usdt'],
            farmingToken: tokenProfile_1.mapTokenProfiles['eth'],
        },
        active: mdexSwapWorkers.ETH_USDT.activeWorker,
        address: contracts_1.ETHUSDTMdexWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.ETHUSDTMdexWorkerStrategies),
        workerConfigAddress: contracts_1.ETHUSDTMdexWorkerConfig,
    },
    {
        key: 'ms-bnb-usdt',
        dex: entity_1.MdexSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['usdt'],
            farmingToken: tokenProfile_1.mapTokenProfiles['bnb'],
        },
        active: mdexSwapWorkers.BNB_USDT.activeWorker,
        address: contracts_1.WBNBUSDTMdexWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.WBNBUSDTMdexWorkerStrategies),
        workerConfigAddress: contracts_1.WBNBUSDTMdexWorkerConfig,
    },
    {
        key: 'ms-usdc-usdt',
        dex: entity_1.MdexSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['usdt'],
            farmingToken: tokenProfile_1.mapTokenProfiles['usdc'],
        },
        active: mdexSwapWorkers.USDC_USDT.activeWorker,
        address: contracts_1.USDCUSDTMdexWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.USDCUSDTMdexWorkerStrategies),
        workerConfigAddress: contracts_1.USDCUSDTMdexWorkerConfig,
    },
    {
        key: 'ms-dai-usdt',
        dex: entity_1.MdexSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['usdt'],
            farmingToken: tokenProfile_1.mapTokenProfiles['dai'],
        },
        active: mdexSwapWorkers.DAI_USDT.activeWorker,
        address: contracts_1.DAIUSDTMdexWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.DAIUSDTMdexWorkerStrategies),
        workerConfigAddress: contracts_1.DAIUSDTMdexWorkerConfig,
    },
    // BTCB
    {
        key: 'ms-usdt-btcb',
        dex: entity_1.MdexSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['btcb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['usdt'],
        },
        active: mdexSwapWorkers.USDT_BTCB.activeWorker,
        address: contracts_1.USDTBTCBMdexWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.USDTBTCBMdexWorkerStrategies),
        workerConfigAddress: contracts_1.USDTBTCBMdexWorkerConfig,
    },
    {
        key: 'ms-eth-btcb',
        dex: entity_1.MdexSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['btcb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['eth'],
        },
        active: mdexSwapWorkers.ETH_BTCB.activeWorker,
        address: contracts_1.ETHBTCBMdexWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.ETHBTCBMdexWorkerStrategies),
        workerConfigAddress: contracts_1.ETHBTCBMdexWorkerConfig,
    },
    {
        key: 'ms-bnb-btcb',
        dex: entity_1.MdexSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['btcb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['bnb'],
        },
        active: mdexSwapWorkers.BNB_BTCB.activeWorker,
        address: contracts_1.WBNBBTCBMdexWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.WBNBBTCBMdexWorkerStrategies),
        workerConfigAddress: contracts_1.WBNBBTCBMdexWorkerConfig,
    },
    // ETH
    {
        key: 'ms-usdt-eth',
        dex: entity_1.MdexSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['eth'],
            farmingToken: tokenProfile_1.mapTokenProfiles['usdt'],
        },
        active: mdexSwapWorkers.USDT_ETH.activeWorker,
        address: contracts_1.USDTETHMdexWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.USDTETHMdexWorkerStrategies),
        workerConfigAddress: contracts_1.USDTETHMdexWorkerConfig,
    },
    {
        key: 'ms-bnb-eth',
        dex: entity_1.MdexSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['eth'],
            farmingToken: tokenProfile_1.mapTokenProfiles['bnb'],
        },
        active: mdexSwapWorkers.BNB_ETH.activeWorker,
        address: contracts_1.WBNBETHMdexWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.WBNBETHMdexWorkerStrategies),
        workerConfigAddress: contracts_1.WBNBETHMdexWorkerConfig,
    },
    {
        key: 'ms-btcb-eth',
        dex: entity_1.MdexSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['eth'],
            farmingToken: tokenProfile_1.mapTokenProfiles['btcb'],
        },
        active: mdexSwapWorkers.BTCB_ETH.activeWorker,
        address: contracts_1.BTCBETHMdexWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BTCBETHMdexWorkerStrategies),
        workerConfigAddress: contracts_1.BTCBETHMdexWorkerConfig,
    },
    // BNB
    {
        key: 'ms-mdx-bnb',
        dex: entity_1.MdexSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['mdx'],
        },
        active: mdexSwapWorkers.MDX_BNB.activeWorker,
        address: contracts_1.MDXBNBMdexWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.MDXBNBMdexworkerStrategies),
        workerConfigAddress: contracts_1.MDXBNBMdexWorkerConfig,
    },
    {
        key: 'ms-usdt-bnb',
        dex: entity_1.MdexSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['usdt'],
        },
        active: mdexSwapWorkers.USDT_BNB.activeWorker,
        address: contracts_1.USDTWBNBMdexWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.USDTWBNBMdexworkerStrategies),
        workerConfigAddress: contracts_1.USDTWBNBMdexWorkerConfig,
    },
    {
        key: 'ms-eth-bnb',
        dex: entity_1.MdexSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['eth'],
        },
        active: mdexSwapWorkers.ETH_BNB.activeWorker,
        address: contracts_1.ETHWBNBMdexWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.ETHWBNBMdexworkerStrategies),
        workerConfigAddress: contracts_1.ETHWBNBMdexWorkerConfig,
    },
    {
        key: 'ms-busd-bnb',
        dex: entity_1.MdexSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['busd'],
        },
        active: mdexSwapWorkers.BUSD_BNB.activeWorker,
        address: contracts_1.BUSDWBNBMdexWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BUSDWBNBMdexworkerStrategies),
        workerConfigAddress: contracts_1.BUSDWBNBMdexWorkerConfig,
    },
    {
        key: 'ms-btcb-bnb',
        dex: entity_1.MdexSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['bnb'],
            farmingToken: tokenProfile_1.mapTokenProfiles['btcb'],
        },
        active: mdexSwapWorkers.BTCB_BNB.activeWorker,
        address: contracts_1.BTCBWBNBMdexWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.BTCBWBNBMdexworkerStrategies),
        workerConfigAddress: contracts_1.BTCBWBNBMdexWorkerConfig,
    },
    // BUSD
    {
        key: 'ms-mdx-busd',
        dex: entity_1.MdexSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['mdx'],
        },
        active: mdexSwapWorkers.MDX_BUSD.activeWorker,
        address: contracts_1.MDXBUSDMdexWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.MDXBUSDMdexWorkerStrategies),
        workerConfigAddress: contracts_1.MDXBUSDMdexWorkerConfig,
    },
    {
        key: 'ms-bnb-busd',
        dex: entity_1.MdexSwapDex,
        tokenPair: {
            baseToken: tokenProfile_1.mapTokenProfiles['busd'],
            farmingToken: tokenProfile_1.mapTokenProfiles['bnb'],
        },
        active: mdexSwapWorkers.BNB_BUSD.activeWorker,
        address: contracts_1.WBNBBUSDMdexWorkerAddress,
        strategyAddress: parseStrategyAddress(contracts_1.WBNBBUSDMdexWorkerStrategies),
        workerConfigAddress: contracts_1.WBNBBUSDMdexWorkerConfig,
    },
];
const allWorkers = [...pancakeLpWorkers, ...waultlpWorkers, ...pancakeSingleAssetWorkers, ...mdexLpWorkers];
// const allWorkers = [...pancakeLpWorkers, ...waultlpWorkers, ...pancakeSingleAssetWorkers]
// filter out inactive worker
exports.workers = allWorkers.filter((o) => o.active);
exports.mapWorkers = exports.workers.reduce((accu, worker) => {
    return Object.assign(Object.assign({}, accu), { [worker.key]: worker });
}, {});
const getWorkerByAddress = (address) => exports.workers.find((eachVault) => address_1.compare(eachVault.address, address));
exports.getWorkerByAddress = getWorkerByAddress;
