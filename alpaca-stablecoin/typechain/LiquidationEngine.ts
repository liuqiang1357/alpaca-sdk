/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface LiquidationEngineInterface extends ethers.utils.Interface {
  functions: {
    "bookKeeper()": FunctionFragment;
    "cage()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "liquidate(bytes32,address,uint256,uint256,address,bytes)": FunctionFragment;
    "live()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "systemDebtEngine()": FunctionFragment;
    "uncage()": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bookKeeper",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BytesLike, string, BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "live", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "systemDebtEngine",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "uncage", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "bookKeeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "live", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemDebtEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uncage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "LogCage()": EventFragment;
    "LogUncage()": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogCage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUncage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type LogCageEvent = TypedEvent<[], {}>;

export type LogCageEventFilter = TypedEventFilter<LogCageEvent>;

export type LogUncageEvent = TypedEvent<[], {}>;

export type LogUncageEventFilter = TypedEventFilter<LogUncageEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface LiquidationEngine extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidationEngineInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bookKeeper(overrides?: CallOverrides): Promise<[string]>;

    cage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _bookKeeper: string,
      _systemDebtEngine: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      _collateralPoolId: BytesLike,
      _positionAddress: string,
      _debtShareToBeLiquidated: BigNumberish,
      _maxDebtShareToBeLiquidated: BigNumberish,
      _collateralRecipient: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    live(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    systemDebtEngine(overrides?: CallOverrides): Promise<[string]>;

    uncage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bookKeeper(overrides?: CallOverrides): Promise<string>;

  cage(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _bookKeeper: string,
    _systemDebtEngine: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    _collateralPoolId: BytesLike,
    _positionAddress: string,
    _debtShareToBeLiquidated: BigNumberish,
    _maxDebtShareToBeLiquidated: BigNumberish,
    _collateralRecipient: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  live(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  systemDebtEngine(overrides?: CallOverrides): Promise<string>;

  uncage(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bookKeeper(overrides?: CallOverrides): Promise<string>;

    cage(overrides?: CallOverrides): Promise<void>;

    initialize(
      _bookKeeper: string,
      _systemDebtEngine: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(
      _collateralPoolId: BytesLike,
      _positionAddress: string,
      _debtShareToBeLiquidated: BigNumberish,
      _maxDebtShareToBeLiquidated: BigNumberish,
      _collateralRecipient: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    live(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    systemDebtEngine(overrides?: CallOverrides): Promise<string>;

    uncage(overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "LogCage()"(): LogCageEventFilter;
    LogCage(): LogCageEventFilter;

    "LogUncage()"(): LogUncageEventFilter;
    LogUncage(): LogUncageEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    bookKeeper(overrides?: CallOverrides): Promise<BigNumber>;

    cage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _bookKeeper: string,
      _systemDebtEngine: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidate(
      _collateralPoolId: BytesLike,
      _positionAddress: string,
      _debtShareToBeLiquidated: BigNumberish,
      _maxDebtShareToBeLiquidated: BigNumberish,
      _collateralRecipient: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    live(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    systemDebtEngine(overrides?: CallOverrides): Promise<BigNumber>;

    uncage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bookKeeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _bookKeeper: string,
      _systemDebtEngine: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      _collateralPoolId: BytesLike,
      _positionAddress: string,
      _debtShareToBeLiquidated: BigNumberish,
      _maxDebtShareToBeLiquidated: BigNumberish,
      _collateralRecipient: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    live(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    systemDebtEngine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uncage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
