/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AlpacaAuthEvents,
  AlpacaAuthEventsInterface,
} from "../AlpacaAuthEvents";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_authority",
        type: "address",
      },
    ],
    name: "LogSetAuthority",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "LogSetOwner",
    type: "event",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212205fcbd8dcac8ee7d71d671040a870f65240918e99b32d9fa28b80815c20b4f8c464736f6c634300060c0033";

type AlpacaAuthEventsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AlpacaAuthEventsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AlpacaAuthEvents__factory extends ContractFactory {
  constructor(...args: AlpacaAuthEventsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AlpacaAuthEvents> {
    return super.deploy(overrides || {}) as Promise<AlpacaAuthEvents>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AlpacaAuthEvents {
    return super.attach(address) as AlpacaAuthEvents;
  }
  connect(signer: Signer): AlpacaAuthEvents__factory {
    return super.connect(signer) as AlpacaAuthEvents__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AlpacaAuthEventsInterface {
    return new utils.Interface(_abi) as AlpacaAuthEventsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AlpacaAuthEvents {
    return new Contract(address, _abi, signerOrProvider) as AlpacaAuthEvents;
  }
}
