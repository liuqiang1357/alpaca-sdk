/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockAlpacaOracle,
  MockAlpacaOracleInterface,
} from "../MockAlpacaOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastUpdate",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060b08061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063ac41865a14602d575b600080fd5b605860048036036040811015604157600080fd5b506001600160a01b03813581169160200135166071565b6040805192835260208301919091528051918290030190f35b5060009182915056fea26469706673582212201421d6e72d766c693ad1ad74dba739b9cfa27dfe7af864ec67380f80f32d87df64736f6c634300060c0033";

type MockAlpacaOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAlpacaOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAlpacaOracle__factory extends ContractFactory {
  constructor(...args: MockAlpacaOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockAlpacaOracle> {
    return super.deploy(overrides || {}) as Promise<MockAlpacaOracle>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockAlpacaOracle {
    return super.attach(address) as MockAlpacaOracle;
  }
  connect(signer: Signer): MockAlpacaOracle__factory {
    return super.connect(signer) as MockAlpacaOracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAlpacaOracleInterface {
    return new utils.Interface(_abi) as MockAlpacaOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockAlpacaOracle {
    return new Contract(address, _abi, signerOrProvider) as MockAlpacaOracle;
  }
}
