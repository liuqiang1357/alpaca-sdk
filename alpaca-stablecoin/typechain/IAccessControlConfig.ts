/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IAccessControlConfigInterface extends ethers.utils.Interface {
  functions: {
    "ADAPTER_ROLE()": FunctionFragment;
    "BOOK_KEEPER_ROLE()": FunctionFragment;
    "COLLATERAL_MANAGER_ROLE()": FunctionFragment;
    "GOV_ROLE()": FunctionFragment;
    "LIQUIDATION_ENGINE_ROLE()": FunctionFragment;
    "MINTABLE_ROLE()": FunctionFragment;
    "OWNER_ROLE()": FunctionFragment;
    "POSITION_MANAGER_ROLE()": FunctionFragment;
    "PRICE_ORACLE_ROLE()": FunctionFragment;
    "SHOW_STOPPER_ROLE()": FunctionFragment;
    "STABILITY_FEE_COLLECTOR_ROLE()": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADAPTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BOOK_KEEPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COLLATERAL_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "GOV_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATION_ENGINE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTABLE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OWNER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POSITION_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_ORACLE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SHOW_STOPPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STABILITY_FEE_COLLECTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADAPTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BOOK_KEEPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COLLATERAL_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GOV_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATION_ENGINE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTABLE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OWNER_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "POSITION_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_ORACLE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SHOW_STOPPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STABILITY_FEE_COLLECTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;

  events: {};
}

export interface IAccessControlConfig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAccessControlConfigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADAPTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    BOOK_KEEPER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    COLLATERAL_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GOV_ROLE(overrides?: CallOverrides): Promise<[string]>;

    LIQUIDATION_ENGINE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MINTABLE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    POSITION_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PRICE_ORACLE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SHOW_STOPPER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    STABILITY_FEE_COLLECTOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  ADAPTER_ROLE(overrides?: CallOverrides): Promise<string>;

  BOOK_KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

  COLLATERAL_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  GOV_ROLE(overrides?: CallOverrides): Promise<string>;

  LIQUIDATION_ENGINE_ROLE(overrides?: CallOverrides): Promise<string>;

  MINTABLE_ROLE(overrides?: CallOverrides): Promise<string>;

  OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

  POSITION_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  PRICE_ORACLE_ROLE(overrides?: CallOverrides): Promise<string>;

  SHOW_STOPPER_ROLE(overrides?: CallOverrides): Promise<string>;

  STABILITY_FEE_COLLECTOR_ROLE(overrides?: CallOverrides): Promise<string>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    ADAPTER_ROLE(overrides?: CallOverrides): Promise<string>;

    BOOK_KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

    COLLATERAL_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    GOV_ROLE(overrides?: CallOverrides): Promise<string>;

    LIQUIDATION_ENGINE_ROLE(overrides?: CallOverrides): Promise<string>;

    MINTABLE_ROLE(overrides?: CallOverrides): Promise<string>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

    POSITION_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    PRICE_ORACLE_ROLE(overrides?: CallOverrides): Promise<string>;

    SHOW_STOPPER_ROLE(overrides?: CallOverrides): Promise<string>;

    STABILITY_FEE_COLLECTOR_ROLE(overrides?: CallOverrides): Promise<string>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    ADAPTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    BOOK_KEEPER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    COLLATERAL_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GOV_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION_ENGINE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MINTABLE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    POSITION_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_ORACLE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SHOW_STOPPER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    STABILITY_FEE_COLLECTOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADAPTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BOOK_KEEPER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    COLLATERAL_MANAGER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GOV_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LIQUIDATION_ENGINE_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINTABLE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POSITION_MANAGER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRICE_ORACLE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SHOW_STOPPER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STABILITY_FEE_COLLECTOR_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
